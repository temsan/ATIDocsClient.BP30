
// Подключаемые модули
&НаКлиенте
Перем JSON Экспорт;

&НаКлиенте
Перем API Экспорт;

&НаКлиенте
Перем ПечатьДокументов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ЛОГИКА ФОРМЫ НА СТОРОНЕ СЕРВЕРА

&НаСервере
Функция ВыполнитьРазборЭлектронныхДокументовНаСервере(Стр, АдресФайла, ИмяФайла)
		
	СервОбъект = РеквизитФормыВЗначение("ОбработкаОбъект");	
	Возврат СервОбъект.ВыполнитьРазборЭлектронныхДокументов(Стр, АдресФайла, ИмяФайла, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(КонтрагентОбъект, ВидКИ, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВидКИСсылка = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации."+ВидКИ);
	
	Отбор  = Новый Структура("Вид", ВидКИ);
	Строки = КонтрагентОбъект.КонтактнаяИнформация.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		ДанныеСтроки = КонтрагентОбъект.КонтактнаяИнформация.Добавить();
		ДанныеСтроки.Вид = ВидКИСсылка;
		ДанныеСтроки.Тип = ВидКИСсылка.Тип;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураДанных);
	ДанныеСтроки.ЗначенияПолей = СтруктураДанных.КонтактнаяИнформация;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоИНННаСервере(КонтрагентОбъект, ОписаниеОшибки = "")
	
	ЭтоЮрЛицо = КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Если ЭтоЮрЛицо Тогда
		РеквизитыКонтрагента = СервисДанныхЕдиныхГосРеестров.РеквизитыЮрЛицаПоИНН(КонтрагентОбъект.ИНН);
	Иначе
		РеквизитыКонтрагента = СервисДанныхЕдиныхГосРеестров.РеквизитыПредпринимателяПоИНН(КонтрагентОбъект.ИНН);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(КонтрагентОбъект, РеквизитыКонтрагента);
	КонтрагентОбъект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
		
	Если ЭтоЮрЛицо Тогда
		
		// Заполнение адресов
		
		ЗаполнитьЭлементКонтактнойИнформации(КонтрагентОбъект, "ЮрАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		
		ЗаполнитьЭлементКонтактнойИнформации(КонтрагентОбъект, "ФактАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		ЮрФактАдресаСовпадают = Истина;
		
		ЗаполнитьЭлементКонтактнойИнформации(КонтрагентОбъект, "ПочтовыйАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		ЮрПочтовыйАдресаСовпадают = Истина;
		
		// Заполнение телефона
		
		ЗаполнитьЭлементКонтактнойИнформации(КонтрагентОбъект, "ТелефонКонтрагента", РеквизитыКонтрагента.Телефон);
		
		 //Заполнение контактного лица 
		
		Если РеквизитыКонтрагента.Руководитель <> Неопределено 
			И НЕ ЗначениеЗаполнено(КонтрагентОбъект.ОсновноеКонтактноеЛицо) Тогда
			
			ДанныеКонтактногоЛица = РеквизитыКонтрагента.Руководитель;
			ПредставлениеКонтактногоЛица = ДанныеКонтактногоЛица.Фамилия
				+ " " + ДанныеКонтактногоЛица.Имя
				+ " " + ДанныеКонтактногоЛица.Отчество
				+ ", " + ДанныеКонтактногоЛица.Должность;
			
		КонецЕсли;
				
	Иначе
		
		СвидетельствоОРегистрации = РеквизитыКонтрагента.СвидетельствоОРегистрации;
		КонтрагентОбъект.СвидетельствоСерияНомер = "" + СвидетельствоОРегистрации.Серия + " " + СвидетельствоОРегистрации.Номер;
		КонтрагентОбъект.СвидетельствоДатаВыдачи = СвидетельствоОРегистрации.Дата;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьКонтрагентаСервер(КонтрагентСтруктура, КонтрагентID)
	
	Перем ОписаниеОшибки;
	
	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	
	КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	
	КонтрагентОбъект.Наименование = КонтрагентСтруктура["name"];
	
	Если НРег(КонтрагентСтруктура["ownership"]) <> "none" И НРег(КонтрагентСтруктура["name"]) <> "none" Тогда
		КонтрагентОбъект.НаименованиеПолное = КонтрагентСтруктура["ownership"]+" "+КонтрагентСтруктура["name"];
	КонецЕсли;
	
	КонтрагентОбъект.ИНН = Формат(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КонтрагентСтруктура["inn"]), "ЧГ=0");
		
	Попытка
		
		Если НЕ ПустаяСтрока(КонтрагентОбъект.ИНН) Тогда
			ЗаполнитьРеквизитыПоИНННаСервере(КонтрагентОбъект, ОписаниеОшибки);
		КонецЕсли;
		
		КонтрагентОбъект.Записать()
	Исключение
		
		Если ОписаниеОшибки = Неопределено Тогда
			ОписаниеОшибки = ОписаниеОшибки();
		КонецЕсли;
		
		Сообщить(ОписаниеОшибки)
		
	КонецПопытки;
	
	СервОбъект = РеквизитФормыВЗначение("ОбработкаОбъект");
	СервОбъект.Сохранить_КодATI_Контрагента(КонтрагентОбъект.Ссылка, КонтрагентID);
	
	Возврат КонтрагентОбъект.Ссылка;
	
КонецФункции

&НаСервере
Функция Преобразовать64НаСервере(Строка64 = неопределено, Массив64 = неопределено)
	
	Таб64 = Новый ТаблицаЗначений;
	Таб64.Колонки.Добавить("Код");
	Таб64.Колонки.Добавить("Символ");
	Нпп = 0;
	Для Код = КодСимвола("A") По КодСимвола("Z") Цикл
		стр = Таб64.Добавить();
		стр.Код = Нпп;
		стр.Символ = Символ(Код);
		Нпп = Нпп + 1;
	КонецЦикла;
	Для Код = КодСимвола("a") По КодСимвола("z") Цикл
		стр = Таб64.Добавить();
		стр.Код = Нпп;
		стр.Символ = Символ(Код);
		Нпп = Нпп + 1;
	КонецЦикла;
	стр = Таб64.Добавить();
	стр.Код = Нпп;
	стр.Символ = "0";
	Нпп = Нпп + 1;
	Для Код = 1 По 9 Цикл
		стр = Таб64.Добавить();
		стр.Код = Нпп;
		стр.Символ = Формат(Код,"ЧЦ=1; ЧДЦ=0");
		Нпп = Нпп + 1;
	КонецЦикла;
	стр = Таб64.Добавить();
	стр.Код = Нпп;
	стр.Символ = "+";
	Нпп = Нпп + 1;
	стр = Таб64.Добавить();
	стр.Код = Нпп;
	стр.Символ = "/";
	
	Если Массив64 = неопределено Тогда 
		Если Строка64 = неопределено Тогда
			Сообщить("неверный вызов функции");
			Возврат неопределено;
		КонецЕсли;
		//Уберем переносы строк
		Строка64 = СтрЗаменить(Строка64, Символ(10), "");
		Строка64 = СтрЗаменить(Строка64, Символ(13), "");
		
		//преобразовываем строку в массив
		Если СтрДлина(Строка64) % 4 <> 0 Тогда
			Сообщить("длина строки на входе должна быть кратна 4"); 
			Сообщить(СтрДлина(Строка64)); 
			Возврат неопределено;
		КонецЕсли;
		Кол4 = Цел(СтрДлина(Строка64) / 4);
		РазмерМ = Кол4 * 3;
		Если Прав(Строка64, 2) = "==" Тогда
			РазмерМ = РазмерМ - 2;
		ИначеЕсли Прав(Строка64, 1) = "=" Тогда
			РазмерМ = РазмерМ - 1;
		КонецЕсли;   
		Массив64 = Новый Массив(РазмерМ);
		Для А = 1 По Кол4 Цикл
			Число3 = 0;
			Для Б = 1 По 4 Цикл
				Буква1 = Сред(Строка64, (А-1)*4 + Б, 1); 
				Если Буква1 = "=" Тогда
					Код4 = 0;
				Иначе
					стрН = Таб64.Найти(Буква1, "Символ");
					Если стрН = Неопределено Тогда
						Сообщить("ошибка при поиске "+ КодСимвола(Буква1)); 
					Иначе 
						Код4 = стрН.Код;
					КонецЕсли;
				КонецЕсли;
				Число3 = Число3 * 64 + Код4;
			КонецЦикла;
			Ост = Число3 % 256;
			Индекс = (А-1)*3 + 2;
			Если Индекс <= РазмерМ - 1 Тогда
				Массив64[Индекс] = Ост;
			КонецЕсли;
			Число3 = (Число3 - Ост) / 256;
			Ост = Число3 % 256;
			Индекс = (А-1)*3 + 1;
			Если Индекс <= РазмерМ - 1 Тогда
				Массив64[Индекс] = Ост;
			КонецЕсли;
			Число3 = (Число3 - Ост) / 256;
			Ост = Число3 % 256;
			Массив64[(А-1)*3 + 0] = Ост;
		КонецЦикла;
		Возврат Массив64;
	Иначе //Преобразовываем массив в строку
		Строка64 = "";
		Кол3 = Цел(Массив64.Количество() / 3);
		Если Массив64.Количество() % 3 <> 0 Тогда
			Кол3 = Кол3 + 1;
		КонецЕсли;
		Для А = 1 По Кол3 Цикл
			Число3 = Массив64[(А-1)*3]; 
			Если (А-1)*3+1 <= Массив64.ВГраница() Тогда
				Код3 = Массив64[(А-1)*3+1];
			Иначе
				Код3 = 0;
			КонецЕсли;
			Число3 = Число3*256 + Код3;
			Если (А-1)*3+2 <= Массив64.ВГраница() Тогда
				Код3 = Массив64[(А-1)*3+2];
			Иначе
				Код3 = 0;
			КонецЕсли;
			Число3 = Число3*256 + Код3;
			
			Ост4 = Число3 % 64;
			Число3 = (Число3 - Ост4) / 64;
			Ост3 = Число3 % 64;
			Число3 = (Число3 - Ост3) / 64;
			Ост2 = Число3 % 64;
			Число3 = (Число3 - Ост2) / 64;
			Ост1 = Число3 % 64;
			Число3 = (Число3 - Ост1) / 64;
			стрН = Таб64.Найти(Ост1, "Код");
			Если стрН = неопределено Тогда
				Сообщить("Ошибка при поиске");
			Иначе
				Строка64 = Строка64 + стрН.Символ;
			КонецЕсли;
			стрН = Таб64.Найти(Ост2, "Код");
			Если стрН = неопределено Тогда
				Сообщить("Ошибка при поиске");
			Иначе
				Строка64 = Строка64 + стрН.Символ;
			КонецЕсли;
			стрН = Таб64.Найти(Ост3, "Код");
			Если стрН = неопределено Тогда
				Сообщить("Ошибка при поиске");
			Иначе
				Строка64 = Строка64 + стрН.Символ;
			КонецЕсли;
			стрН = Таб64.Найти(Ост4, "Код");
			Если стрН = неопределено Тогда
				Сообщить("Ошибка при поиске");
			Иначе
				Строка64 = Строка64 + стрН.Символ;
			КонецЕсли;
		КонецЦикла;
		//Если количество символов не делится на 3, то на конце должны быть
		//знаки "="
		Если Массив64.Количество() % 3 = 1 Тогда
			Строка64 = Лев(Строка64, СтрДлина(Строка64)-2)+ "=="; 
		ИначеЕсли Массив64.Количество() % 3 = 2 Тогда
			Строка64 = Лев(Строка64, СтрДлина(Строка64)-1)+ "="; 
		КонецЕсли;
		Возврат Строка64;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЛОГИКА ФОРМЫ НА СТОРОНЕ КЛИЕНТА

Функция Преобразовать64(Строка64 = неопределено, Массив64 = неопределено)
	
	Возврат Преобразовать64НаСервере(Строка64, Массив64);
	
КонецФункции

&НаКлиенте
Функция СтрокаВДату(Параметр) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Дата") Тогда
		
		Возврат Параметр;
		
	ИначеЕсли ТипЗнч(Параметр)=Тип("Строка") Тогда
		
		Попытка
			
			Если СтрДлина(Параметр) = 10 Тогда
				Возврат Дата(Число(Лев(Параметр, 4)), Число(Сред(Параметр, 6, 2)), Число(Сред(Параметр, 9, 2)));
				
			Иначе
				Возврат Дата(Число(Лев(Параметр, 4)), Число(Сред(Параметр, 6, 2)), Число(Сред(Параметр, 9, 2)),
					Число(Сред(Параметр, 12, 2)), Число(Сред(Параметр, 15, 2)), Число(Сред(Параметр, 18, 2)));
				
			КонецЕсли;
		Исключение
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Дата(1,1,1);
	
КонецФункции

&НаКлиенте
Функция СформироватьИнформациюОбАккаунте(Результат1С, ВыводитьЛогин = Ложь) Экспорт
	
	Если Результат1С = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Результат = "Информация о пользователе: ";
	Если Результат1С.Получить("ati_id") <> Неопределено Тогда
		Результат = Результат + Символы.ПС + "Код АТИ: " + Результат1С["ati_id"];
	КонецЕсли;
	
	Если ВыводитьЛогин И Результат1С.Получить("login") <> Неопределено Тогда
		Результат = Результат + Символы.ПС + "Логин: " + Результат1С["login"];
	КонецЕсли;
	
	Если Результат1С.Получить("activation") <> Неопределено Тогда
		Результат = Результат + Символы.ПС + "Дата активации: " + Формат(СтрокаВДату(Результат1С["activation"]), "ДЛФ=DD");
	КонецЕсли;
	
	Если Результат1С.Получить("inn") <> Неопределено Тогда
		Результат = Результат + Символы.ПС + "ИНН: " + Результат1С["inn"];
	КонецЕсли;
	
	Если Результат1С.Получить("ogrn") <> Неопределено Тогда
		Результат = Результат + Символы.ПС + "ОГРН: " + Результат1С["ogrn"];
	КонецЕсли;
	
	Если Результат1С.Получить("address") <> Неопределено Тогда
		Результат = Результат + Символы.ПС + "Адрес: " + Результат1С["address"];
	КонецЕсли;
	
	Если Результат1С.Получить("city") <> Неопределено Тогда
		
		Массив = ВладелецФормы.Города.НайтиСтроки(Новый Структура("id", Результат1С["city"]));
		
		Если Массив.Количество() <> 0 Тогда
			СтрГород = Массив[0]; 
			Результат = Результат + Символы.ПС + "Город: " + СтрГород.Наименование;
		Иначе
			Результат = Результат + Символы.ПС + "Город не определен";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДокументы(Результат1С) Экспорт
	
	Если Результат1С = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Объект = ВладелецФормы.Объект;
	
	Объект.СписокДокументов.Очистить();
	
	Для Каждого Документ Из Результат1С Цикл
		
		СтрДокумент = Объект.СписокДокументов.Добавить();
		СтрДокумент.Дата = СтрокаВДату(Документ["date"]);
		СтрДокумент.Номер = СокрЛП(СтрЗаменить(Документ["number"], "№", ""));
		СтрДокумент.Описание = Документ["description"];
		СтрДокумент.ТипДокумента = Документ["doctype"];
		СтрДокумент.id = Документ["id"];
		
		Если Документ["has_attachments"] Тогда
			СтрДокумент.ЕстьВложения = 1;
		Иначе
			СтрДокумент.ЕстьВложения = 0;
		КонецЕсли;
		
		contragent = Документ.Получить("contragent");
		Если ЗначениеЗаполнено(contragent) Тогда
			СтрДокумент.КонтрагентНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 (%2)",
				contragent["account"]["name"],
				contragent["account"]["id"]);
			СтрДокумент.КонтрагентId = contragent["account"]["id"];
		КонецЕсли;
		
		СтрДокумент.ПравоПодписи       = Документ["can_be_signed"];
		СтрДокумент.Подписан           = Документ["is_signed"];
		СтрДокумент.Прочитан           = Документ["is_opened"];
		СтрДокумент.Отклонен           = Документ["is_declined"];
		СтрДокумент.Утвержден          = Документ["is_approved"];
		СтрДокумент.НеПросмотрен	   = Документ["is_new"] ИЛИ Документ["is_waiting"];
		СтрДокумент.ТребуетРешения	   = Документ["is_asked_resolution"];
		СтрДокумент.МожетБытьОтправлен = Документ["can_be_sent"];
		СтрДокумент.ТипДокумента       = Документ["doctype"];
		СтрДокумент.Статус             = Документ["status"];
		
		СтрДокумент.ТипДокумента       = Документ["doctype"];
		
		СтрДокумент.can_be_archived    = Документ["can_be_archived"];
		СтрДокумент.can_be_deleted     = Документ["can_be_deleted"];
		СтрДокумент.can_be_unarchived  = Документ["can_be_unarchived"];
		СтрДокумент.can_be_undeleted   = Документ["can_be_undeleted"];

		СтрДокумент.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 №%2 от %3",
			СтрДокумент.ТипДокумента, СтрДокумент.Номер, Формат(СтрДокумент.Дата, "ДЛФ=D"));
		
		Если ЗначениеЗаполнено(Документ["file"]) Тогда
			
			СтрДокумент.ФайлID = Документ["file"]["id"];
			СтрДокумент.ФайлИмя = Документ["file"]["name"];

			Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(СтрДокумент.ФайлИмя);
			Если Документ["is_owner"] = Ложь И НРег(Расширение) = "xml"
				И (НРег(СтрДокумент.ТипДокумента) = "счет"
				ИЛИ НРег(СтрДокумент.ТипДокумента) = "акт"
				ИЛИ НРег(СтрДокумент.ТипДокумента) = "накладная"
				ИЛИ НРег(СтрДокумент.ТипДокумента) = "счет-фактура") Тогда
								
				// Возможно это электронный документ по формату CML
				СтрДокумент.МожетБытьСформирован = Истина;
			КонецЕсли;
			
			СписокПодписей = Документ["file"]["signs"];
			
			Если СписокПодписей <> Неопределено Тогда
				
				Для Каждого Элемент Из СписокПодписей Цикл
					
					Подписант = Элемент.Ключ;
					ТекущийСертификат = Элемент.Значение["certificate"];
					
					Если Найти(Подписант, Формат(СтрДокумент.КонтрагентId, "ЧН='не заполнено'; ЧГ=0")) Тогда
						
						СтрДокумент.ПодписанКонтрагентом = Истина;
						СтрДокумент.СертификатКонтрагента = ТекущийСертификат["title"];
						
					ИначеЕсли Найти(Подписант, Формат(ВладелецФормы.UserID, "ЧН='не заполнено'; ЧГ=0")) Тогда
						
						СтрДокумент.СертификатНаш = ТекущийСертификат["title"];
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСправочники(Результат1С, СтруктураСправочников) Экспорт
	
	Если СтруктураСправочников.Свойство("ОПФ") Тогда
		ОПФ = СтруктураСправочников.ОПФ;
		ОПФ.Очистить();
		Если Результат1С.Получить("ownership_forms") <> Неопределено Тогда
			Для Каждого Элемент Из Результат1С["ownership_forms"] Цикл
				СтрОПФ = ОПФ.Добавить();
				СтрОПФ.id = Элемент["id"];
				СтрОПФ.Наименование = Элемент["name"];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураСправочников.Свойство("Города") Тогда
		Города = СтруктураСправочников.Города;
		Города.Очистить();
		Если Результат1С.Получить("cities") <> Неопределено Тогда
			Для Каждого Элемент Из Результат1С["cities"] Цикл
				СтрГород = Города.Добавить();
				СтрГород["id"] = Элемент.Ключ;
				СтрГород.Наименование = Элемент.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураСправочников.Свойство("ТипыДокументов") Тогда
		ТипыДокументов = СтруктураСправочников.ТипыДокументов;
		ТипыДокументов.Очистить();
		
		document_types = Результат1С.Получить("document_types");
		Если document_types <> Неопределено Тогда
			Для Счетчик = 0 По document_types.Количество()-1 Цикл
				Элемент = document_types[Счетчик];
				СтрТип = ТипыДокументов.Добавить();
				СтрТип.id = Счетчик;
				СтрТип.Наименование = Элемент;
			КонецЦикла;
		КонецЕсли;
		
		ТипыДокументов.Сортировать("Наименование");
		
	КонецЕсли;
	
	Если СтруктураСправочников.Свойство("ТипыТранспорта") Тогда
		ТипыТранспорта = СтруктураСправочников.ТипыТранспорта;
		ТипыТранспорта.Очистить();
		Если Результат1С.Получить("") <> Неопределено Тогда
			Для Каждого Элемент Из Результат1С["truck_types"] Цикл
				СтрТип = ТипыТранспорта.Добавить();
				СтрТип.Наименование = Элемент;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Инициализация()
	
	JSON = ВладелецФормы.JSON;
	API = ВладелецФормы.API;
	
	Объект = ВладелецФормы.Объект;
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьКонтрагента(КонтрагентID) Экспорт
	
	КонтрагентСсылка = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	
	Если КонтрагентID > 0 Тогда
		КонтрагентСтруктура = API.Account(КонтрагентId);
		
		Если КонтрагентСтруктура = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		КонтрагентСсылка = СоздатьКонтрагентаСервер(КонтрагентСтруктура, КонтрагентID);
	КонецЕсли;
	
	Возврат КонтрагентСсылка;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьРазборЭлектронныхДокументов(Doc_id, РеквизитыДокумента) Экспорт
	
	Перем АдресФайла;
	
	Если НЕ РеквизитыДокумента.Свойство("СтруктураРазбора") Тогда
		РеквизитыДокумента.Вставить("СтруктураРазбора");
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Если НРег(РеквизитыДокумента.Расширение) <> ".xml" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПутьКФайлу = API.GetAttachment(Doc_id, РеквизитыДокумента.ФайлID, РеквизитыДокумента.ФайлИмя);
	
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектФайл = Новый Файл(ПутьКФайлу);
	Если НЕ ОбъектФайл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	Попытка
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если ПоместитьФайл(АдресФайла, ПутьКФайлу,, Ложь) Тогда
		Возврат ВыполнитьРазборЭлектронныхДокументовНаСервере(РеквизитыДокумента, АдресФайла, ОбъектФайл.Имя);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СформироватьКонфигурационныйФайл(СтруктураПараметров, ИмяФайла) Экспорт
	
	Текст = JSON.Значение1С_JSON(СтруктураПараметров);
	
	//ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.UTF8);
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла, "CESU-8");
	ЗаписьТекста.Записать(Текст);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция ПечатьДокумента(ДокументСсылка, ID = Неопределено) Экспорт
	
	Попытка
		//Объект = ДокументСсылка.ПолучитьОбъект();
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ТабДокумент = ПечатьДокументов.ПечатьАктаОбОказанииУслуг(ДокументСсылка);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда	
		
		ТабДокумент = ПечатьДокументов.ПечатьСФ(ДокументСсылка);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда	
		
		ТабДокумент = ПечатьДокументов.ПечатьСчетаЗаказа(ДокументСсылка);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.новаЗаявкаЭкспедирования") Тогда
		
		ТабДокумент = ПечатьДокументов.ПечатьЗаявкиЭкспедирования(ДокументСсылка);
		
	КонецЕсли; 
	
	Если ID = Неопределено Тогда
		ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
	Иначе
		ИмяФайла = КаталогВременныхФайлов() + ID + ".pdf";
	КонецЕсли;
	
	ТабДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	Возврат ИмяФайла;
	
КонецФункции

&НаКлиенте
// Получает первичную информацию об ошибке
// Параметры:
//	ИнформацияОбОшибке - информация об ошибке
// Возвращает:
//	Информацию об ошибке, которая является первопричиной возникновения переданной ИнформацияОбОшибке
//  Если ошибка первичная, то возвращается сама ошибка, переданная в качестве параметра
Функция ПолучитьПричинуОшибки(ИнформацияОбОшибке) Экспорт
	ПричинаОшибки = ИнформацияОбОшибке.Причина;
	Если ПричинаОшибки = НеОпределено Тогда
		Возврат ИнформацияОбОшибке;
	КонецЕсли;
	Пока ПричинаОшибки.Причина <> НеОпределено Цикл
		ПричинаОшибки = ПричинаОшибки.Причина;
	КонецЦикла;
	Возврат ПричинаОшибки;
	
КонецФункции


// Подключаемый модуль(форма)
&НаКлиенте
Перем API;

&НаКлиенте
Перем Служебный;

&НаКлиенте
Перем СохрЛогин;

&НаКлиенте
Перем СохрПароль;

&НаКлиенте
Перем СохрТокен;

&НаКлиенте
Перем СохрАдресСервера;

&НаКлиенте
Перем СохрДокументовНаСтранице;

&НаКлиенте
Перем НеобходимоОбновитьВидимостьПапок;

#Область СервернаяЛогика

&НаСервереБезКонтекста
Функция ЗначениеВСтрокуВнутрНаСервере(Значение)
	
	Возврат ЗначениеВСтрокуВнутр(Значение)
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеИзСтрокиВнутрНаСервере(Значение)
	
	Возврат ЗначениеИзСтрокиВнутр(Значение)
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПутьКФункцииДанныеЗаявкиНачалоВыбораНаСервере()
	
	
	
КонецПроцедуры

#КонецОбласти

#Область КлиентскаяЛогика

&НаКлиенте 
Процедура УправлениеВидимостьюДоступностьюЭлементов()
	
	Элементы.КаталогАгента.Видимость = ОтправлятьЧерезАгента;
	Элементы.ПутьКФункцииДанныеЗаявки.Видимость = ВладелецФормы.Объект.ЭтоСтороннееРешение;
	Элементы.ПутьКФункцииФормированияЗаявки.Видимость = ВладелецФормы.Объект.ЭтоСтороннееРешение;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСертификатыАТИДоков()
	
	Сертификаты.Очистить();
	Для каждого Стр Из ВладелецФормы.Сертификаты Цикл
		ЗаполнитьЗначенияСвойств(Сертификаты.Добавить(), Стр);
	КонецЦикла;
	
	МассивСтрок = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", АктивныйСертификат));
	Если МассивСтрок.Количество() > 0 Тогда
		ТекСтрока = МассивСтрок[0];
		ТекСтрока.Пометка = Истина;
	КонецЕсли;
	
	Возврат;
	
	СписокСертификатов = API.Certificates_Get();
	Сертификаты.Очистить();
	Если ЗначениеЗаполнено(СписокСертификатов) Тогда
		Для Каждого СертификатЭлемент Из СписокСертификатов Цикл
			СтрСертифкат = Сертификаты.Добавить();
			СтрСертифкат.Отпечаток = СертификатЭлемент["id"];
			СтрСертифкат.Наименование = СертификатЭлемент["title"];
			СтрСертифкат.ДействителенС = Служебный.СтрокаВДату(СертификатЭлемент["valid_from"]);
			СтрСертифкат.ДействителенПо = Служебный.СтрокаВДату(СертификатЭлемент["valid_until"]);
			СтрСертифкат.Свойства = ЗначениеВСтрокуВнутрНаСервере(СертификатЭлемент["components"]);
			СтрСертифкат.СтатусКабинетаВДиадок = СертификатЭлемент["integrator"]["status"];
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция РедактироватьЭкстраСертификата(Результат, ДопПараметры) Экспорт
	
	Перем Этап, ВыбраннаяСтрока, ОтправитьВФНС, ОбновитьЭкстра;
	
	ДопПараметры.Свойство("Этап", Этап);
	ДопПараметры.Свойство("ВыбраннаяСтрока", ВыбраннаяСтрока);
	
	Если Этап = Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("Отпечаток, Наименование, Период, РеквизитыСертификата",
		ВыбраннаяСтрока.Отпечаток,
		ВыбраннаяСтрока.Наименование,
		"Период действия: "+ПредставлениеПериода(НачалоДня(ВыбраннаяСтрока.ДействителенС), КонецДня(ВыбраннаяСтрока.ДействителенПо), "ФП=Истина"),
		ВыбраннаяСтрока.Свойства);
		
		СвойстваСертификата = ЗначениеИзСтрокиВнутрНаСервере(ВыбраннаяСтрока.Свойства);
		Если ТипЗнч(СвойстваСертификата) = Тип("Соответствие") Тогда
			ПараметрыФормы.Вставить("ИНН", СвойстваСертификата.Получить("INN"));
			ПараметрыФормы.Вставить("СНИЛС", СвойстваСертификата.Получить("SNILS"));
			ПараметрыФормы.Вставить("КодРегиона", СвойстваСертификата.Получить("region_code"));
			ПараметрыФормы.Вставить("КодИФНС", СвойстваСертификата.Получить("ifns"));
			ПараметрыФормы.Вставить("ОГРН", СвойстваСертификата.Получить("ogrn"));
			ПараметрыФормы.Вставить("Комментарий", СвойстваСертификата.Получить("Comment"));
			ПараметрыФормы.Вставить("Адрес", СвойстваСертификата.Получить("street"));
		КонецЕсли;
		
		ДопПараметры.Вставить("Comment");
		ДопПараметры.Вставить("ogrn");
		ДопПараметры.Вставить("ifns");
		ДопПараметры.Вставить("region_code");
		ДопПараметры.Вставить("Отпечаток", ВыбраннаяСтрока.Отпечаток);
		
		ДопПараметры.Вставить("Этап", "Завершение");
		
		ОткрытьФорму(ПутьКФормам+"ФормаСертификата", ПараметрыФормы, ЭтаФорма,,,,
			Новый ОписаниеОповещения("РедактироватьЭкстраСертификата", ЭтаФорма, ДопПараметры));
		
	ИначеЕсли Этап = "Завершение" Тогда	
		
		Если Результат = КодВозвратаДиалога.ОК Тогда
			
			ВыбраннаяСтрока.extra = ДопПараметры;
			ВыбраннаяСтрока.РеквизитыЗаполнены = НЕ ПустаяСтрока(ДопПараметры.ogrn)
				И НЕ ПустаяСтрока(ДопПараметры.ifns)
				И НЕ ПустаяСтрока(ДопПараметры.region_code);
				
			ДопПараметры.Свойство("ОтправитьВФНС", ОтправитьВФНС);
				
			Если ОтправитьВФНС = Истина И ВыбраннаяСтрока.РеквизитыЗаполнены = Истина Тогда
				
				Результат1С = API.IFNS(ВыбраннаяСтрока.Отпечаток, ВыбраннаяСтрока.token, ДопПараметры);
				Если Результат1С <> Неопределено Тогда
					Сообщить("Заявка в ФНС отправлена");
					ВладелецФормы.ОбновитьСертификаты();
				КонецЕсли;
				
			КонецЕсли;
			
			ДопПараметры.Свойство("ОбновитьЭкстра", ОбновитьЭкстра);
			
			Если ОбновитьЭкстра Тогда
				
				Возврат Неопределено;
				
				API.Certificate_MetaData_Set(ВыбраннаяСтрока.Отпечаток, СвойстваСертификата);
				
				ВладелецФормы.ОбновитьСертификаты();
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийФормыСервер

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,,
		"ЗакрыватьПриВыборе,
		|КлючНазначенияИспользования,
		|ТолькоПросмотр,
		|КонтактныеЛица");
		
	Таблица = ЗначениеИзСтрокиВнутр(Параметры.КонтактныеЛица);
	Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
		КонтактныеЛица.Загрузить(Таблица);
	КонецЕсли;
	
	Для Каждого Модуль Из Метаданные.ОбщиеМодули Цикл
		Элементы.ПутьКФункцииДанныеЗаявки.СписокВыбора.Добавить(Модуль.Имя+".");
	КонецЦикла;
	
	Для Каждого Модуль Из Метаданные.ОбщиеМодули Цикл
		Элементы.ПутьКФункцииФормированияЗаявки.СписокВыбора.Добавить(Модуль.Имя+".");
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Список = Настройки["СписокАдресов"];
	Если Список.НайтиПоЗначению(АдресСервера) = Неопределено Тогда
		Список.Добавить(АдресСервера);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Список = Настройки["СписокАдресов"];
	Если Список = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для каждого Элемент Из Список Цикл
		Элементы.АдресСервера.СписокВыбора.Добавить(Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормыКлиент

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	API = ВладелецФормы.API;
	Служебный = ВладелецФормы.Служебный;

	СохрЛогин = Логин;
	СохрПароль = Пароль;
	СохрАдресСервера = АдресСервера;
	СохрДокументовНаСтранице = ДокументовНаСтранице;
	
	// DEBUG
	СохрТокен = token;
	
	ЗаполнитьСертификатыАТИДоков();
	
	УправлениеВидимостьюДоступностьюЭлементов();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ЛоготипНажатие(Элемент)
	
	ЗапуститьПриложение("http://"+АдресСервера+"/api/session/"+token);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаFAQНажатие(Элемент)
	
	ЗапуститьПриложение("https://d.ati.su/about/faq/");
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогАгентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = КаталогАгента;
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.Заголовок = "Выберите каталог ""Агента"" ATI-Docs";
	Если ДиалогВыбора.Выбрать() Тогда
		КаталогАгента = ДиалогВыбора.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СертификатыПометка" ИЛИ Поле.Имя = "СертификатыСертификатСсылка" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Сертификаты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	РедактироватьЭкстраСертификата(, Новый Структура("ВыбраннаяСтрока, ОбновитьЭкстра", ДанныеСтроки, Истина));
		
КонецПроцедуры

&НаКлиенте
Процедура АдресСервераПриИзменении(Элемент)
	
	Если СписокАдресов.НайтиПоЗначению(АдресСервера) = Неопределено Тогда
		СписокАдресов.Добавить(АдресСервера);
		Элементы.АдресСервера.СписокВыбора.Добавить(АдресСервера);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СертификатыПометкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Сертификаты.ТекущаяСтрока;
	ТекДанные = Элементы.Сертификаты.ТекущиеДанные;
	
	АктивныйСертификат = ТекДанные.Отпечаток;
	
	Для каждого Стр Из Сертификаты Цикл
		
		Если Стр.ПолучитьИдентификатор() = ТекСтрока Тогда
			Стр.Пометка = Истина;
		Иначе
			Стр.Пометка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФункцииДанныеЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранноеЗначение = ВыбранноеЗначение + "ПолучитьДанныеЗаявкиИзДокумента(СтруктураЗаявки, ДокументСсылка)";
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФункцииФормированияЗаявкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ВыбранноеЗначение = ВыбранноеЗначение + "СформироватьДокументЗаявка(ДанныеЗаявки)";
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтсылкаВКабинетНажатие(Элемент)
	
	ЗапуститьПриложение("http://"+АдресСервера+"/cabinet/");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура КомандаОК(Команда)

	Перем СтруктураВозврата;
	
	Если Модифицированность И (АдресСервера <> СохрАдресСервера
		ИЛИ Логин <> СохрЛогин
		ИЛИ token <> СохрТокен
		ИЛИ Пароль <> СохрПароль) Тогда
		
		ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("НеобходимоПерелогиниться", Истина);
		
	КонецЕсли;
	
	Если Модифицированность И ДокументовНаСтранице <> СохрДокументовНаСтранице Тогда
		
		ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("НеобходимоОбновитьСписок", Истина);
		
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("НеобходимоОбновитьВидимостьПапок", НеобходимоОбновитьВидимостьПапок);
	
	Если Модифицированность Тогда
		
		СтруктураВозврата = ВладелецФормы.ПолучитьСтруктуруВозврата();
		
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ЭтаФорма);	
		
		ВладелецФормы.Сертификаты.Очистить();
		Для каждого Стр Из Сертификаты Цикл
			ЗаполнитьЗначенияСвойств(ВладелецФормы.Сертификаты.Добавить(), Стр);
		КонецЦикла;

	КонецЕсли;
		
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодключиться(Команда)
	
	Если Истина ИЛИ Модифицированность И (АдресСервера <> СохрАдресСервера
		ИЛИ Логин <> СохрЛогин
		ИЛИ Пароль <> СохрПароль) Тогда
		
		ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("НеобходимоПерелогиниться", Истина);
		
	КонецЕсли;
	
	СтруктураВозврата = ВладелецФормы.ПолучитьСтруктуруВозврата();
		
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, ЭтаФорма);	
		
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьЧерезАгентаПриИзменении(Элемент)
	
	УправлениеВидимостьюДоступностьюЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьВкладкиДокументовПриИзменении(Элемент)
	
	 НеобходимоОбновитьВидимостьПапок = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИмпортироватьСертификат(Команда)
	
	ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ФормаВыбора",, ЭтаФорма,,,,
		Новый ОписаниеОповещения("КомандаИмпортироватьСертификатПослеВыбора", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИмпортироватьСертификатПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") Тогда
		
		ОтветСервера = API.Certificate_Create(Результат);
		Если ОтветСервера = Ложь Тогда
			Возврат;
		КонецЕсли;
		
		ВладелецФормы.ОбновитьСертификаты();
		ЗаполнитьСертификатыАТИДоков();
		
		ОтпечатокСтр = СтрЗаменить(Base64Значение(ПолучитьЗначениеРеквизита(Результат, "Отпечаток")), " ", "");
		
		Массив = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", ОтпечатокСтр));
		
		Если Массив.Количество() > 0 Тогда
			Массив[0].СертификатСсылка = Результат;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьЗаявкуВФНС(Команда)
	
	ТекДанные = Элементы.Сертификаты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		Если ТекДанные.РеквизитыЗаполнены = Истина Тогда
			
			Попытка
				Результат1С = API.IFNS(ТекДанные.Отпечаток, ТекДанные.token, ЗначениеИзСтрокиВнутрНаСервере(ТекДанные.extra));
			Исключение
				Возврат;
			КонецПопытки;
			
			Если Результат1С <> Неопределено Тогда
				Сообщить("Заявка в ФНС отправлена");
				ВладелецФормы.ОбновитьСертификаты();
			КонецЕсли;
			
		Иначе
			
			ОчиститьСообщения();
			Сообщить("Для отправки заявки в ФНС заполните эти реквизиты:
			| - код ИФНС,
			| - ОГРН,
			| - код региона");
			
			РедактироватьЭкстраСертификата(, Новый Структура("ВыбраннаяСтрока, ОтправитьВФНС", ТекДанные, Истина));
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСертификаты(Команда)

	ВладелецФормы.ОбновитьСертификаты();
	
	ЗаполнитьСертификатыАТИДоков();
	  
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Перем ТокеныФорматирования;

&НаКлиенте
Перем ТипСтроки;

&НаКлиенте
Перем СхемаПодстановок;

&НаКлиенте
Перем Кэш;

//Процедуры и функции работы с JSON

&НаКлиенте
Функция Значение1С_JSON(Значение1С) Экспорт
	
	Результат = "";
	
	// Инициализация переменных
	Если ТокеныФорматирования = Неопределено Тогда
		ИнициализацияПеременных();
	КонецЕсли;

	Если ЭтоВерсия8_3_6 Тогда
		
		ЗаписьJSON = Вычислить("Новый ЗаписьJSON");
		ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(,,, ЭкранированиеСимволовJSON.СимволыВнеASCII));
		Выполнить("ЗаписатьJSON(ЗаписьJSON, Значение1С);");
		
		Результат = ЗаписьJSON.Закрыть();
		
	Иначе
		
		Если ТипЗнч(Значение1С)=Тип("Булево") Тогда
			Результат = Результат + Формат(Значение1С, "БЛ=false; БИ=true");
		ИначеЕсли ТипЗнч(Значение1С)=Тип("Строка") Тогда
			Результат = Результат + """" + Строка_JSON(Значение1С) + """";
		ИначеЕсли ТипЗнч(Значение1С)=Тип("Дата") Тогда
			Результат = Результат + """" + Формат(Значение1С, "ДФ=yyyy-MM-dd") + """";
		ИначеЕсли ТипЗнч(Значение1С)=Тип("Массив") Тогда
			Результат = Результат + Массив_JSON(Значение1С);
		ИначеЕсли ТипЗнч(Значение1С)=Тип("Структура") Тогда
			Результат = Результат + Структура_JSON(Значение1С);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция Структура_JSON(Структура)
	Результат = "{";
	Если Структура.Количество()>0 Тогда
		Для Каждого Поле Из Структура Цикл
			Результат = Результат + """"+Поле.Ключ+""":"+Значение1С_JSON(Поле.Значение)+", ";
		КонецЦикла;
		Результат = Лев(Результат, СтрДлина(Результат)-2); //отрезаем последний разделитель
	КонецЕсли;
	Результат = Результат + "}";
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция Массив_JSON(Массив)
	Результат = "[";
	Если Массив.Количество()>0 Тогда
		Для Каждого ЭлементМассива Из Массив Цикл
			Результат = Результат + Значение1С_JSON(ЭлементМассива) +", "
		КонецЦикла;
		Результат = Лев(Результат, СтрДлина(Результат)-2);
	КонецЕсли;
	Результат = Результат + "]";
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ЧислоВШестнадцатеричномПредставлении(Знач Число, Знач КоличествоБайт = 32)
	Результат = "";
	СтрокаТокенов = "0123456789ABCDEF";
	Для НомерБайта = 1 По КоличествоБайт Цикл
		ПредставлениеБайта = "";
		Для Счетчик = 1 По 2 Цикл
			ПредставлениеБайта = Сред(СтрокаТокенов, Число % 16 + 1, 1) + ПредставлениеБайта;
			Число = Цел(Число / 16);
		КонецЦикла;
		// порядок байтов: начиная с младшего
		Результат = Результат + ПредставлениеБайта;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция Строка_JSON(ИсходнаяСтрока)
	
	Результат = "";
	Для н = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		Токен = Сред(ИсходнаяСтрока, Н, 1);
		
		КодСимвола = КодСимвола(Токен);
		Если КодСимвола>127 Тогда
			Результат = Результат + "\u04" + ЧислоВШестнадцатеричномПредставлении(КодСимвола, 1);
		Иначе
			
			Токен = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Токен, 
			"\",			"\\"),			// x5c
			"/",			"\/"),			// x2f
			Символ(008),	"\b"),			// x08
			Символы.Таб,	"\t"), 			// x09
			Символы.ПС,		"\n"),			// x0a
			Символы.ПФ,		"\f"),			// x0c
			Символы.ВК,		"\r"),			// x0d
			"""",			"\""");			// x22
			
			
			Токен = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Токен, 
			Символ(00),		"\u0000"),
			Символ(01),		"\u0001"),
			Символ(02),		"\u0002"),
			Символ(03),		"\u0003"),
			Символ(04),		"\u0004"),
			Символ(05),		"\u0005"),
			Символ(06),		"\u0006"),
			Символ(07),		"\u0007"),
			Символ(11),		"\u000b"),
			Символ(14),		"\u000e"),
			Символ(15),		"\u000f"),
			Символ(16),		"\u0010"),
			Символ(17),		"\u0011"),
			Символ(18),		"\u0012"),
			Символ(19),		"\u0013"),
			Символ(20),		"\u0014"),
			Символ(21),		"\u0015"),
			Символ(22),		"\u0016"),
			Символ(23),		"\u0017"),
			Символ(24),		"\u0018"),
			Символ(25),		"\u0019"),
			Символ(26),		"\u001a"),
			Символ(27),		"\u001b"),
			Символ(28),		"\u001c"),
			Символ(29),		"\u001d"),
			Символ(30),		"\u001e"),
			Символ(31),		"\u001f");
			
			Результат = Результат + Токен;
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции чтения JSON

&НаКлиенте
Функция РазобратьJSON(Текст) Экспорт
	
	Перем Результат1С;
	
	// Инициализация переменных
	Если ТокеныФорматирования = Неопределено Тогда
		ИнициализацияПеременных();
	КонецЕсли;
	
	Результат1С = Кэш.Получить(Текст);
		
	Если Результат1С <> Неопределено Тогда
		Возврат Результат1С;
	КонецЕсли;
	
	Если ЭтоВерсия8_3_6 Тогда
		
		ЧтениеJSON = Вычислить("Новый ЧтениеJSON");
		ЧтениеJSON.УстановитьСтроку(Текст);
		
		Результат1С = Вычислить("ПрочитатьJSON(ЧтениеJSON, Истина)");
		
	Иначе
		
		Индекс = 1;
		Длина = СтрДлина(Текст);
		ПропуститьФорматирование(Текст, Индекс, Длина);
		
		Результат1С = ПрочитатьТекстJSON(Текст, Индекс, Длина);
		
	КонецЕсли;
	
	Кэш.Вставить(Текст, Результат1С);
		
	Возврат Результат1С;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьХеш(Текст)

	ОбъектХеш = Новый ХешированиеДанных(ХешФункция.MD5);
	ОбъектХеш.Добавить(Текст);
	Хеш = ОбъектХеш.ХешСумма;
	
	Возврат Хеш;

КонецФункции


Процедура ЗначениеВСтрокуВнутрСервер(Значение)
	
	ВнутрЗначение = ЗначениеВСтрокуВнутр(Значение);
	
КонецПроцедуры


&НаКлиенте
Функция ПропуститьФорматирование(Текст, Индекс, Длина)
	
	// Пропуск форматирования.
	Пока (Индекс <= Длина) И Найти(ТокеныФорматирования, Сред(Текст, Индекс, 1)) Цикл Индекс = Индекс + 1; КонецЦикла;
	// Пробел, \r, \n, \t .
	
КонецФункции// ПропуститьФорматирование()

&НаКлиенте
Функция ПрочитатьТекстJSON(Текст, Индекс, Длина)
	
	Токен = Сред(Текст, Индекс, 1);
	
	Если (Токен = """") Или (Токен = "'") Или (Токен = "\") Тогда        																	// " , '
		
		// Строка.
		Подстрока = Сред(Текст, Индекс + 1);
		Начало = Индекс;
		Пока Истина Цикл
			Позиция = Найти(Подстрока, Токен);
			
			Если (Позиция > 0) Тогда
				Индекс = Индекс + Позиция;
				Откат = Позиция - 1;
				Маскировка = Ложь;
				
				Пока (Сред(Подстрока, Откат, 1) = "\") И Откат Цикл
					Маскировка = Не Маскировка;
					Откат = Откат - 1;
				КонецЦикла;
				
				Если Маскировка Тогда
					Подстрока = Сред(Подстрока, Позиция + 1);
				Иначе
					Прервать;
				КонецЕсли;
			Иначе
				ВызватьИсключение ИсключениеНеожиданноеОкончаниеПакетаДанных();
			КонецЕсли;
			
		КонецЦикла;
		
		// Строка.
		Результат = ПрочитатьСтрокуJSON(Сред(Текст, Начало + 1, Индекс - Начало - 1), Начало, (Токен = "'"));
		
		Если ПрочитатьОпределитьДатуJSON(Результат) Тогда
			// Дата.
			Результат = ПрочитатьJSONДату(Результат, Начало);
		КонецЕсли;
		
		// Корректировка индекса.
		Индекс = Индекс + 1;
		
	ИначеЕсли (Токен = "[") Тогда																							// [
		
		// Массив.
		Результат = Новый Массив;
		
		Индекс = Индекс + 1;
		
		ПропуститьФорматирование(Текст, Индекс, Длина);
		
		Если (Индекс > Длина) Тогда
			ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина);
		КонецЕсли;
		
		Токен = Сред(Текст, Индекс, 1);
		Если (Токен = "]") Тогда														// ] 
			
			// Пустой массив.
			Индекс = Индекс + 1;
			
		Иначе
			
			Пока (Индекс <= Длина) Цикл
				
				// Текст.
				Результат.Добавить(ПрочитатьТекстJSON(Текст, Индекс, Длина));
				
				Токен = Сред(Текст, Индекс, 1);
				Если (Токен = "]") Тогда																					// ]
					// Окончание массива.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение массива.
					Если (Токен = ",") Тогда																				// ,
						Индекс = Индекс + 1;
						ПропуститьФорматирование(Текст, Индекс, Длина); 
						Если (Индекс >= Длина) Тогда
							ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина);
						КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли (Токен = "{") Тогда																							// {
		
		// Объект.
		Индекс = Индекс + 1; 
		ПропуститьФорматирование(Текст, Индекс, Длина); 
		
		Если (Индекс > Длина) Тогда
			ВызватьИсключение ИсключениеНеожиданноеОкончаниеМассива(Длина);
		КонецЕсли;
		
		Токен = Сред(Текст, Индекс, 1);
		Если (Токен = "}") Тогда														// } 
			
			// Пустой объект.
			Индекс = Индекс + 1;
			
			// Структура или соответствие.
			Результат = Новый Структура; 
			
		Иначе
			
			Результат = Новый Соответствие;
			
			Пока (Индекс <= Длина) Цикл
				
				// Ключ.
				Начало = Индекс;
				КлючЭлемента = ПрочитатьТекстJSON(Текст, Индекс, Длина);
				Если (Не ТипЗнч(КлючЭлемента) = ТипСтроки) Тогда
					ВызватьИсключение ИсключениеНедопустимыйТипКлюча(Начало, КлючЭлемента);
				КонецЕсли;
				
				Токен = Сред(Текст, Индекс, 1);
				Если (Токен = ":") Тогда																					// :
					Индекс = Индекс + 1; 
					ПропуститьФорматирование(Текст, Индекс, Длина);
					Если (Индекс >= Длина) Тогда
						ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъекта(Длина);
					КонецЕсли;
				Иначе
					ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ":");
				КонецЕсли;
				
				// Текст.
				ТекстЭлемента = ПрочитатьТекстJSON(Текст, Индекс, Длина);
				
				// Коллекция.
				Попытка
					Результат.Вставить(КлючЭлемента, ТекстЭлемента);
				Исключение
					//Результат.Вставить("Поле"+СтрЗаменить(КлючЭлемента, ".",""), ТекстЭлемента);
				КонецПопытки;
				
				Токен = Сред(Текст, Индекс, 1);
				Если (Токен = "}") Тогда																					// }
					// Окончание объекта.
					Индекс = Индекс + 1; Прервать;
				Иначе
					// Продолжение объекта.
					Если (Токен = ",") Тогда																				// ,
						Индекс = Индекс + 1;
						ПропуститьФорматирование(Текст, Индекс, Длина);
						
						Если (Индекс >= Длина) Тогда
							ВызватьИсключение ИсключениеНеожиданноеОкончаниеОбъекта(Длина);
						КонецЕсли;
					Иначе
						ВызватьИсключение ИсключениеНедопустимыйСимвол(Индекс, ",");
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			//РезультатСтруктура = Новый Структура; 
			//Для Каждого Элемент Из Результат Цикл
			//	Попытка
			//	РезультатСтруктура.Вставить(Элемент.Ключ, Элемент.Значение);
			//	Исключение
			//		РезультатСтруктура = Результат;
			//		Прервать;
			//	КонецПопытки;
			//КонецЦикла;
			//Результат = РезультатСтруктура;
			
		КонецЕсли;
		
	Иначе
		
		// Остальные примитивные типы.
		Если (Токен = "n") Тогда
			
			// Null.
			Если (Сред(Текст, Индекс, 4) = "null") Тогда
				Индекс = Индекс + 4;
				Результат = Null;
			Иначе
				ВызватьИсключение ИсключениеНекорректныйТипNull(Индекс);
			КонецЕсли;
			
		ИначеЕсли (Токен = "t") Тогда
			
			// Истина.
			Если (Сред(Текст, Индекс, 4) = "true") Тогда
				Индекс = Индекс + 4;
				Результат = Истина;
			Иначе
				ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс);
			КонецЕсли;
			
		ИначеЕсли (Токен = "f") Тогда
			
			// Ложь.
			Если (Сред(Текст, Индекс, 5) = "false") Тогда
				Индекс = Индекс + 5;
				Результат = Ложь;
			Иначе
				ВызватьИсключение ИсключениеНекорректныйТипБулево(Индекс);
			КонецЕсли;
			
		ИначеЕсли (Токен = "u") Тогда
			
			// Неопределено.
			Если (Сред(Текст, Индекс, 9) = "undefined") Тогда
				Индекс = Индекс + 9;
				Результат = Неопределено;
			Иначе
				ВызватьИсключение ИсключениеНекорректныйТипНеопределено(Индекс);
			КонецЕсли;
			
		Иначе
			
			// Число.
			Начало = Индекс;
			Пока Найти("-+0123456789.", Токен) И (Индекс <= Длина) Цикл
				Индекс = Индекс + 1;
				Токен = Сред(Текст, Индекс, 1);
			КонецЦикла;
			
			// Преобразование числа.
			Попытка
				Результат = Число(Сред(Текст, Начало, Индекс - Начало));
			Исключение
				ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Текст, Начало, Индекс - Начало)); 
			КонецПопытки;
			
			// Экспоненциальная часть.
			Если (Токен = "E") Или (Токен = "e") Тогда
				
				// Степень.
				Индекс = Индекс + 1;
				Позиция = Индекс;
				Токен = Сред(Текст, Индекс, 1);
				Пока Найти("-+0123456789", Токен) И (Индекс <= Длина) Цикл
					Индекс = Индекс + 1; Токен = Сред(Текст, Индекс, 1);
				КонецЦикла;
				
				// Преобразование степени.
				Попытка
					Степень = Число(Сред(Текст, Позиция, Индекс - Позиция));
				Исключение
					ВызватьИсключение ИсключениеНекорректныйФорматЧисла(Начало, Сред(Текст, Начало, Индекс - Начало)); 
				КонецПопытки;
				
				// Возвидение числа в степень.
				Результат = Результат * Pow(10, Степень);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПропуститьФорматирование(Текст, Индекс, Длина);
	
	Возврат Результат;
	
КонецФункции

// Разбор типов JSON

&НаКлиенте
Функция ПрочитатьОпределитьДатуJSON(Значение)
	
	// Проверка.
	Если (СтрДлина(Значение) = 20) Тогда
		Если (Сред(Значение, 05, 1) = "-") И				// -
			(Сред(Значение, 08, 1) = "-") И				// -
			(Сред(Значение, 11, 1) = "T") И				// T
			(Сред(Значение, 14, 1) = ":") И				// :
			(Сред(Значение, 17, 1) = ":") И				// :
			(Сред(Значение, 20, 1) = "Z") Тогда			// Z
			// Год. 
			Если Найти("0123456789", Сред(Значение, 01, 1)) И
				Найти("0123456789", Сред(Значение, 02, 1)) И
				Найти("0123456789", Сред(Значение, 03, 1)) И
				Найти("0123456789", Сред(Значение, 04, 1)) И
				// Месяц.
				Найти("0123456789", Сред(Значение, 06, 1)) И
				Найти("0123456789", Сред(Значение, 07, 1)) И
				// День.
				Найти("0123456789", Сред(Значение, 09, 1)) И
				Найти("0123456789", Сред(Значение, 10, 1)) И
				// Час.
				Найти("0123456789", Сред(Значение, 12, 1)) И
				Найти("0123456789", Сред(Значение, 13, 1)) И
				// Минута.
				Найти("0123456789", Сред(Значение, 15, 1)) И
				Найти("0123456789", Сред(Значение, 16, 1)) И
				// Секунда.
				Найти("0123456789", Сред(Значение, 18, 1)) И
				Найти("0123456789", Сред(Значение, 19, 1)) Тогда
				Возврат Истина; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьДату()

&НаКлиенте
Функция ПрочитатьОпределитьИдентификаторJSON(Значение)
	
	// Проверка.
	Если (СтрДлина(Значение) = 36) Тогда
		Если (Сред(Значение, 09, 1) = "-") И					// -
			(Сред(Значение, 14, 1) = "-") И					// -
			(Сред(Значение, 19, 1) = "-") И					// -
			(Сред(Значение, 24, 1) = "-") Тогда				// -
			// Первая часть. 
			Для Индекс = 01 По 08 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Вторая часть. 
			Для Индекс = 10 По 13 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Третья часть. 
			Для Индекс = 15 По 18 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Четвертая часть. 
			Для Индекс = 20 По 23 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			// Пятая часть. 
			Для Индекс = 25 По 36 Цикл Если Не Найти("0123456789ABCDEFabcdef", Сред(Значение, Индекс, 1)) Тогда Возврат Ложь; КонецЕсли; КонецЦикла;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // jsonПрочитатьОпределитьИдентификатор()

&НаКлиенте
Функция ПрочитатьОпределитьВнутреннийТипJSON(Значение)
	
	// Поиск.
	Возврат (Лев(Значение, 1) = "¦") И (Сред(Значение, 5, 1) = "¦") И (Прав(Значение, 1) = "¦"); // ¦xxx¦ ... ¦
	
КонецФункции // jsonПрочитатьОпределитьВнутреннийТип()

&НаКлиенте
Функция ПрочитатьСтрокуJSON(Значение, Индекс, ОдинарнаяКавычка)
	
	// Последоавтельность перемаскировки.
	ПоследоавтельностьПеремаскировки = "\" + Символ(65535);
	
	// Демаскирование служебных символов.
	Результат = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(Значение, 
	"\\",			ПоследоавтельностьПеремаскировки),		// Перемаскирование последовательности.
	"\/",			"/"),           // x2f
	"\b",			Символ(008)),	// x08
	"\t",			Символы.Таб),   // x09
	"\n",			Символы.ПС),    // x0a
	"\f",			Символы.ПФ),    // x0c
	"\r",			Символы.ВК),    // x0d
	"\""",			"""");          // x22
	
	// Демаскирование Юникод символов.
	Позиция = Найти(Результат, "\u"); Пока Позиция Цикл
		СтаршийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 2, 2))]; МладшийБайт = СхемаПодстановок[НРег(Сред(Результат, Позиция + 4, 2))]; Если (СтаршийБайт = Неопределено) Или (МладшийБайт = Неопределено) Тогда ВызватьИсключение ИсключениеНекорректныйФорматСтроки(Индекс); КонецЕсли;
		Результат = СтрЗаменить(Результат, Сред(Результат, Позиция, 6), Символ(256 * СтаршийБайт + МладшийБайт)); Позиция = Найти(Результат, "\u");
	КонецЦикла;
	
	// Одинарная кавычка.
	Если ОдинарнаяКавычка Тогда Результат = СтрЗаменить(Результат, "\'", "'"); КонецЕсли;
	
	// Демаскирование перемаскированой последовательности.
	Возврат СтрЗаменить(Результат, ПоследоавтельностьПеремаскировки, "\");				
	
КонецФункции // jsonПрочитатьСтроку()

&НаКлиенте
Функция ПрочитатьJSONДату(Значение, Индекс)
	
	// Поиск.
	Попытка
		Возврат Дата(Лев(Значение, 4) + Сред(Значение, 06, 2) + Сред(Значение, 09, 2) + 
		Сред(Значение, 12, 2) + Сред(Значение, 15, 2) + Сред(Значение, 18, 2));
	Исключение
		ВызватьИсключение ИсключениеНекорректныйФорматДаты(Индекс, Значение);
	КонецПопытки;
	
КонецФункции // jsonПрочитатьДату()


// Тексты исключений

&НаКлиенте
Функция ИсключениеНедопустимыйСимвол(Индекс, Символ)
	
	Если (Символ = Неопределено) Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("JSON: Недопустимый символ в позиции %1.", Индекс);
		
	Иначе
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("JSON: Недопустимый символ в позиции %1, ожидается %2.", Индекс, Символ(034) + Символ + Символ(034));
		
	КонецЕсли;
	
КонецФункции // ИсключениеНедопустимыйСимвол()

&НаКлиенте
Функция ИсключениеНеожиданноеОкончаниеПакетаДанных()
	
	Возврат "JSON: Неожиданное окончание пакета данных.";
	
КонецФункции // ИсключениеНеожиданноеОкончаниеПакетаДанных()

&НаКлиенте
Функция ИсключениеНеожиданноеОкончаниеМассива(Индекс)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("JSON: Неожиданное окончание массива в позиции %1.", Индекс);
	
КонецФункции // ИсключениеНеожиданноеОкончаниеМассива()

&НаКлиенте
Функция ИсключениеНеожиданноеОкончаниеОбъекта(Индекс)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("JSON: Неожиданное окончание объекта в позиции %1.", Индекс);
	
КонецФункции // ИсключениеНеожиданноеОкончаниеОбъетка()

&НаКлиенте
Функция ИсключениеНедопустимыйТипКлюча(Индекс, Значение)
	
	Если (Индекс = Неопределено) Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("JSON: Недопустимый тип значения ключа %1.", ТипЗнч(Значение));
		
	Иначе
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("JSON: Недопустимый тип значения ключа %1 в позиции %2.", Индекс, Символ(034) + ТипЗнч(Значение) + Символ(034));
		
	КонецЕсли;
	
КонецФункции // ИсключениеНедопустимыйТипКлюча()

&НаКлиенте
Функция ИсключениеНекорректныйТипNull(Индекс)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("JSON: Некорректный тип Null в позиции %1.", Индекс);
	
КонецФункции // ИсключениеНекорректныйТипNull()

&НаКлиенте
Функция ИсключениеНекорректныйТипБулево(Индекс)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("JSON: Некорректный тип Булево в позиции %1.", Индекс);
	
КонецФункции // ИсключениеНекорректныйТипБулево()

&НаКлиенте
Функция ИсключениеНекорректныйТипНеопределено(Индекс)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("JSON: Некорректный тип Неопределено в позиции %1." ,Индекс);
	
КонецФункции // ИсключениеНекорректныйТипНеопределено()

&НаКлиенте
Функция ИсключениеНекорректныйФорматСтроки(Индекс)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("JSON: Некорректный формат строки в позиции %1.", Индекс);
	
КонецФункции // ИсключениеНекорректныйФорматСтроки()

&НаКлиенте
Функция ИсключениеНекорректныйФорматДаты(Индекс, Значение)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("JSON: Некорректный формат даты %1 в позиции %2.", Индекс, Символ(034) + Значение + Символ(034));
	
КонецФункции // ИсключениеНекорректныйФорматДаты()

&НаКлиенте
Функция ИсключениеНекорректныйФорматЧисла(Индекс, Значение)
	
	Если ПустаяСтрока(Значение) Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("JSON: Неверный формат данных в позиции %1.", Индекс);
		
	Иначе
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("JSON: Некорректный формат числа %1 в позиции %2.", Индекс, Символ(034) + Значение + Символ(034));
		
	КонецЕсли;
	
КонецФункции // ИсключениеНекорректныйФорматЧисла()


////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ 

&НаКлиенте
Процедура ИнициализацияПеременных()
	
	ТокеныФорматирования = " "+Символы.ВК+Символы.ПС+Символы.Таб;
	ТипСтроки = Тип("Строка");
	
	СхемаПодстановок = Новый Соответствие; 
	ШестнадцатиричнаяСистема = "0123456789abcdef"; ДесятичноеЧисло = 0;
	Для ВторойРазряд = 1 По 16 Цикл 
		Для ПервыйРазряд = 1 По 16 Цикл
			СхемаПодстановок.Вставить(Сред(ШестнадцатиричнаяСистема, ВторойРазряд, 1) + Сред(ШестнадцатиричнаяСистема, ПервыйРазряд, 1), ДесятичноеЧисло);
			ДесятичноеЧисло = ДесятичноеЧисло + 1; 
		КонецЦикла;
	КонецЦикла;
	
	Кэш = Новый Соответствие;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	МассивТекущейВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ".");
	
	Если Число(МассивТекущейВерсии[1]) >= 3 Тогда
		Если Число(МассивТекущейВерсии[2]) >= 6 Тогда
			ЭтоВерсия8_3_6 = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


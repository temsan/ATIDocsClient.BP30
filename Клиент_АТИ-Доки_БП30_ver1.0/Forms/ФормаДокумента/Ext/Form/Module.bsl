
// Подключаемые модули
&НаКлиенте
Перем JSON;

&НаКлиенте
Перем API;

&НаКлиенте
Перем Служебный;

&НаКлиенте
Перем ПечатьДокументов;

&НаКлиенте
Перем ИмяМодуляЭлДокументов;

&НаКлиенте
Перем ИмяМодуляУправлениеВзаиморасчетами;

&НаКлиенте
Перем ТипыТранспорта;

&НаКлиенте
Перем РасширенияКартинок;

&НаКлиенте
Перем СоответствиеСтатусов;

&НаКлиенте
Перем Меню;

&НаКлиенте
Перем КонстЗагрузитьФайл;

&НаКлиенте
Перем КонстЗагрузитьАрхив;

#Область СервернаяЛогика

&НаСервереБезКонтекста
Функция ПреобразоватьАлфавит(Знач ВхСтрока)
	
	Результат = "";
	Для Инд = 1 По СтрДлина(ВхСтрока) Цикл
		
		Символ = Сред(ВхСтрока, Инд, 1);
		КодСимвола = КодСимвола(Символ);
		Если (КодСимвола >= 65 И КодСимвола <= 122)
			ИЛИ (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Результат = Результат + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Получить_ATI_ID(Контрагент)
	
	Возврат РеквизитФормыВЗначение("Объект").Получить_ATI_ID(Контрагент);
	
КонецФункции

&НаСервере
Функция НайтиКонтрагентаНаСервере(КонтрагентId = Неопределено, КонтрагентИНН = Неопределено, КонтрагентНаименование = Неопределено)
	
	Возврат РеквизитФормыВЗначение("Объект").НайтиКонтрагента(КонтрагентId, КонтрагентИНН, КонтрагентНаименование);
	
КонецФункции

&НаСервере
Функция Сохранить_ATI_DOC_ID_Контрагента(Контрагент, КонтрагентID)
	
	РеквизитФормыВЗначение("Объект").Сохранить_КодATI_Контрагента(Контрагент, КонтрагентID);
	
КонецФункции

&НаСервере
Функция СформироватьПечатнуюФормуНаСервере(Знач ИмяВремФайла = Неопределено)
	
	Перем СтруктураРазбора;
	Перем ТабличныйДокумент;
	
	Если ЭтоЗаявка Тогда
		
		ТабличныйДокумент = ПечатьЗаявки();
		
	Иначе
		
		Если ТипЗнч(РеквизитыДокумента) = Тип("Структура") И РеквизитыДокумента.Свойство("СтруктураРазбора", СтруктураРазбора)
			И ЭтоАдресВременногоХранилища(СтруктураРазбора) Тогда
			
			СтруктураРазбора = ПолучитьИзВременногоХранилища(СтруктураРазбора);
			
		Иначе
			
			Если Расширение = ".zip" Тогда
				
				КаталогДляРаспаковки = КаталогВременныхФайлов()+Строка(УникальныйИдентификатор);
				ЧтениеZip = Новый ЧтениеZipФайла(ИмяВремФайла);
				ЧтениеZip.ИзвлечьВсе(КаталогДляРаспаковки);
				
				МассивФайлов = НайтиФайлы(КаталогДляРаспаковки, "*.*");
				
				МассивПодписей = Новый Массив;
				
				Для Каждого Файл Из МассивФайлов Цикл
					Если Файл.Расширение = ".xml" Тогда
						
						СтруктураРазбора = Вычислить(Объект.ИмяМодуляЭлектронныеДокументыВнутренний).СформироватьДеревоРазбора(Файл.ПолноеИмя);
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
				СтруктураРазбора = Вычислить(Объект.ИмяМодуляЭлектронныеДокументыВнутренний).СформироватьДеревоРазбора(ИмяВремФайла)
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРазбора) Тогда
			
			Если НРег(ТипДокумента) = "акт" Тогда
				
				ТабличныйДокумент = РеквизитФормыВЗначение("Объект").СформироватьАктАТИ(СтруктураРазбора, id, ИнформацияОСертификатеОтправителя, ИнформацияОСертификатеПолучателя);
				
			ИначеЕсли НРег(ТипДокумента) = "счет" Тогда
				
				ТабличныйДокумент = РеквизитФормыВЗначение("Объект").СформироватьСчетАТИ(СтруктураРазбора, id, ИнформацияОСертификатеОтправителя, ИнформацияОСертификатеПолучателя);
				
			Иначе	
				
				ТабличныйДокумент = Вычислить(Объект.ИмяМодуляЭлектронныеДокументыВнутренний).ПечатнаяФормаЭД(СтруктураРазбора, ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ТабличныйДокумент <> Неопределено Тогда
		КоллекцияПечатныхФорм = ОбщегоНазначения.ТаблицаЗначенийВМассив(УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("ПечатьЭДО"));
		Строка = КоллекцияПечатныхФорм[0];
		Строка.ТабличныйДокумент = ТабличныйДокумент;
	КонецЕсли;
	
	Возврат КоллекцияПечатныхФорм;
	
КонецФункции

&НаСервере 
Функция СформироватьДокументВБазеНаСервере(ПутьКФайлу)
	
	Возврат РеквизитФормыВЗначение("Объект").СформироватьДокументВБазе(ID, Исходящий, ПутьКФайлу, ЭтоЗаявка);
	
КонецФункции

&НаСервере
Функция ПриИзмененииДокументСсылка()
	
	КонтрагентИзменился = Ложь;
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		Номер = ДокументСсылка.Номер;
		Дата = ДокументСсылка.Дата;
		
		Описание = Строка(ДокументСсылка)+" (версия от "+ТекущаяДата()+")";
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", ДокументСсылка.Метаданные()) Тогда
			
			КонтрагентДокумента = ПолучитьЗначениеРеквизита(ДокументСсылка, "Контрагент");
			Если КонтрагентДокумента <> Неопределено Тогда
				Если Контрагент <> КонтрагентДокумента Тогда
					Контрагент = КонтрагентДокумента;
					Организация = ДокументСсылка.Организация;
					КонтрагентИзменился = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат КонтрагентИзменился
	
КонецФункции

&НаСервере
Функция ЗаполнитьСтруктуруОтправкиДляАгента()
	
	Doc_ID = СгенерироватьИД();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("doc_id", Doc_ID);
	
	СтруктураПараметров.Вставить("doc_recipient_id", Формат(КонтрагентId, "ЧГ=0"));
	СтруктураПараметров.Вставить("doc_recipient_contact", КонтактId);
	СтруктураПараметров.Вставить("doc_recipient_inn", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ИНН"));
	
	СтруктураПараметров.Вставить("signer_inn", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН"));
	СтруктураПараметров.Вставить("send", Истина);
	СтруктураПараметров.Вставить("is_waiting", Истина);
	СтруктураПараметров.Вставить("is_invoice", ЭтоСчетФактура);
	
	СтруктураПараметров.Вставить("description", Описание);
	СтруктураПараметров.Вставить("doctype", ТипДокумента);
	
	СтруктураПараметров.Вставить("date", Формат(Дата, "ДФ=yyyy-MM-dd"));
	СтруктураПараметров.Вставить("number", СокрЛП(Номер));
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиОрганизациюПоИНН(ИНН)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() = 1 Тогда
		Возврат Выборка[0].Организация;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СвернутьТаблицу()
	
	ТЗКомментарии = Комментарии.Выгрузить();
	Комментарии.Очистить();
	
	Отбор = Новый Структура("Автор, Дата");
	
	Для каждого Стр Из ТЗКомментарии Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Стр);
		МассивСтрок = ТЗКомментарии.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(Комментарии.Добавить(), Стр);
			
		Иначе
			
			Комментарий       = МассивСтрок[0].Комментарий;
			Вложение          = МассивСтрок[0].Вложение;
			ПричинаОтклонения = МассивСтрок[0].ПричинаОтклонения;
			ИмяФайлаВложения  = МассивСтрок[0].ФайлИмя;
			
			Для каждого НайдСтр Из МассивСтрок Цикл
				
				Комментарий       = Макс(Комментарий,       НайдСтр.Комментарий);
				Вложение          = Макс(Вложение,          НайдСтр.Вложение);
				ПричинаОтклонения = Макс(ПричинаОтклонения, НайдСтр.ПричинаОтклонения);
				ИмяФайлаВложения  = Макс(ФайлИмя,           НайдСтр.ФайлИмя);
				
			КонецЦикла;
			
			Если Комментарии.НайтиСтроки(Отбор).Количество() = 0 Тогда
				НоваяСтр                   = Комментарии.Добавить();
				НоваяСтр.Автор             = Стр.Автор;
				НоваяСтр.Комментарий       = Комментарий;
				НоваяСтр.Дата              = Стр.Дата;
				НоваяСтр.Вложение          = Вложение;
				НоваяСтр.ПричинаОтклонения = ПричинаОтклонения;
				НоваяСтр.ФайлИмя           = ИмяФайлаВложения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СгенерироватьИД()
	
	Перем Id;
	Id = "";
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		Если ТипДокумента = "Акт" Тогда
			Префикс = "Act_";
		ИначеЕсли ТипДокумента = "Счет" Тогда
			Префикс = "Bill_";
		ИначеЕсли ТипДокумента = "Счет-фактура" Тогда
			Префикс = "Invoice_";
		Иначе	
			Префикс = "";
		КонецЕсли;
		
		Id = Префикс + Строка(ДокументСсылка.УникальныйИдентификатор())+"_" + ПреобразоватьАлфавит(ДокументСсылка.ВерсияДанных);
		
	КонецЕсли;
	
	Возврат Id;
	
КонецФункции

&НаСервере
Функция СформироватьДокумент1С(ДокументСсылка, ОтправлятьПечатнуюФорму, ДопПараметры = Неопределено)
	
	Возврат РеквизитФормыВЗначение("Объект").СформироватьДокумент1С(ДокументСсылка, ОтправлятьПечатнуюФорму, ДопПараметры);
	
КонецФункции

&НаСервере
Процедура ТестТекстаВызовСервера()
		
КонецПроцедуры

&НаСервере
Процедура ЗаявкаСсылкаОбработкаВыбораНаСервере()
	
	Дата = ЗаявкаСсылка.Дата;
	НомерДокумента = ЗаявкаСсылка.Номер;
	
	Организация = ЗаявкаСсылка.Организация;
	ПредставительОрганизации = "";
	
КонецПроцедуры

&НаСервере
Функция ПечатьЗаявки()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ОбработкаОбъект.ПолучитьМакет("МакетЗаявки");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаПеревозку";
	
	ТекстЗаказчик = "";
	ТекстИсполнитель = "";
	Если РольКонтрагента = 1 Тогда //Заказчик
		ЗаказчикНаименование = Контрагент.Наименование;
		ТекстЗаказчик = ЗаказчикНаименование + ", именуемое в дальнейшем Заказчик ";
		Если ЗначениеЗаполнено(ПредставительКонтрагента) Тогда
			ТекстЗаказчик = ТекстЗаказчик + " в лице "+ПредставительКонтрагента;
			Если ЗначениеЗаполнено(ОснованиеПредставителяКонтрагента) Тогда
				ТекстЗаказчик = ТекстЗаказчик + ", действующего(-ей) на основании "+ОснованиеПредставителяКонтрагента;
			КонецЕсли;
		КонецЕсли;
		
		ТекстИсполнитель = Организация.Наименование + ", именуемое в дальнейшем Перевозчик";
		Если ЗначениеЗаполнено(ПредставительОрганизации) Тогда
			ТекстИсполнитель = ТекстИсполнитель + " в лице "+ПредставительОрганизации;
			Если ЗначениеЗаполнено(ОснованиеПредставителяОрганизации) Тогда
				ТекстИсполнитель = ТекстИсполнитель + ", действующего(-ей) на основании "+ОснованиеПредставителяОрганизации;
			КонецЕсли;
		КонецЕсли;
	Иначе //Исполнитель
		ЗаказчикНаименование = Организация.Наименование;
		ТекстЗаказчик = ЗаказчикНаименование + ", именуемое в дальнейшем Заказчик";
		Если ЗначениеЗаполнено(ПредставительОрганизации) Тогда
			ТекстЗаказчик = ТекстЗаказчик + " в лице "+ПредставительОрганизации;
			Если ЗначениеЗаполнено(ОснованиеПредставителяОрганизации) Тогда
				ТекстЗаказчик = ТекстЗаказчик + ", действующего(-ей) на основании "+ОснованиеПредставителяОрганизации;
			КонецЕсли;
		КонецЕсли;
		
		ТекстИсполнитель = Контрагент.Наименование + ", именуемое в дальнейшем Перевозчик";
		Если ЗначениеЗаполнено(ПредставительКонтрагента) Тогда
			ТекстИсполнитель = ТекстИсполнитель + " в лице "+ПредставительКонтрагента;
			Если ЗначениеЗаполнено(ОснованиеПредставителяКонтрагента) Тогда
				ТекстИсполнитель = ТекстИсполнитель + ", действующего(-ей) на основании "+ОснованиеПредставителяКонтрагента;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаказчик = ТекстЗаказчик + " с одной стороны, и ";
	ТекстИсполнитель = ТекстИсполнитель + " с другой стороны , подписали настоящий заказ на выполнение перевозки груза на следующих условиях:";
	//унифицировать с формированием файла
	ВводнаяЧасть = ТекстЗаказчик+Символы.ПС+ТекстИсполнитель;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.ТипДокумента = ТипЗаявки;
	ОбластьЗаголовок.Параметры.НомерДокумента = НомерДокумента;
	ОбластьЗаголовок.Параметры.ДатаДокумента = Дата;
	ОбластьЗаголовок.Параметры.ВводнаяЧасть = ВводнаяЧасть;
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбластьТочкаМаршрута = Макет.ПолучитьОбласть("ТочкаМаршрута");
	ОбластьГруз = Макет.ПолучитьОбласть("Груз");
	
	Для Каждого ТочкаМаршрута Из ТочкиМаршрута Цикл
		ОбластьТочкаМаршрута.Параметры.Заполнить(ТочкаМаршрута);
		ТабДок.Вывести(ОбластьТочкаМаршрута);
		ГрузыВТочке = Грузы.НайтиСтроки(Новый Структура("uid_ТочкиМаршрута", ТочкаМаршрута.uid));
		Для Каждого ГрузВТочке Из ГрузыВТочке Цикл
			ОбластьГруз.Параметры.Заполнить(ГрузВТочке);
			ТабДок.Вывести(ОбластьГруз);
		КонецЦикла;
	КонецЦикла;
	
	ОбластьШапкаТранспорт = Макет.ПолучитьОбласть("ШапкаТранспорт");
	ОбластьШапкаТранспорт.Параметры.Требования = "Грузоподъемность :"+Формат(Грузоподъемность, "ЧДЦ=2")+"(т)"+Символы.ПС+
	"Тип кузова :"+ТипКузова;
	
	ТабДок.Вывести(ОбластьШапкаТранспорт);
	
	ОбластьСтрокаТранспорт = Макет.ПолучитьОбласть("СтрокаТранспорт");
	Для Каждого СтрТранспорт Из Транспорт Цикл
		ОбластьСтрокаТранспорт.Параметры.Заполнить(СтрТранспорт);
		ТабДок.Вывести(ОбластьСтрокаТранспорт);
	КонецЦикла;
	
	ОбластьШапкаВодители = Макет.ПолучитьОбласть("ШапкаВодители");
	ТабДок.Вывести(ОбластьШапкаВодители);
	
	ОбластьСтрокаВодители = Макет.ПолучитьОбласть("СтрокаВодители");
	Для Каждого Водитель Из Водители Цикл
		ОбластьСтрокаВодители.Параметры.Заполнить(Водитель);
		ТабДок.Вывести(ОбластьСтрокаВодители);
	КонецЦикла;
	
	ОбластьШапкаОплата = Макет.ПолучитьОбласть("ШапкаОплата");
	ТабДок.Вывести(ОбластьШапкаОплата);
	
	ОбластьСтрокаОплата = Макет.ПолучитьОбласть("СтрокаОплата");
	Для Каждого СтрОплата Из ГрафикОплаты Цикл
		ОбластьСтрокаОплата.Параметры.Заполнить(СтрОплата);
		ТабДок.Вывести(ОбластьСтрокаОплата);
	КонецЦикла;
	
	ОбластьДопУсловия = Макет.ПолучитьОбласть("ДопУсловия");
	ТабДок.Вывести(ОбластьДопУсловия);
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Подвал = ШтрафныеСанкцииИОтветственность+Символы.ПС+Прочее;
	ТабДок.Вывести(ОбластьПодвал);
	
	ОбластьРеквизитыСторон = Макет.ПолучитьОбласть("РеквизитыСторон");
	ОбластьРеквизитыСторон.Параметры.ЗаказчикНаименование = ЗаказчикНаименование;
	ТабДок.Вывести(ОбластьРеквизитыСторон);
	
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаявкуИзФайла(ФайлЗаявки) Экспорт
	
	ДанныеЗаявки = ПолучитьДанныеЗаявки(ФайлЗаявки);
	
	ТочкиМаршрута.Загрузить(ДанныеЗаявки.ТочкиМаршрута);
	Грузы.Загрузить(ДанныеЗаявки.Грузы);
	Транспорт.Загрузить(ДанныеЗаявки.Транспорт);
	Водители.Загрузить(ДанныеЗаявки.Водители);
	ГрафикОплаты.Загрузить(ДанныеЗаявки.ГрафикОплаты);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеЗаявки,, "ТочкиМаршрута, Грузы, Транспорт, Водители, ГрафикОплаты");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТипыРеквизитов()
	
	Если Метаданные.Документы.Найти("Бит_ЗаявкаЭкспедирования") <> Неопределено Тогда
		
		ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.Бит_ЗаявкаЭкспедирования");
		
		Элементы.ЗаявкаСсылка.ОграничениеТипа = ТипЗначения;
		ЗаявкаСсылка = ТипЗначения.ПривестиЗначение(ЗаявкаСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьФайлЗаявкиНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.СформироватьФайлЗаявки(ДокументСсылка);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСпискиВыбора()

	Перем Время;
	
	// ТочкиМаршрутаДействие
	Элементы.ТочкиМаршрутаДействие.СписокВыбора.Добавить("load", "Погрузка");
	Элементы.ТочкиМаршрутаДействие.СписокВыбора.Добавить("unload", "Разгрузка");
	
	// ТочкиМаршрутаВремя
	Для Инд = 1 По 23 Цикл
		Время = Дата(1,1,1,Инд,0,0);
		Элементы.ТочкиМаршрутаВремя.СписокВыбора.Добавить(Время, Формат(Время, "ДФ=ЧЧ:мм"));
	КонецЦикла;
	
	// ТочкиМаршрутаВид
	Элементы.ТочкиМаршрутаВид.СписокВыбора.Добавить("Верхняя");
	Элементы.ТочкиМаршрутаВид.СписокВыбора.Добавить("Боковая");
	Элементы.ТочкиМаршрутаВид.СписокВыбора.Добавить("Задняя");
	Элементы.ТочкиМаршрутаВид.СписокВыбора.Добавить("Любая");
	
	// ГрузыADR
	Элементы.ГрузыADR.СписокВыбора.Добавить("1");
	Для Инд = 1 По 6 Цикл
		Элементы.ГрузыADR.СписокВыбора.Добавить("1."+Инд);
	КонецЦикла;
	
	ТипыТранспорта = ВладелецФормы.ТипыТранспорта;
	
	Если ТипЗнч(ТипыТранспорта) = Тип("ДанныеФормыКоллекция") Тогда
		
		Для Каждого СтрТипТранспорта Из ТипыТранспорта Цикл
			Элементы.ТипКузова.СписокВыбора.Добавить(СтрТипТранспорта.Наименование);
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(ТипКузова) И ТипыТранспорта.Количество() > 0 Тогда
			ТипКузова = ТипыТранспорта[0].Наименование;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруЗаявки()
	
	ТЗВодители = Новый ТаблицаЗначений;
	ТЗВодители.Колонки.Добавить("ФИО", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗВодители.Колонки.Добавить("Паспорт", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗВодители.Колонки.Добавить("НомерВодительскогоУдостоверения", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗВодители.Колонки.Добавить("Телефон", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	
	ТЗТранспорт = Новый ТаблицаЗначений;
	ТЗТранспорт.Колонки.Добавить("МаркаТягача", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("МодельТягача", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("РегНомерТягача", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("МаркаПрицепа", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("МодельПрицепа", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("РегНомерПрицепа", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	
	ТЗГрафикОплаты = Новый ТаблицаЗначений;
	ТЗГрафикОплаты.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТЗГрафикОплаты.Колонки.Добавить("ФормаОплаты", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗГрафикОплаты.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100))); 
	ТЗГрафикОплаты.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200))); 
	ТЗГрафикОплаты.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12,2))); 
	
	ТЗТочкиМаршрута = Новый ТаблицаЗначений;
	ТЗТочкиМаршрута.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТЗТочкиМаршрута.Колонки.Добавить("Время", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТЗТочкиМаршрута.Колонки.Добавить("Действие", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗТочкиМаршрута.Колонки.Добавить("Город", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗТочкиМаршрута.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗТочкиМаршрута.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТЗТочкиМаршрута.Колонки.Добавить("Продолжительность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0)));
	ТЗТочкиМаршрута.Колонки.Добавить("КонтактноеЛицо", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗТочкиМаршрута.Колонки.Добавить("uid", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	ТЗТочкиМаршрута.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,6)));
	ТЗТочкиМаршрута.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,6)));
	
	ТЗГрузы = Новый ТаблицаЗначений;
	ТЗГрузы.Колонки.Добавить("uid_ТочкиМаршрута", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	ТЗГрузы.Колонки.Добавить("ГрузНаименование", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));	
	ТЗГрузы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));	
	ТЗГрузы.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗГрузы.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));	
	ТЗГрузы.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗГрузы.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗГрузы.Колонки.Добавить("Ширина", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗГрузы.Колонки.Добавить("Высота", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗГрузы.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТЗГрузы.Колонки.Добавить("ADR", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
	ТЗГрузы.Колонки.Добавить("ОсобыеТребования", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	
	
	СтруктураЗаявки = Новый Структура;
	СтруктураЗаявки.Вставить("CMR",);
	СтруктураЗаявки.Вставить("T1");
	СтруктураЗаявки.Вставить("TIR");
	СтруктураЗаявки.Вставить("Валюта");
	СтруктураЗаявки.Вставить("Водители", ТЗВодители);
	СтруктураЗаявки.Вставить("ГрафикОплаты", ТЗГрафикОплаты);
	СтруктураЗаявки.Вставить("Грузоподъемность");
	СтруктураЗаявки.Вставить("ДатаДокумента");
	СтруктураЗаявки.Вставить("Договор");
	СтруктураЗаявки.Вставить("ДополнительныеУсловия");
	СтруктураЗаявки.Вставить("Контрагент");
	СтруктураЗаявки.Вставить("МедКнижкаВодителя");
	СтруктураЗаявки.Вставить("НомерДокумента");
	СтруктураЗаявки.Вставить("Организация");
	СтруктураЗаявки.Вставить("ОснованиеПредставителяКонтрагента");
	СтруктураЗаявки.Вставить("ОснованиеПредставителяОрганизации");
	СтруктураЗаявки.Вставить("ОсобыеУсловияОплаты");
	СтруктураЗаявки.Вставить("ПредставительКонтрагента");
	СтруктураЗаявки.Вставить("ПредставительОрганизации");
	СтруктураЗаявки.Вставить("Примечание");
	СтруктураЗаявки.Вставить("Прочее");
	СтруктураЗаявки.Вставить("РольКонтрагента");
	СтруктураЗаявки.Вставить("СанКнижкаТС");
	//СтруктураЗаявки.Вставить("ТипДокумента");
	СтруктураЗаявки.Вставить("ТипКузова");
	СтруктураЗаявки.Вставить("ШтрафныеСанкцииИОтветственность");
	СтруктураЗаявки.Вставить("ТипКузова");
	СтруктураЗаявки.Вставить("ТочкиМаршрута", ТЗТочкиМаршрута);
	СтруктураЗаявки.Вставить("Грузы", ТЗГрузы);
	СтруктураЗаявки.Вставить("Транспорт", ТЗТранспорт);
	СтруктураЗаявки.Вставить("Водители", ТЗВодители);
	
	Возврат СтруктураЗаявки;
	
КонецФункции

&НаСервере
Функция ИдентификаторРодителяЧастиАдресаЭлемента(ЧастьАдреса, ЧастиАдреса)
	
	Идентификатор = Неопределено;
	ЕстьЧастьАдресаБезИдентификатора = Ложь;
	ЧастиАдресаВышеПоУровню = Новый Структура;
	УровеньАдреса = 0;
	Для Каждого КлючЗначение Из ЧастиАдреса Цикл
		Часть = КлючЗначение.Значение;
		Если Часть.Уровень < ЧастьАдреса.Уровень И НЕ ПустаяСтрока(Часть.Представление) Тогда
			ЧастиАдресаВышеПоУровню.Вставить(КлючЗначение.Ключ, Часть);
			Если ЗначениеЗаполнено(КлючЗначение.Значение.Идентификатор) Тогда
				Если УровеньАдреса < КлючЗначение.Значение.Уровень Тогда
					Идентификатор = КлючЗначение.Значение.Идентификатор;
					УровеньАдреса = КлючЗначение.Значение.Уровень;
				КонецЕсли;
			Иначе
				ЕстьЧастьАдресаБезИдентификатора = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ЕстьЧастьАдресаБезИдентификатора Тогда 
		УправлениеКонтактнойИнформациейСлужебный.ЗаполнитьИдентификаторыНаселенногоПункта(ЧастиАдресаВышеПоУровню, Идентификатор);
	КонецЕсли;

	Возврат Идентификатор;

КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьГородНаСервере(ЗначениеПолей)
	
	Город = УправлениеКонтактнойИнформацией.ГородАдресаКонтактнойИнформации(ЗначениеПолей);
	
	Если ПустаяСтрока(Город) Тогда
		
		Город = УправлениеКонтактнойИнформацией.РегионАдресаКонтактнойИнформации(ЗначениеПолей);
		
	КонецЕсли;
	
	Возврат Город
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВодителя(Физлицо)
	
	Результат = Новый Структура("Паспорт, НомерВодительскогоУдостоверения, Телефон");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыФизическихЛицСрезПоследних.Представление КАК Паспорт
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			ЯвляетсяДокументомУдостоверяющимЛичность
		|				И Физлицо = &Физлицо
		|				И ВидДокумента <> ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение)) КАК ДокументыФизическихЛицСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыФизическихЛицСрезПоследних.Серия + "" "" + ДокументыФизическихЛицСрезПоследних.Номер КАК НомерВодительскогоУдостоверения
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			Физлицо = &Физлицо
		|				И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение)) КАК ДокументыФизическихЛицСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Телефон
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка = &Физлицо
		|	И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица)";
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[0].Выбрать();
	Если Выборка.Следующий() Тогда
		
		 Результат.Вставить("Паспорт", Выборка.Паспорт);
		
	КонецЕсли;
	
	Выборка = Результаты[1].Выбрать();
	Если Выборка.Следующий() Тогда
		
		 Результат.Вставить("НомерВодительскогоУдостоверения", Выборка.НомерВодительскогоУдостоверения);
		
	КонецЕсли;

	Выборка = Результаты[2].Выбрать();
	Если Выборка.Следующий() Тогда
		
		 Результат.Вставить("Телефон", Выборка.Телефон);
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеВСтрокуВнутрНаСервере(Значение)
	
	Возврат ЗначениеВСтрокуВнутр(Значение)
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеКонтрагента(Контрагент)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат "";
	КонецЕсли;
	
	Наименование = ?(ПустаяСтрока(Контрагент.НаименованиеПолное), Контрагент.Наименование, Контрагент.НаименованиеПолное);
	
	Поз = Найти(Наименование, """");
	Если Поз > 0 И Поз <= 10 Тогда
		Наименование = СокрП(Сред(Наименование, Поз));
		Наименование = СтрЗаменить(Наименование, """", "");
	КонецЕсли;
	
	Возврат Наименование
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрокаВоВремя(ВремяСтр)
	
	Время = '00010101';
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВремяСтр, ":");
	Если Массив.Количество() = 2 Тогда
		
		Попытка
			Часы = Число(Массив[0]);
			Минуты = Число(Массив[1]);
			Время = Дата(1,1,1, Часы, Минуты, 0);
		Исключение
		КонецПопытки;

	КонецЕсли;
	
	Возврат Время;
	
КонецФункции

&НаСервереБезКонтекста
Функция СуществуетДокумент(ИмяДокумента)
	
	Возврат Метаданные.Документы.Найти(ИмяДокумента) <> Неопределено;
	
КонецФункции

&НаСервере
Процедура ДополнитьФайлПодписантом(ПутьКФайлу, СертификатПодписи, ИНН = "")
	
	Если НЕ ЗначениеЗаполнено(СертификатПодписи) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(ПутьКФайлу);
	
	// Считаем содержимое XML файла
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
	
	// Освободим временный файл для записи
	ОбъектXML.Закрыть();
	
	// Получим тег Подписант для обработки.
	ПодписантDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Подписант");
	
	ПодписантИП = ПодписантDOM[0].ПолучитьЭлементыПоИмени("ИП");
	Если ПодписантИП.Количество() > 0 Тогда
		ПодписантDOM[0].УдалитьДочерний(ПодписантИП[0]);
	КонецЕсли;

	ПодписантЮЛ = ПодписантDOM[0].ПолучитьЭлементыПоИмени("ЮЛ");
	Если ПодписантЮЛ.Количество() > 0 Тогда
		ПодписантDOM[0].УдалитьДочерний(ПодписантЮЛ[0]);
	КонецЕсли;
	
	// Разложим ФИО из сертификата.
	//ПараметрыСертификата = Вычислить(Объект.ИмяМодуляЭлектронныеДокументыСлужебныйВызовСервера).РеквизитыСертификата(СертификатПодписи);
	ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(СертификатПодписи);
	ФамилияСертификата   = ПараметрыСертификата.Фамилия;
	ИмяСертификата       = ПараметрыСертификата.Имя;
	ОтчествоСертификата  = ПараметрыСертификата.Отчество;
	
	ДолжностьПоСертификату = "---";
	Если ЗначениеЗаполнено(ПараметрыСертификата.Должность) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.Должность;
	КонецЕсли;
	
	//ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(Организация);
	//ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(Организация);

	ЭтоФизЛицо = (СтрДлина(ИНН) = 12);
	
	ФИОПодписанта = ДокументDOM.СоздатьЭлемент("ФИО");
	
	ФИОПодписанта.УстановитьАтрибут("Фамилия",  ФамилияСертификата);
	ФИОПодписанта.УстановитьАтрибут("Имя",      ИмяСертификата);
	Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
		ФИОПодписанта.УстановитьАтрибут("Отчество", ОтчествоСертификата);
	КонецЕсли;
	
	Если ЭтоФизЛицо Тогда
		ПодписантИПЮЛ = ДокументDOM.СоздатьЭлемент("ИП");
		
		// Делаем проверку на заполненность обязатеьного поля ИНН для ИП
		//Если Не ДанныеЮрФизЛица.Свойство("ИНН") ИЛИ СтрДлина(ДанныеЮрФизЛица.ИНН) <> 12 Тогда
		//	ШаблонСообщения = НСтр("ru = 'Операция отменена. Не корректно заполнено поле ""ИИН"" в организации %1.'");
		//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Организация);
		//	
		//	ВызватьИсключение ТекстСообщения;
		//КонецЕсли;
		
		ПодписантИПЮЛ.УстановитьАтрибут("ИННФЛ", ИНН);
		
		ДанныеСвидетельства = "";
		Выполнить(Объект.ИмяМодуляЭлектронныеДокументыПереопределяемый + ".ДанныеСвидетельстваОРегистрацииИП(Организация, ДанныеСвидетельства)");
		ПодписантИПЮЛ.УстановитьАтрибут("СвГосРегИП", ДанныеСвидетельства);
	Иначе
		ПодписантИПЮЛ = ДокументDOM.СоздатьЭлемент("ЮЛ");
		
		// Делаем проверку на заполненность обязатеьного поля ИНН для ЮЛ
		//Если Не ДанныеЮрФизЛица.Свойство("ИНН") ИЛИ СтрДлина(ДанныеЮрФизЛица.ИНН) <> 10 Тогда
		//	ШаблонСообщения = НСтр("ru = 'Операция отменена. Не корректно заполнено поле ""ИИН"" в организации %1.'");
		//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Организация);
		//	
		//	ВызватьИсключение ТекстСообщения;
		//КонецЕсли;
		
		ПодписантИПЮЛ.УстановитьАтрибут("ИННЮЛ", ИНН);
		ПодписантИПЮЛ.УстановитьАтрибут("Должн", ДолжностьПоСертификату);
	КонецЕсли;
	
	ПодписантИПЮЛ.ДобавитьДочерний(ФИОПодписанта);
	ПодписантDOM[0].ДобавитьДочерний(ПодписантИПЮЛ);
		
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу, "windows-1251");
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область КлиентскаяЛогика

&НаКлиенте 
Функция ПолучитьПолноеИмяФормы(ИмяФормы)
	
	СимволТочка = ".";
	ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
	Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; //
	Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;
	
КонецФункции

&НаКлиенте 
Процедура УправлениеВидимостьюДоступностьюЭлементов()
	
	ЭтоНовый = ПустаяСтрока(ID);

	ТолькоПросмотр = НЕ МожетРедактироваться И НЕ ЭтоНовый;
		
	Элементы.СтраницаКомментарии.Видимость = НЕ ЭтоНовый;
	Элементы.СтраницаПодписи.Видимость = НЕ ЭтоНовый;
	
	Элементы.ФорматФайла.Видимость = НЕ Подписан И НЕ ЕстьВложение;
	Элементы.ДокументСсылка.ТолькоПросмотр = Подписан ИЛИ ЕстьВложение;
	Элементы.ПутьКФайлу.ТолькоПросмотр = Подписан ИЛИ ЕстьВложение;
	Элементы.ФайлИмя.Видимость = НЕ ПустаяСтрока(ФайлИмя);
	
	Элементы.СоздатьКонтрагента.Доступность = НЕ ТолькоПросмотр;
	Элементы.СохранитьID.Доступность = НЕ ТолькоПросмотр;
	
    Элементы.КонтрагентНаименование.Заголовок = ?(Исходящий, "Получатель (Код АТИ)", "Отправитель (Код АТИ)");
	
	Если НРег(ТипДокумента) = "счет"
		ИЛИ НРег(ТипДокумента) = "акт"
		ИЛИ НРег(ТипДокумента) = "накладная"
		ИЛИ ЭтоСчетФактура
		ИЛИ ЭтоЗаявка
		И НЕ ПустаяСтрока(ИмяФормыВыбораДокумента)
		
		Тогда
		
		Элементы.ДокументСсылка.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
		ПутьКФайлу = "";
		
		Элементы.ПутьКФайлу.Видимость = Ложь;
		Элементы.ДокументСсылка.Видимость = Истина;
		
		Элементы.ФорматФайла.Видимость = НЕ ТолькоПросмотр И ПустаяСтрока(ФайлИмя);
		
	Иначе
		Элементы.ДокументСсылка.ТолькоПросмотр = Истина;
		Элементы.ПутьКФайлу.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;
		ДокументСсылка = Неопределено;
		
		Элементы.ПутьКФайлу.Видимость = ЭтоНовый И Исходящий;
		Элементы.ДокументСсылка.Видимость = Ложь;
		
		Элементы.ФорматФайла.Видимость = Ложь;
		
	КонецЕсли;

	Если НЕ Исходящий И НЕ ЭтоДокументЭДО Тогда
		Элементы.ДокументСсылка.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СтатусКабинетаДиадок.Видимость = ЭтоСчетФактура;
	Элементы.СтатусОбменаСчетамиФактурами.Видимость = ЭтоСчетФактура;
	Элементы.Box_id.Видимость = ЭтоСчетФактура;
	
	Элементы.Утвердить.Видимость = МожетБытьОдобрен И ТребуетРешения;
	Элементы.Отклонить.Видимость = МожетБытьОтклонен И ТребуетРешения;
	Элементы.Подписать.Видимость = (ПравоПодписи И НЕ Подписан);
	
	Отправлять = МожетБытьОтправлен ИЛИ ЭтоНовый;
	Элементы.Сохранить.Видимость = МожетБытьСохранен ИЛИ ЭтоНовый;
	Элементы.Отправить.Видимость = Отправлять;
	Элементы.ПодписатьИОтправить.Видимость = ЭтоНовый ИЛИ (Отправлять И ПравоПодписи);
	
	Элементы.ТипДокумента.ТолькоПросмотр = ЕстьВложение;
	
	Элементы.Печать.Видимость = ЭтоДокументЭДО;
	Элементы.СформироватьДокументВБазе.Видимость = ЭтоДокументЭДО И НЕ Исходящий;
	
	Элементы.СкачатьПодписьОтправителя.Видимость = ЗначениеЗаполнено(ПодписьОтправителяId);
	Элементы.СкачатьПодписьПолучателя.Видимость = ЗначениеЗаполнено(ПодписьПолучателяId);
	
	Элементы.СтраницаДанныеЗаявки.Видимость = Ложь И ЭтоЗаявка;
		
	Элементы.ОбновитьДокумент.Видимость = НЕ ЭтоНовый;		
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Элементы.Договор.Видимость = Истина;
	Иначе
		Элементы.Договор.Видимость = Ложь;
	КонецЕсли;
	
	Если ТочкиМаршрута.Количество() = 0 Тогда
		Элементы.ТочкиМаршрутаКарта.Видимость = Ложь;
	Иначе
		Элементы.ТочкиМаршрутаКарта.Видимость = Истина;
	КонецЕсли;

	Элементы.СоздатьКонтрагента.Доступность = НЕ ЗначениеЗаполнено(Контрагент);
	
	Элементы.СтраницаПредпросмотрКартинка.Видимость = ЭтоКартинка;
	Элементы.СтраницаПредпросмотр.Видимость = НЕ ЭтоКартинка;
	
КонецПроцедуры

&НаКлиенте 
Процедура ФорматироватьXML(ВыходнойФайл, НоваяКодировка = Неопределено)

	Если Найти(Расширение, "xml") Тогда
		
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			
			Если НоваяКодировка <> Неопределено Тогда
				
				ПолеТекста.Прочитать(ВыходнойФайл, Кодировка);
				ЧтениеXML.УстановитьСтроку(ПолеТекста.ПолучитьТекст());
				
			Иначе
				
				ЧтениеXML.ОткрытьФайл(ВыходнойФайл);
				
			КонецЕсли;
			
			Если НоваяКодировка = Неопределено Тогда
				Кодировка = ЧтениеXML.КодировкаXML;
			КонецЕсли;
			
			ПостроительDOM = Новый ПостроительDOM;
			ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
			
			ЗаписьDOM = Новый ЗаписьDOM;
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			
			ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
			
			ПолеТекста.УстановитьТекст(ЗаписьXML.Закрыть());
		Исключение
		КонецПопытки;
		
	Иначе
		
		Попытка
			ПолеТекста.Прочитать(ВыходнойФайл, Кодировка);
			
			ТестТекстаВызовСервера();
		Исключение
			ПолеТекста.УстановитьТекст("Невозможно отобразить содержимое файла "+Расширение);
		КонецПопытки;
		
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Функция ЭтоКартинка(Расширение)
	
	Для каждого Подстрока Из РасширенияКартинок Цикл
		Если Найти(Расширение, Подстрока) Тогда
			Возврат Истина
		КонецЕсли
	КонецЦикла;
	
	Возврат Ложь
	
КонецФункции


&НаКлиенте
Процедура ПечатьДокументов(КоллекцияПечатныхФорм)
	
	КлючУникальности = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати");
	ПараметрыОткрытия.ПараметрКоманды = Новый Массив;
	ПараметрыОткрытия.ИменаМакетов = "ПечатьЭДО";
	ПараметрыОткрытия.ПараметрыПечати = Новый Структура;
	ПараметрыОткрытия.Вставить("КоллекцияПечатныхФорм", КоллекцияПечатныхФорм);
	ПараметрыОткрытия.Вставить("ОбъектыПечати", Новый СписокЗначений);
	
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ЭтаФорма, КлючУникальности);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыЗаявки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПутьКФайлу = Результат.ИмяФайла;
		Контрагент = Результат.Контрагент;		
		Формализованный = Истина;
		ПриИзмененииКонтрагента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииПослеВвода(СтруктураВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураВозврата = Неопределено ИЛИ СтруктураВозврата = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Комментарий = СтруктураВозврата.Комментарий;
	Если СтруктураВозврата.Свойство("ФайлИмя") Тогда
		КомментарийФайл = СтруктураВозврата.ФайлИмя;
	Иначе
		КомментарийФайл = "";
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Комментарий) ИЛИ НЕ ПустаяСтрока(КомментарийФайл)) И ЗначениеЗаполнено(id) Тогда
		API.Comment(id, Комментарий, КомментарийФайл);
		ОбновитьДанныеДокумента();
	ИначеЕсли (ЗначениеЗаполнено(Комментарий) ИЛИ НЕ ПустаяСтрока(КомментарийФайл)) Тогда
		СтрКомментарий = Комментарии.Добавить();
		СтрКомментарий.Комментарий = Комментарий;
		СтрКомментарий.ФайлИмя = КомментарийФайл;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаГруза()
	
	//тут будет проверка корректности привязки груза к точкам маршрута
	Возврат Истина;
	
КонецФункции

&НаКлиенте 
Функция ИмяЧастиАдресаЭлемента(Элемент)
	
	//Возврат Сред(Элемент.Имя, 1 + СтрДлина("Часть"));
	Возврат Элемент.Имя;
	
КонецФункции

&НаКлиенте 
Функция ЧастьАдресаЭлемента(Элемент)
	
	Возврат ЧастиАдреса[ИмяЧастиАдресаЭлемента(Элемент)];
	
КонецФункции

&НаКлиенте
Функция Координаты_Гугл(Адрес)
	
	СтруктураДанных = Новый Структура("Широта, Долгота", 0,0);
	
	Соединение = Новый HTTPСоединение("maps.googleapis.com");
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	Попытка
		Соединение.Получить("/maps/api/geocode/xml?address=" + Адрес + "&language=ru&sensor=false", ВременныйФайл);
	Исключение
		Сообщить("Ошибка получения координат по адресу: " + Адрес);
		Возврат Неопределено;
	КонецПопытки;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ВременныйФайл);
	
	ПостроительDOM 			= Новый ПостроительDOM;
	ДокументДОМ 			= ПостроительDOM.Прочитать(ЧтениеXML);
	ТаблицаРезультатов = ДокументДОМ.ПолучитьЭлементыПоИмени("result");
	
	Если ДокументДОМ.ПолучитьЭлементыПоИмени("status")[0].ТекстовоеСодержимое <> "OK" ИЛИ ТаблицаРезультатов.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаРезультатов.Количество()>0 Тогда
		СписокText 				= ТаблицаРезультатов[0].ПолучитьЭлементыПоИмени("formatted_address");
		ЭлементыШиротаДолгота = ТаблицаРезультатов[0].ПолучитьЭлементыПоИмени("location");
		СтруктураДанных.Вставить("Широта",ЭлементыШиротаДолгота[0].ПолучитьЭлементыПоИмени("lat")[0].ТекстовоеСодержимое);
		СтруктураДанных.Вставить("Долгота", ЭлементыШиротаДолгота[0].ПолучитьЭлементыПоИмени("lng")[0].ТекстовоеСодержимое);
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	УдалитьФайлы(ВременныйФайл);
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьДокумент(ПодписыватьДокумент)

	ОчиститьСообщения();
	
 	ДопПараметры = Новый Структура("ПодписыватьДокумент, Отправлять", ПодписыватьДокумент, Истина);
	ДопПараметры.Вставить("ЗакрытьФорму", ПодписыватьДокумент);

	ФлагОтправка = Истина;
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодписыватьДокумент И ВладелецФормы.ОтправлятьЧерезАгента Тогда
		
		ОтправитьЧерезАгента();
		
	Иначе 
		
		Если ЭтоСчетФактура Тогда
			
			//СписокСертификатов = Новый СписокЗначений;
			//
			//Для каждого Стр Из ВладелецФормы.Сертификаты Цикл
			//	
			//	Если ПустаяСтрока(Стр.edo_id) Тогда
			//		Продолжить;
			//	КонецЕсли;
			//	
			//	ВремТокен = Стр.token;
			//	
			//	СписокСертификатов.Добавить(Стр.Отпечаток, Стр.Представление);
			//	
			//КонецЦикла;
			//
			//Если СписокСертификатов.Количество() > 1 Тогда
			//	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ПослеВыбораКабинетаДиадок", ЭтаФорма, ДопПараметры), СписокСертификатов);
			//	
			//ИначеЕсли СписокСертификатов.Количество() = 1 Тогда
			//	
			//	Отпечаток = СписокСертификатов[0].Значение;
			//	
			//	ПослеВыбораКабинетаДиадок(Отпечаток, ДопПараметры)
			//	
			//Иначе
			//	
			//	ВызватьИсключение "У нас нет зарегистрированного кабинета в ФНС";
			//	
			//КонецЕсли;
			
			СохранитьДокумент(ВладелецФормы.АктивныйСертификат, ДопПараметры);
			
		Иначе
			
			//ПослеВыбораКабинетаДиадок(, ДопПараметры)
			СохранитьДокумент(, ДопПараметры);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораКабинетаДиадок(ОтпечатокДиадок = Неопределено, ДопПараметры) Экспорт
	
	Если ТипЗнч(ОтпечатокДиадок) = Тип("ЭлементСпискаЗначений") Тогда
		ОтпечатокДиадок = ОтпечатокДиадок.Значение;
	КонецЕсли;
	
	ДопПараметры.Вставить("ОтпечатокДиадок", ОтпечатокДиадок);
	
	СохранитьДокумент(ОтпечатокДиадок, ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВФНС(Отпечаток, ТокенДиадок)

	Если ТокенДиадок = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ТокенДиадок) = Тип("ЭлементСпискаЗначений") Тогда
		ТокенДиадок = ТокенДиадок.Значение;
	КонецЕсли;
	
	API.SendInvoice(id, Box_id, Отпечаток, ТокенДиадок);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСертификатыКонтрагента()

	Если КонтрагентID = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияСертификатов = API.Certificates(КонтрагентId);
	
	Если КоллекцияСертификатов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СертификатыПолучателя.Очистить();
	Элементы.Box_id.СписокВыбора.Очистить();
	
	СтатусКабинетаДиадок = "";
	
	Для каждого ЭлемСертификат Из КоллекцияСертификатов Цикл
		
		Если Истина ИЛИ ЭлемСертификат["integrator"]["status_code"] = "active" Тогда
			
			Если ПустаяСтрока(ЭлемСертификат["integrator"]["box_id"]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЭлемСертификат["valid_until"]) = Тип("Дата") И ЭлемСертификат["valid_until"] < НачалоДня(ТекущаяДата()) Тогда
				Продолжить;
			КонецЕсли;
			
			Стр = СертификатыПолучателя.Добавить();
			Стр.Отпечаток = ЭлемСертификат["id"];
			Стр.box_id = ЭлемСертификат["integrator"]["box_id"];
			Стр.edo_id = ЭлемСертификат["integrator"]["edo_id"];
			
			Элементы.Box_id.СписокВыбора.Добавить(Стр.box_id, ЭлемСертификат["title"]);
			
			СтатусКабинетаДиадок = "Есть кабинет в ФНС";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СертификатыПолучателя.Количество() = 0 Тогда	
		
		МассивСтрок = ВладелецФормы.Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", ВладелецФормы.АктивныйСертификат));
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			Если ПустаяСтрока(КонтрагентИНН) Тогда
				Структура = ПолучитьЗначенияРеквизитов(Контрагент, "ИНН, КПП");
				КонтрагентИНН = Структура.ИНН;
				КонтрагентКПП = Структура.КПП;
			КонецЕсли;
			
			Если ПустаяСтрока(КонтрагентИНН) Тогда
				Возврат;
			КонецЕсли;
			
			Ответ = API.Counteragents_Search(КонтрагентИНН, КонтрагентКПП, МассивСтрок[0].token, ВладелецФормы.АктивныйСертификат);
			
			Если Ответ = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Элементы.Box_id.СписокВыбора.Очистить();
			
			Для Каждого ЭлемКонтрагент Из Ответ Цикл
				
				Для Каждого Ящик Из ЭлемКонтрагент["Boxes"] Цикл
					
					Стр = СертификатыПолучателя.Добавить();
					Стр.Отпечаток = Ящик["BoxId"];
					Стр.box_id = Ящик["BoxId"];
					Стр.edo_id = ЭлемКонтрагент["FnsParticipantId"];
					
					Элементы.Box_id.СписокВыбора.Добавить(Ящик["BoxId"], Ящик["Title"])
					
				КонецЦикла;
								
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СертификатыПолучателя.Количество() = 1 Тогда
		
		Стр = СертификатыПолучателя[0];
		
		Box_id = Стр.box_id;
		edo_id = Стр.edo_id
		
	КонецЕсли
		
КонецПроцедуры 

&НаКлиенте
Функция ДанныеАктивногоСертификата() Экспорт
	
	Массив = ВладелецФормы.Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", ВладелецФормы.АктивныйСертификат));
	Если Массив.Количество() > 0 Тогда
		
		Возврат Массив[0];
		
	КонецЕсли;

КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийФормыСервер

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры,, "ЗакрыватьПриВыборе, ЗакрыватьПриЗакрытииВладельца, ТолькоПросмотр");
	
	ЧастиАдреса = УправлениеКонтактнойИнформациейСлужебный.СписокРеквизитовНаселенныйПункт( , "ФИАС");
	
КонецПроцедуры

&НаСервере                                                         
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ФлагОтправка Тогда
		ПроверяемыеРеквизиты.Добавить("КонтрагентId");
		ПроверяемыеРеквизиты.Добавить("КонтактId");
		ПроверяемыеРеквизиты.Добавить("Описание");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьТипыРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
		ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.Вставить("НеобходимоОбновить", НеобходимоОбновитьСписок);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормыКлиент

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтоНовый = ПустаяСтрока(ID);

	Если ЭтоНовый Тогда
		ФорматФайла = "XML";
		Формализованный = Истина;
	КонецЕсли;

	JSON = ВладелецФормы.JSON;
	API = ВладелецФормы.API;
	Служебный = ВладелецФормы.Служебный;
	ПечатьДокументов = ВладелецФормы.ПечатьДокументов;
	Объект.ИмяМодуляЭлектронныеДокументыВнутренний = ВладелецФормы.Объект.ИмяМодуляЭлектронныеДокументыВнутренний;
	Объект.ИмяМодуляЭлектронныеДокументыПереопределяемый = ВладелецФормы.Объект.ИмяМодуляЭлектронныеДокументыПереопределяемый;
	Объект.ИмяМодуляЭлектронныеДокументыСлужебныйВызовСервера = ВладелецФормы.Объект.ИмяМодуляЭлектронныеДокументыСлужебныйВызовСервера;
	
	РасширенияКартинок = Новый Массив;
	РасширенияКартинок.Добавить("bmp");
	РасширенияКартинок.Добавить("dib");
	РасширенияКартинок.Добавить("rle");
	РасширенияКартинок.Добавить("gif");
	РасширенияКартинок.Добавить("jpg");
	РасширенияКартинок.Добавить("jpeg");
	РасширенияКартинок.Добавить("png");
	РасширенияКартинок.Добавить("tif");
	РасширенияКартинок.Добавить("ico");
	РасширенияКартинок.Добавить("wmf");
	РасширенияКартинок.Добавить("emf");

	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("UnknownInvoiceStatus",                 "(неизвестный статус; может выдаваться лишь в случае, когда клиент использует устаревшую версию SDK и не может интерпретировать статус документа, переданный сервером)");
	СоответствиеСтатусов.Вставить("OutboundWaitingForInvoiceReceipt",     "(СФ исходящий, ожидается извещение о получении СФ от покупателя)");
	СоответствиеСтатусов.Вставить("OutboundNotFinished",                  "(СФ исходящий, извещение о получении СФ от покупателя уже есть, но документооборот еще не завершен, например еще не отправлены все необходимые ответные сервисные сообщения)");
	СоответствиеСтатусов.Вставить("OutboundFinished",                     "(СФ исходящий, документооборот завершен)");
	СоответствиеСтатусов.Вставить("OutboundWaitingForSenderSignature",    "(СФ исходящий, документ не отправлен, поскольку не подписан отправителем)");
	СоответствиеСтатусов.Вставить("OutboundInvalidSenderSignature",       "(СФ исходящий, документ не отправлен, поскольку подпись отправителя не является корректной)");
	СоответствиеСтатусов.Вставить("InboundNotFinished",                   "(СФ входящий, документооборот не завершен)");
	СоответствиеСтатусов.Вставить("InboundFinished",                      "(СФ входящий, документооборот завершен)");
	
	КонстЗагрузитьФайл = "Загрузить файл";
	КонстЗагрузитьАрхив = "Загрузить весь документооборот";
	
	Меню = Новый СписокЗначений;
	Меню.Добавить(КонстЗагрузитьФайл);
	Меню.Добавить(КонстЗагрузитьАрхив);

	
	// При открытии из списка контрагентов
	Если ЗначениеЗаполнено(КонтрагентID) Тогда
		ПриИзмененииКонтрагентID();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ПриИзмененииКонтрагента();
	КонецЕсли;
	
	Кодировка = "UTF-8";
	
	ОбновитьДанныеДокумента();
	
	УстановитьТипДокумента1С();
	
	
	Если ПустаяСтрока(ВерсияФормата) Тогда
		ВерсияФормата = "1";
	КонецЕсли;
	
	Если Дата = '00010101' Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Для каждого Стр Из ВладелецФормы.ТипыДокументов Цикл
		Элементы.ТипДокумента.СписокВыбора.Добавить(Стр.Наименование, Стр.Наименование);
	КонецЦикла;
	Элементы.ТипДокумента.СписокВыбора.СортироватьПоПредставлению();
	
	Если ЗначениеЗаполнено(ФайлID) Тогда
		
		Файл = Новый Файл(ФайлИмя);
		Расширение = Файл.Расширение;
		РеквизитыДокумента = Новый Структура("ID, ФайлID, ФайлИмя, Расширение, Дата, Номер, ВидЭД, Документ1С",
		ID,
		ФайлID,
		ФайлИмя,
		Расширение);
		
	КонецЕсли;
	
	
	Если НРег(Расширение) = ".xml" И (НРег(ТипДокумента) = "акт" ИЛИ НРег(ТипДокумента) = "счет" ИЛИ ЭтоСчетФактура)
		И РеквизитыДокумента <> Неопределено Тогда
		
		ЭтоДокументЭДО = Служебный.ВыполнитьРазборЭлектронныхДокументов(id, РеквизитыДокумента);
		ДокументСсылка = РеквизитыДокумента.Документ1С;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Id) Тогда
		ЗаполнитьСсылкиНаОбъекты();
	КонецЕсли;
	
	УстановитьТипыРеквизитов();
	ЗаполнитьСпискиВыбора();
	
	СписокТаблиц = Новый Структура(
		"ТочкиМаршрута,
		|Грузы,
		|Транспорт,
		|Водители,
		|ГрафикОплаты");

	Если Ложь И ЭтоЗаявка И НРег(Расширение) = ".xml" Тогда
		ФайлЗаявки = API.GetAttachment(id, ФайлID, "xml", ФайлИмя);
		ЗаполнитьЗаявкуИзФайла(ФайлЗаявки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ID) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДополнительныеУсловия) Тогда
		ДополнительныеУсловия = "Все споры, разногласия или требования, возникающие из договора, передаются на разрешение постоянно действующего Третейского суда при 
		|ООО «АВТОТРАНСИНФО», ИНН 7811320477 (194044, г. Санкт-Петербург, ул. Гельсингфорсская, д. 2, лит. А, БЦ «Гельсингфорсский», 7 этаж) 
		|в соответствии с Положением этого суда. Стороны с положением о Третейском суде при ООО «АВТОТРАНСИНФО» ознакомлены и согласны с ними. 
		|Положение о Третейском суде размещено в сети Интернет по адресу: http://www.ati.su/Statutetc.aspx и является общедоступным";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Прочее) Тогда
		Прочее = "Заказ, подписанный и заверенный печатями, переданный по электронной почте или посредством факсимильной связи, имеет юридическую силу. С условиями заказа согласны";
	КонецЕсли;
	
	Если ПустаяСтрока(ТипЗаявки) Тогда
		ТипЗаявки = Элементы.ТипЗаявки.СписокВыбора[0].Представление;
	КонецЕсли;

	УправлениеВидимостьюДоступностьюЭлементов();		
	УстановитьЗаголовокФормы();

КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруДокумента()
	
	Новый_ID = ID;
	Если ПустаяСтрока(Новый_ID) Тогда
		Новый_ID = СгенерироватьИД();
	КонецЕсли;
	
	СтруктураДокумента = Новый Структура
	(
	"id,
	|doc_recipient_id,
	|doc_recipient_contact,
	|doctype,
	|doc_request,
	|is_formal,
	|date,
	|number,
	|description,
	|body"
	,
	Новый_ID,
	Формат(КонтрагентId, "ЧГ=0"),
	Формат(КонтактId, "ЧН=0; ЧГ=0"),
	ТипДокумента,
	ТребуетсяЗапросРешения,
	Формализованный И Ложь, //отладка
	//?(ТипДокумента="Договор-заявка", Истина, Ложь), //отладка
	Формат(Дата, "ДФ=yyyy-MM-dd"),
	Номер,
	Описание,
	Тело
	);
	
	Если Формализованный И Ложь Тогда //отладка
		СтруктураДокумента.Удалить("number");
		СтруктураДокумента.Удалить("date");
		СтруктураДокумента.Удалить("description");
	Иначе
		СтруктураДокумента.Удалить("body");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСсылка) И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", ДокументСсылка.Метаданные()) Тогда
		СтруктураДокумента.Вставить("contract_number", ДокументСсылка.ДоговорКонтрагента.Номер);
		СтруктураДокумента.Вставить("contract_date", Формат(ДокументСсылка.ДоговорКонтрагента.Дата, "ДФ=yyyy-MM-dd"));
	КонецЕсли;
	
	Возврат СтруктураДокумента;
	
КонецФункции

&НаКлиенте 
Процедура СохранитьДокумент(ОтпечатокДиадок = Неопределено, ДопПараметры = Неопределено)
	
	Перем Результат;
	
	СтруктураДокумента = СформироватьСтруктуруДокумента();
	
	Если ПустаяСтрока(ID) Тогда
		
		Результат = API.Document(СтруктураДокумента.id);
		Если Результат <> Неопределено Тогда
			
			СписокКнопок = Новый СписокЗначений();
			
			Если Результат["is_draft"] = Истина Тогда
				СписокКнопок.Добавить("ПерезаписатьЧерновик", "Перезаписать документ");
			КонецЕсли;
			
			СписокКнопок.Добавить("ОткрытьСтарый", "Открыть старый документ");
			СписокКнопок.Добавить("Закрыть", "Закрыть");
			
			Ответ = Вопрос("Документ с таким вложением уже существует!
			|Вы можете:", СписокКнопок);
			
			Если Ответ = "ПерезаписатьЧерновик" Тогда
				
				 ФайлИмя = Результат["file"]["name"];
				
			ИначеЕсли Ответ = "ОткрытьСтарый" Тогда
				
				 ID = Результат["id"];
				 ОбновитьДанныеДокумента();
				 УправлениеВидимостьюДоступностьюЭлементов();
				 Возврат;
				
			ИначеЕсли Ответ = "Закрыть" Тогда	
				
				Возврат;
				
			КонецЕсли;			
						
		КонецЕсли;
				
	КонецЕсли;
	
	Если ПустаяСтрока(ID) ИЛИ ЭтоЧерновик Тогда
		
		СтруктураОтвета = API.PostDocument(СтруктураДокумента);
		
		Если СтруктураОтвета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ID = СтруктураОтвета;
		
	КонецЕсли;
	
	Если ЭтоСчетФактура Тогда
		
		МассивСтрок = ВладелецФормы.Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", ОтпечатокДиадок));
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			Если ПустаяСтрока(МассивСтрок[0].edo_id) Тогда
				ВызватьИсключение "Не задано ФНС ИД отправителя!";
			КонецЕсли;
			
			Если ПустаяСтрока(edo_id) Тогда
				ВызватьИсключение "Не задано ФНС ИД получателя!
				|Выберите аккаунт получетеля из списка";
			КонецЕсли;
			
			ДопПараметры.Вставить("ТокенДиадок", МассивСтрок[0].token);
			ДопПараметры.Вставить("ИдентификаторОрганизации", МассивСтрок[0].edo_id);
			ДопПараметры.Вставить("ИдентификаторКонтрагента", edo_id);
			
		КонецЕсли;
		
	КонецЕсли;

	Если (ЗначениеЗаполнено(ПутьКФайлу) ИЛИ ЗначениеЗаполнено(ДокументСсылка)) И НЕ ЕстьВложение
		ИЛИ НЕ ПустаяСтрока(ФайлИмя) Тогда
		
		Если ПустаяСтрока(ФайлИмя) Тогда
			
			Если Формализованный Тогда
				
				Если ЭтоЗаявка Тогда
					
					СтруктураДанных = СформироватьФайлЗаявкиНаСервере();
					ФайлДляВыгрузки = СтруктураДанных.ИмяФайла;
					Описание = СтруктураДанных.Описание;
					
				Иначе
					
					Если ЗначениеЗаполнено(ДокументСсылка) Тогда
						
						Если НЕ(ЭтоСчетФактура И НЕ ДопПараметры.ПодписыватьДокумент И НЕ ДопПараметры.Отправлять) Тогда
							// Не стоит формировать счет-фактуру без подписи и отправки
							ФайлДляВыгрузки = СформироватьДокумент1С(ДокументСсылка, Не Формализованный, ДопПараметры);
						КонецЕсли;
						
					Иначе
						ФайлДляВыгрузки = ПутьКФайлу;
						ФлагУдаление = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				ФлагУдаление = Истина;
			Иначе
				ФайлДляВыгрузки = Служебный.ПечатьДокумента(ДокументСсылка, ID);
			КонецЕсли;
			
		Иначе
			
			//ФайлДляВыгрузки = API.GetAttachment(ID, ФайлID, Расширение, ФайлИмя);
			
		КонецЕсли;
		
		КонтрагентСвойствоId = Получить_ATI_ID(Контрагент);
		
		Если КонтрагентСвойствоId = 0 Тогда
			Сохранить_ATI_DOC_ID_Контрагента(Контрагент, КонтрагентID);
		КонецЕсли;
		
		//ДопПараметры.Вставить("ЗакрытьФорму", ДопПараметры.ПодписыватьДокумент);
		
		//Если ПустаяСтрока(ФайлДляВыгрузки) Тогда
		//	Возврат;
		//КонецЕсли;
		
		ДопПараметры.Вставить("ИмяФайла", ФайлДляВыгрузки);
		ДопПараметры.Вставить("ФлагУдаление", ФлагУдаление);
		
		// Здесь нужен выбор сертификата
		Если ДопПараметры.ПодписыватьДокумент Тогда
			
			СертификатСсылка = ВладелецФормы.ПолучитьАктивныйСертификат();
			Если ТипЗнч(СертификатСсылка) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") И НЕ СертификатСсылка.Пустая() Тогда
				ПодписатьДокументЗавершение(СертификатСсылка, ДопПараметры);
			Иначе
				ПодписатьДокумент(ДопПараметры);
			КонецЕсли;
			
		Иначе	
			ПодписатьДокументЗавершение(Неопределено, ДопПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 №%2 от %3", ТипДокумента, Номер, Формат(Дата, "ДЛФ=D"));
	
	Если Подписан Тогда
		Заголовок = Заголовок + " (подписан)";
	КонецЕсли;
	
	Если ВладелецФормы.ОтправлятьЧерезАгента Тогда
		Элементы.ПодписатьИОтправить.Заголовок = "Подписать и отправить
		|(исп. Агент)";
	Иначе
		Элементы.ПодписатьИОтправить.Заголовок = "Подписать и отправить";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеЗаявки(ФайлЗаявки)
	
	ДанныеЗаявки = ПолучитьСтруктуруЗаявки();
	Если Ложь Тогда
		ДанныеЗаявки = Новый Структура;
	КонецЕсли;
	
	ФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаЗаявки");
	Макет.Записать(ФайлСхемы);
	
	Фабрика = СоздатьФабрикуXDTO(ФайлСхемы);
	ПакетATI = Фабрика.Пакеты.Получить("https://d.ati.su/xml/ns/0.1/");
		
	ОбменXML = Новый ЧтениеXML;
    ОбменXML.ОткрытьФайл(ФайлЗаявки);
	ОбменXML.ПерейтиКСодержимому();
	
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(ФайлЗаявки);
	
	// Считаем содержимое XML файла
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
	
	// Освободим временный файл для записи
	ОбъектXML.Закрыть();
	ОбъектXML = Неопределено;
	
	Разыменователь = Новый РазыменовательПространствИменDOM("xsi", "https://d.ati.su/xml/ns/0.1/");
	ДанныеЗаявки.ДатаДокумента = ДокументDOM.ВычислитьВыражениеXPath(ДокументDOM.ЭлементДокумента, "header\date", Разыменователь).ОдиночныйУзелЗначение.ЗначениеУзла;

	Попытка
		Документ = Фабрика.ПрочитатьXML(ОбменXML, ПакетATI.КорневыеСвойства.Получить("document").Тип);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат ДанныеЗаявки;
	КонецПопытки;

	//Если Документ.type = "Заказ" Тогда //Доделать
	//	ДанныеЗаявки.ТипДокумента = "Заказ (разовый)";
	//КонецЕсли;
	
	ДанныеЗаявки.ДатаДокумента = Документ.header.date;
	ДанныеЗаявки.НомерДокумента = Документ.header.number;
	
	ДанныеЗаявки.Контрагент = Контрагент;

	Агенты = Документ.agents.agent;
	Для Каждого Агент Из Агенты Цикл
		
		// TODO:
		//поменять схему, убрать говнокод...
		НайденнаяОрганизация = Справочники.Организации.НайтиПоНаименованию(Агент.title);
		Если НЕ НайденнаяОрганизация.Пустая() Тогда
			ДанныеЗаявки.Организация = НайденнаяОрганизация;
			Если Агент.role = "Заказчик" Тогда
				ДанныеЗаявки.РольКонтрагента = 1;
			Иначе
				ДанныеЗаявки.РольКонтрагента = 0;
			КонецЕсли;
		Иначе
			
			Если НЕ ЗначениеЗаполнено(ДанныеЗаявки.Контрагент) Тогда
				
				РезультатПоиска = НайтиКонтрагентаНаСервере(,, Агент.title);
				Если ТипЗнч(РезультатПоиска) = Тип("СправочникСсылка.Контрагенты") Тогда
					ДанныеЗаявки.Контрагент = РезультатПоиска;
				КонецЕсли;
				
				Если ДанныеЗаявки.Контрагент.Пустая() Тогда
					#Если Клиент Тогда
						Ответ = Вопрос("Контрагент не найден. Создать нового?", РежимДиалогаВопрос.ДаНет);
						Если Ответ = КодВозвратаДиалога.Да Тогда
							НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
							НовыйКонтрагент.Наименование = Агент.title;
							НовыйКонтрагент.Записать();
							ДанныеЗаявки.Контрагент = НовыйКонтрагент.Ссылка;
						КонецЕсли;
					#КонецЕсли
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДанныеЗаявки.Организация) И ЗначениеЗаполнено(ДанныеЗаявки.Контрагент) Тогда
		ЗапросДоговор = Новый Запрос;
		ЗапросДоговор.Текст=
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|	И ДоговорыКонтрагентов.Владелец = &Контрагент
		|	И (ДоговорыКонтрагентов.Наименование ПОДОБНО &Наименование
		|	ИЛИ ДоговорыКонтрагентов.Номер = &Номер)";
		ЗапросДоговор.УстановитьПараметр("Организация", ДанныеЗаявки.Организация);
		ЗапросДоговор.УстановитьПараметр("Контрагент", ДанныеЗаявки.Контрагент);
		Для Каждого Связь Из Документ.body.relation Цикл
			НомерДоговора = Связь;
			ПозицияНомера = Найти(Связь, "№");
			Если ПозицияНомера>0 Тогда
				ПозицияПробела = Найти(Сред(Связь, ПозицияНомера+1), " ");
				Если ПозицияПробела>0 Тогда
					НомерДоговора = СокрЛП(Сред(Связь, ПозицияНомера+1, ПозицияПробела));
				КонецЕсли;
			КонецЕсли;
			ЗапросДоговор.УстановитьПараметр("Номер", НомерДоговора);
			ЗапросДоговор.УстановитьПараметр("Наименование", "%"+СтрЗаменить(Связь, "К договору", "")+"%");
			
			РезультатЗапроса = ЗапросДоговор.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ДанныеЗаявки.Договор = РезультатЗапроса.Выгрузить()[0].Ссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТочкиМаршрута.Очистить();
	Грузы.Очистить();
	Транспорт.Очистить();
	ДанныеЗаявки.ГрафикОплаты.Очистить();
	ДанныеЗаявки.Водители.Очистить();
	
	Раздел = Документ.body;
		
	Маршрут = Раздел.route;
	
	МапДействий = Новый Соответствие;
	МапДействий.Вставить("load", "Погрузка");
	МапДействий.Вставить("unload", "Разгрузка");
	
	Для Каждого ТочкаМаршрута Из Маршрут.location Цикл
		
		СтрТочкиМаршрута = ДанныеЗаявки.ТочкиМаршрута.Добавить();
		СтрТочкиМаршрута.uid = Новый УникальныйИдентификатор;
		СтрТочкиМаршрута.Действие = МапДействий[ТочкаМаршрута.action.type];
		СтрТочкиМаршрута.Город = ТочкаМаршрута.address.city;
		СтрТочкиМаршрута.Адрес = ТочкаМаршрута.address.locality;
		СтрТочкиМаршрута.Дата = ТочкаМаршрута.date;
		СтрТочкиМаршрута.Время = СтрокаВоВремя(ТочкаМаршрута.time);
		СтрТочкиМаршрута.Продолжительность = ТочкаМаршрута.duration;
		Агент = ТочкаМаршрута.agent;
		Если ЗначениеЗаполнено(Агент.title) Тогда
			СтрТочкиМаршрута.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию(Агент.title);
		КонецЕсли;
		СтрТочкиМаршрута.КонтактноеЛицо = Агент.Contact;
		
		Если ТочкаМаршрута.address.Свойства().Получить("latitude")<>Неопределено Тогда
			СтрТочкиМаршрута.Широта = ТочкаМаршрута.address.latitude;
		КонецЕсли;
		Если ТочкаМаршрута.address.Свойства().Получить("longitude")<>Неопределено Тогда
			СтрТочкиМаршрута.Долгота = ТочкаМаршрута.address.longitude;
		КонецЕсли;
		Если ТочкаМаршрута.list <> Неопределено Тогда //для последней разгрузки может не быть
			Для Каждого Груз Из ТочкаМаршрута.list.Cargo Цикл
				СтрГруз = ДанныеЗаявки.Грузы.Добавить();
				СтрГруз.uid_ТочкиМаршрута = СтрТочкиМаршрута.uid;
				СтрГруз.ADR = Груз.ADR;
				СтрГруз.Вес = Груз.Weight.__content;
				СтрГруз.Объем = Груз.Volume.__content;
				
				Если Груз.Dimensions.Свойства().Получить("__content") <> Неопределено Тогда
					
					РазмерыСтрокой = Груз.Dimensions.__content;
					РазмерыМассивом = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РазмерыСтрокой, "/");
					
					Если РазмерыМассивом.Количество()>0 Тогда
						Попытка
							СтрГруз.Длина = Число(РазмерыМассивом[0]);
						Исключение
							
						КонецПопытки;
					КонецЕсли;
					Если РазмерыМассивом.Количество()>1 Тогда
						Попытка
							СтрГруз.Ширина = Число(РазмерыМассивом[1]);
						Исключение
							
						КонецПопытки;
					КонецЕсли;
					Если РазмерыМассивом.Количество()>2 Тогда
						Попытка
							СтрГруз.Высота = Число(РазмерыМассивом[2]);
						Исключение
							
						КонецПопытки;
					КонецЕсли;
					
				КонецЕсли;
				
				СтрГруз.Количество = Груз.amount;
				СтрГруз.ОсобыеТребования = Груз.requirements;
				СтрГруз.ГрузНаименование = Груз.name;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	transport = Раздел.transport;
		
	Для Каждого ТС Из transport.list.vehicle Цикл
		
		Тягач = ТС.tractor;
		
		СтрТранспорт = ДанныеЗаявки.Транспорт.Добавить();
		СтрТранспорт.МаркаТягача = Тягач.brand;
		СтрТранспорт.МодельТягача = Тягач.model;
		СтрТранспорт.РегНомерТягача = Тягач.regnum;
		
		Счетчик = 0;
		
		Прицеп = ТС.trailer;
		СтрТранспорт = ДанныеЗаявки.Транспорт[Счетчик];
		СтрТранспорт.МаркаПрицепа = Прицеп.brand;
		СтрТранспорт.МодельПрицепа = Прицеп.model;
		СтрТранспорт.РегНомерПрицепа = Прицеп.regnum;
		Счетчик = Счетчик+1;
		
	КонецЦикла;
	
	Грузоподъемность = transport.requirements.Capacity.__content;
	ТипКузова = transport.requirements.type;
	Примечание = transport.requirements.notes;
	
	Для Каждого Опция Из transport.requirements.options.option Цикл
		Если Опция = "TIR" Тогда
			ДанныеЗаявки.TIR = Истина;
		ИначеЕсли Опция = "CMR" Тогда
			ДанныеЗаявки.CMR = Истина;
		ИначеЕсли Опция = "T1" Тогда
			ДанныеЗаявки.T1 = Истина;
		ИначеЕсли Опция = "Сан. книжка ТС" Тогда
			ДанныеЗаявки.СанКнижкаТС = Истина;
		ИначеЕсли Опция = "Мед. книжка водителя" Тогда
			ДанныеЗаявки.МедКнижкаВодителя = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Водитель Из Раздел.drivers.driver Цикл
		СтрВодитель = ДанныеЗаявки.Водители.Добавить();
		СтрВодитель.ФИО = Водитель.name;
		СтрВодитель.Паспорт = Водитель.passport;
		СтрВодитель.НомерВодительскогоУдостоверения = Водитель.driverLicense;
		СтрВодитель.Телефон = Водитель.mobile;
	КонецЦикла;
	
	МапВидыоплаты = Новый Соответствие;
	МапВидыоплаты.Вставить("prepayment", "Предоплата");
	МапВидыоплаты.Вставить("atUnloading", "На выгрузке");
	МапВидыоплаты.Вставить("final", "Окончательный расчет");
	
	//Если Заголовок = "Оплата перевозки" Тогда
	Для Каждого Условие Из Раздел.payment.parts.part Цикл
		СтрГрафикОплаты = ДанныеЗаявки.ГрафикОплаты.Добавить();
		СтрГрафикОплаты.Сумма = Условие.Value;
		СтрГрафикОплаты.Комментарий = МапВидыоплаты[Условие.type];
		СтрГрафикОплаты.Примечание = Условие.docs.__content;
	КонецЦикла;
	//КонецЕсли;
	
	ДанныеЗаявки.ДополнительныеУсловия = Раздел.additional.agreement + ДанныеЗаявки.ДополнительныеУсловия;
	
	ДанныеЗаявки.ШтрафныеСанкцииИОтветственность = Раздел.penalties.text;
	
    ОбменXML.Закрыть();	
	
	Возврат ДанныеЗаявки;
	
КонецФункции

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагента();
	
КонецПроцедуры

&НаКлиенте 
Процедура ПриИзмененииКонтрагента() Экспорт
	
	Если НЕ ЭтаФорма.ТолькоПросмотр И ЗначениеЗаполнено(Контрагент) Тогда
		
		КонтрагентСсылкаId = Получить_ATI_ID(Контрагент);
		Если КонтрагентСсылкаId > 0 Тогда
			
			КонтрагентId = КонтрагентСсылкаId;
			ПриИзмененииКонтрагентID();
			
		Иначе

			КонтрагентНаименованиеОкончаниеВводаТекста(Элементы.КонтрагентНаименование, ПолучитьНаименованиеКонтрагента(Контрагент),
				Неопределено, Неопределено, Истина);
				
			ТекущийЭлемент = Элементы.КонтрагентНаименование;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентIDПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентID();
	
КонецПроцедуры

&НаКлиенте 
Процедура ПриИзмененииКонтрагентID() Экспорт	
	
	Результат1С = API.Account(КонтрагентId);
	Если Результат1С = Неопределено Тогда
		Возврат;
	Иначе
		КонтрагентНаименование = Результат1С["name"];
		КонтактId = "";
		КонтактНаименование = "";
	КонецЕсли;
	
	ЗаполнитьСертификатыКонтрагента();
	ЗаполнитьКонтактыКонтрагента();
	
	Если Контрагент.Пустая() Тогда
		НайтиВыбратьКонтрагента(КонтрагентId,, КонтрагентНаименование);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьКонтактыКонтрагента()
	
	Если КонтрагентId > 0 Тогда
		Результат1С = API.Account(КонтрагентId);
		
		Если Результат1С = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Контакты = Результат1С["contacts"];
		Элементы.КонтактНаименование.СписокВыбора.Очистить();
		
		Для каждого Контакт Из Контакты Цикл
			Элементы.КонтактНаименование.СписокВыбора.Добавить(Контакт["ati_id"], Контакт["name"]);
		КонецЦикла;
		
		Если Элементы.КонтактНаименование.СписокВыбора.Количество() = 1 Тогда
			КонтактНаименование = Элементы.КонтактНаименование.СписокВыбора[0].Представление;
			КонтактНаименование = Элементы.КонтактНаименование.СписокВыбора[0].Представление;
			КонтактId = Элементы.КонтактНаименование.СписокВыбора[0].Значение;
		Иначе
			КонтактНаименование = "";
			КонтактId = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура НайтиВыбратьКонтрагента(КонтрагентId, КонтрагентИНН, КонтрагентНаименование, ВыбиратьИнтерактивно = Истина)
	
	СписокКонтрагентов = НайтиКонтрагентаНаСервере(КонтрагентId, КонтрагентИНН, КонтрагентНаименование);
	
	Если СписокКонтрагентов = Неопределено ИЛИ СписокКонтрагентов.Количество() = 0 Тогда
		Возврат;
		
	ИначеЕсли СписокКонтрагентов.Количество() > 1 Тогда
		
		Если ВыбиратьИнтерактивно Тогда
			
			Элементы.Контрагент.СписокВыбора.ЗагрузитьЗначения(СписокКонтрагентов.ВыгрузитьЗначения());
			
			ВыбранныйКонтрагент = Неопределено;

			
			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НайтиВыбратьКонтрагентаЗавершение", ЭтаФорма), СписокКонтрагентов,
				Элементы.Контрагент, СписокКонтрагентов.НайтиПоЗначению(Контрагент));
			
		Иначе
			
			Элементы.Контрагент.СписокВыбора.ЗагрузитьЗначения(СписокКонтрагентов.ВыгрузитьЗначения());
			
		КонецЕсли;
		
	Иначе
		Контрагент = СписокКонтрагентов[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВыбратьКонтрагентаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ВыбранныйКонтрагент = ВыбранныйЭлемент;
	Если ВыбранныйКонтрагент <> Неопределено Тогда
		Контрагент = ВыбранныйКонтрагент.Значение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтактНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеВыбора = Элементы.КонтактНаименование.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЗначениеВыбора<>Неопределено Тогда
		КонтактНаименование = ЗначениеВыбора.Представление;
		КонтактId = ЗначениеВыбора.Значение;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьДанныеДокумента(ОбновлятьКЛ = Истина, ОбновлятьТолькоДанныеПодписи = Ложь)
	
	Контакты = Новый Массив;
	
	Исходящий = Истина;
	
	Если ЗначениеЗаполнено(id) Тогда
		
		Если ОбновлятьКЛ Тогда
			ЗаполнитьКонтактыКонтрагента();
		КонецЕсли;
		
		СтруктураДокумента1С = API.Document(id);
		Если СтруктураДокумента1С = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Номер = СтруктураДокумента1С["number"];
		Дата = Служебный.СтрокаВДату(СтруктураДокумента1С["date"]);
		
		contragent = СтруктураДокумента1С["contragent"];
		Если ЗначениеЗаполнено(contragent) И ОбновлятьКЛ Тогда
			КонтактID           = contragent["contact"]["ati_id"];
			КонтактНаименование = contragent["contact"]["name"];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(contragent) Тогда
			КонтрагентНаименование = contragent["account"]["name"] + " (" + contragent["account"]["ati_id"] + ")";
			КонтрагентId           = contragent["account"]["id"];
			КонтрагентИНН          = contragent["account"]["inn"];
			
			ЗаполнитьСертификатыКонтрагента();
			
		КонецЕсли;
				
		Если НЕ ОбновлятьТолькоДанныеПодписи Тогда
			
			ТипДокумента         = СтруктураДокумента1С["doctype"];
			
			Описание             = СтруктураДокумента1С["description"];
			
			Согласован           = СтруктураДокумента1С["is_approved"];
			Отклонен             = СтруктураДокумента1С["is_declined"];
			
			ТребуетРешения       = СтруктураДокумента1С["is_asked_resolution"];
			МожетБытьОтправлен   = СтруктураДокумента1С["can_be_sent"];
			МожетБытьОдобрен     = СтруктураДокумента1С["can_be_approved"];
			МожетБытьОтклонен    = СтруктураДокумента1С["can_be_declined"];
			МожетБытьСохранен    = СтруктураДокумента1С["can_be_saved"] И НЕ СтруктураДокумента1С["is_deleted"];
			МожетРедактироваться = СтруктураДокумента1С["can_be_edited"];
			
			ПравоПодписи         = СтруктураДокумента1С["can_be_signed"];
			ЕстьВложение         = СтруктураДокумента1С["has_attachments"];
			ЭтоЧерновик			 = СтруктураДокумента1С["is_draft"];
			
			
			//СтатусДокумента = ?(ТребуетРешения И (МожетБытьОдобрен ИЛИ МожетБытьОтклонен), "Требует решения", "");
			СтатусДокумента = СтруктураДокумента1С["status"];
			
			// Получим статус, если документа типа счет-фактура
			// Реализовано будет по-другому
			ЭтоСчетФактура = НРег(ТипДокумента) = "счет-фактура";
			Если ЭтоСчетФактура Тогда
				
				МассивID = Новый Массив;
				МассивID.Добавить(ID);
				
				ДанныеСертификата = ДанныеАктивногоСертификата();
				Если ДанныеСертификата <> Неопределено Тогда
					
					Результат = API.DocumentStatus_Get(ВладелецФормы.АктивныйСертификат, ДанныеСертификата.token, МассивID);
					Если Результат <> Неопределено Тогда
						Для каждого Элем Из Результат Цикл
							СтатусОбменаСчетамиФактурами = Элем.Значение["diadoc_status_ru"];
							Прервать;
						КонецЦикла;
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
			
			Если НЕ СтруктураДокумента1С["can_be_edited"] Тогда
				ТолькоПросмотр = Истина;
			КонецЕсли;
			
			Подписанты = СтруктураДокумента1С["signers"];
			
			КомментарииМассив = СтруктураДокумента1С["comments"];
			Комментарии.Очистить();
			Для Каждого Коммент Из КомментарииМассив Цикл
				СтрКомментарий = Комментарии.Добавить();
				СтрКомментарий.Автор = Коммент["user"]["name"];
				
				СтрКомментарий.Дата = Служебный.СтрокаВДату(Коммент["timestamp"]);
				Если Найти(СтрКомментарий.Комментарий, "{decline}") Тогда
					СтрКомментарий.Комментарий = СтрЗаменить(СтрКомментарий.Комментарий, "{decline}", "");
					СтрКомментарий.ПричинаОтклонения = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(Коммент["attachment"]) Тогда
					СтрКомментарий.Вложение      = Коммент["attachment"]["name"];
					//СтрКомментарий.Комментарий = "Вложение";
					СтрКомментарий.ФайлИмя       = Коммент["attachment"]["id"];
				Иначе
					СтрКомментарий.Комментарий   = Коммент["text"];
				КонецЕсли;
			КонецЦикла;
			
			СвернутьТаблицу();
			Комментарии.Сортировать("Дата");
			
			Если Не ЕстьВложение Тогда
				//API.ExportDoc(id);
				СтруктураДокумента1С = API.Document(id);
				Если СтруктураДокумента1С = Неопределено Тогда
					Возврат;
				КонецЕсли;
				ЕстьВложение = СтруктураДокумента1С["has_attachments"];
			КонецЕсли;
			
			Если ЕстьВложение Тогда
				Если ЗначениеЗаполнено(СтруктураДокумента1С["file"]) Тогда
					ФайлID  = СтруктураДокумента1С["file"]["id"];
					ФайлИмя = СтруктураДокумента1С["file"]["name"];
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФайлИмя) Тогда
				Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ФайлИмя);
				Если НРег(Расширение)="xml" Тогда
					Формализованный = Истина;
				КонецЕсли;
				ФорматФайла = ВРег(Расширение);
			КонецЕсли;
			
			ВыходнойФайл = API.GetAttachment(id, ФайлID, Расширение, ФайлИмя);
			
			Если ВыходнойФайл <> Неопределено Тогда
				
				ЭтоКартинка = ЭтоКартинка(Расширение);
				
				Если ЭтоКартинка Тогда
					
					АдресКартинки = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ВыходнойФайл), ЭтаФорма.УникальныйИдентификатор);
					
				Иначе
					
					ФорматироватьXML(ВыходнойФайл);
					
				КонецЕсли;

			КонецЕсли;

			Исходящий = СтруктураДокумента1С["is_owner"];
			
			Если Исходящий Тогда
				Элементы.ДокументСсылка.Заголовок = "Исходный документ";
			Иначе
				Элементы.ДокументСсылка.Заголовок = "Загруженный документ";
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ФайлID) Тогда
			
			СписокПодписей = СтруктураДокумента1С["file"]["signs"];
			
			Если НЕ СписокПодписей = Неопределено Тогда
				
				Для Каждого Подписант Из Подписанты Цикл
					
					ТекущаяПодпись = СписокПодписей[Подписант];
					
					ТекущийСертификат = ТекущаяПодпись.Получить("certificate");
					
					components = ТекущийСертификат.Получить("components");
					Если components <> Неопределено Тогда
						ИННСертификата = Строка(components.Получить("INN"));
					Иначе
						ИННСертификата = "";
					КонецЕсли;
					
					ИнфоОСертификате = 
					"Отпечаток: "+ТекущийСертификат["id"]+Символы.ПС+
					"Наименование: "+ТекущийСертификат["title"]+Символы.ПС+
					"Начало действия: "+ТекущийСертификат["valid_from"]+Символы.ПС+
					"Окончание действия: "+ТекущийСертификат["valid_until"]+Символы.ПС+
					"*************************************************************";
					
					Если Найти(ТекущаяПодпись["contact_id"], Формат(ВладелецФормы.UserID, "ЧГ=0")) > 0 Тогда //наша подпись
						Если СтруктураДокумента1С["is_owner"] Тогда
							ПодписьОтправителяId = ТекущаяПодпись["id"];
							ИнформацияОСертификатеОтправителя = ИнфоОСертификате;
						Иначе
							ПодписьПолучателяId = ТекущаяПодпись["id"];
							ИнформацияОСертификатеПолучателя = ИнфоОСертификате;
						КонецЕсли;
					Иначе
						
						СертификатСоответсвие = ТекущийСертификат;
						СертификатСтруктура = Новый Структура; 
						Для Каждого Элемент Из СертификатСоответсвие Цикл
							Попытка
							СертификатСтруктура.Вставить(Элемент.Ключ, Элемент.Значение);
							Исключение
								СертификатСтруктура = ЗначениеВСтрокуВнутрНаСервере(СертификатСоответсвие);
								Прервать;
							КонецПопытки;
						КонецЦикла;
						СертификатКонтрагента = СертификатСтруктура;
						
						Если НЕ СтруктураДокумента1С["is_owner"] Тогда
							ПодписьОтправителяId = ТекущаяПодпись["id"];
							ИнформацияОСертификатеОтправителя = ИнфоОСертификате;
						Иначе
							ПодписьПолучателяId = ТекущаяПодпись["id"];
							ИнформацияОСертификатеПолучателя = ИнфоОСертификате;
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ИННСертификата) Тогда
						Организация = НайтиОрганизациюПоИНН(ИННСертификата);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполним историю документа
		КоллекцияИстории = API.History();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДокументаПриИзменении(Элемент)
		
	УстановитьТипДокумента1С();
	УправлениеВидимостьюДоступностьюЭлементов();	
	
	ЭтоЗаявка = (НРег(ТипДокумента) = "договор-заявка"
		ИЛИ НРег(ТипДокумента) = "заявка"
		ИЛИ НРег(ТипДокумента) = "заказ");

	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьТипДокумента1С()
	
	ЭтоСчетФактура = НРег(ТипДокумента) = "счет-фактура";
	
	ЭтоЗаявка = (НРег(ТипДокумента) = "договор-заявка"
		ИЛИ НРег(ТипДокумента) = "заявка"
		ИЛИ НРег(ТипДокумента) = "заказ"
		ИЛИ НРег(ТипДокумента) = "заказ (договор-заявка)");

	ИмяФормыВыбораДокумента = "";
	
	Если ЭтоСчетФактура Тогда
		ОписаниеТипаСФ = Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный");
		ДокументСсылка = ОписаниеТипаСФ.ПривестиЗначение(ДокументСсылка);
		
		ИмяФормыВыбораДокумента = "Документ.СчетФактураВыданный.ФормаВыбора"
		
	ИначеЕсли НРег(ТипДокумента) = "акт" ИЛИ НРег(ТипДокумента) = "накладная" Тогда
		ОписаниеТипаРТиУ = Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг");
		ДокументСсылка = ОписаниеТипаРТиУ.ПривестиЗначение(ДокументСсылка);
		
		ИмяФормыВыбораДокумента = "Документ.РеализацияТоваровУслуг.ФормаВыбора"
		
	ИначеЕсли НРег(ТипДокумента) = "счет" Тогда
		ОписаниеТипаСчет = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю");
		ДокументСсылка = ОписаниеТипаСчет.ПривестиЗначение(ДокументСсылка);
		
		ИмяФормыВыбораДокумента = "Документ.СчетНаОплатуПокупателю.ФормаВыбора"
		
	ИначеЕсли ЭтоЗаявка Тогда
		
		Если СуществуетДокумент("новаЗаявкаЭкспедирования") Тогда
			ОписаниеТипаЗаявка = Новый ОписаниеТипов("ДокументСсылка.Бит_ЗаявкаЭкспедирования");
			ДокументСсылка = ОписаниеТипаЗаявка.ПривестиЗначение(ДокументСсылка);
			
			ИмяФормыВыбораДокумента = "Документ.новаЗаявкаЭкспедирования.ФормаВыбора"
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОтправитьЧерезАгента()
	
	Если Ложь И ЭтоЗаявка Тогда
		СтруктураДанных = СформироватьФайлЗаявкиНаСервере();
		ФайлИмя = СтруктураДанных.ИмяФайла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСсылка) ИЛИ ЗначениеЗаполнено(ФайлИмя) Тогда
		Если НЕ ЗначениеЗаполнено(ВладелецФормы.КаталогАгента) Тогда
			Сообщить("Не заполнен ""Каталог агента""");
			Возврат;
		КонецЕсли;
				
		КаталогДокумента = ВладелецФормы.КаталогАгента;//+"\"+Doc_ID;
		Каталог = Новый Файл(КаталогДокумента);
		Если Каталог.Имя <> "Outbox" Тогда
			КаталогДокумента = КаталогДокумента + "\" + "Outbox";
		КонецЕсли;
		
		СоздатьКаталог(КаталогДокумента);
		
    	СтруктураПараметров = ЗаполнитьСтруктуруОтправкиДляАгента();
		Doc_ID = СтруктураПараметров.Doc_ID;
		
		МассивФайлов = Новый Массив;
		
		Если ЭтоСчетФактура Тогда
			
			МассивСтрок = ВладелецФормы.Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", ВладелецФормы.АктивныйСертификат));
			
			Если МассивСтрок.Количество() > 0 Тогда
				
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("ТокенДиадок", МассивСтрок[0].token);
				ДопПараметры.Вставить("ИдентификаторОрганизации", МассивСтрок[0].edo_id);
				ДопПараметры.Вставить("ИдентификаторКонтрагента", edo_id);
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если Формализованный И ПустаяСтрока(ФайлИмя) Тогда
			ФайлXML = СформироватьДокумент1С(ДокументСсылка, Ложь);
			uid = Строка(Новый УникальныйИдентификатор);
			
			Файл = Новый Файл(ФайлXML);
			ПутьКФайлу = КаталогДокумента+"\"+Файл.Имя;
			
			ПереместитьФайл(ФайлXML, ПутьКФайлу);
			
			СтруктураXML = Новый Структура;
			СтруктураXML.Вставить("id", uid);
			СтруктураXML.Вставить("filename", Файл.Имя);
			МассивФайлов.Добавить(СтруктураXML);
			
		Иначе
			Если ЗначениеЗаполнено(ФайлИмя) Тогда
				uid = Строка(Новый УникальныйИдентификатор);
				
				ПутьКФайлу = КаталогДокумента+"\"+ФайлИмя;
				
				ФайлРасширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ФайлИмя);
				
				КопироватьФайл(ФайлИмя, КаталогДокумента+"\"+uid+"."+ФайлРасширение);
				
				Структура = Новый Структура;
				Структура.Вставить("id", uid);
				Структура.Вставить("filename", uid+"."+ФайлРасширение);
				МассивФайлов.Добавить(Структура);
			Иначе
				ФайлPDF = Служебный.ПечатьДокумента(ДокументСсылка, ID);
				uid = Строка(Новый УникальныйИдентификатор);
				
				ПутьКФайлу = КаталогДокумента+"\"+uid+".pdf";
				
				ПереместитьФайл(ФайлPDF, ПутьКФайлу);
				СтруктураPDF = Новый Структура;
				СтруктураPDF.Вставить("id", uid);
				СтруктураPDF.Вставить("filename", uid+".pdf");
				МассивФайлов.Добавить(СтруктураPDF);
			КонецЕсли;
		КонецЕсли;
	
		СтруктураПараметров.Вставить("files", МассивФайлов);
		
		СертификатОрганизации = ПредопределенноеЗначение("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка");
		Если ЗначениеЗаполнено(Организация) Тогда
			СертификатОрганизации = ВладелецФормы.НайтиСертификат(Организация);
		КонецЕсли; 
		
		СтруктураПараметров.Вставить("signer_inn", ПолучитьЗначениеРеквизита(Организация, "ИНН"));
		
		Файл = Новый Файл(ПутьКФайлу);
		
		Служебный.СформироватьКонфигурационныйФайл(СтруктураПараметров, КаталогДокумента+"\"+Файл.ИмяБезРасширения+".adacom");
		
		Сообщить("Отправлен документ "+ПутьКФайлу);

	Иначе
		
		Сообщить("Не выбран документ 1С");
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСсылкиНаОбъекты()
	
	Если ЗначениеЗаполнено(Id) Тогда
		
		ПозицияРазделителя = Найти(Id, ":");
		
		Если ПозицияРазделителя > 0 Тогда
			
			IdДокумента = Лев(Id, ПозицияРазделителя-1);
			Если ТипДокумента = "Счет" Тогда
				ДокументСсылка = Документы.СчетНаОплатуПокупателю.ПолучитьСсылку(Новый УникальныйИдентификатор(IdДокумента));
			ИначеЕсли ТипДокумента = "Акт" Тогда
				ДокументСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(IdДокумента));
			ИначеЕсли ТипДокумента = "Счет-фактура" Тогда
				ДокументСсылка = Документы.СчетФактураВыданный.ПолучитьСсылку(Новый УникальныйИдентификатор(IdДокумента));
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КонтрагентId) Тогда
			
			НайденныеКонтрагенты = НайтиКонтрагентаНаСервере(КонтрагентId);
			Если НайденныеКонтрагенты <> Неопределено И НайденныеКонтрагенты.Количество() = 1 Тогда
				Контрагент = НайденныеКонтрагенты[0].Значение;
				
			Иначе
				
				НайденныеКонтрагенты = НайтиКонтрагентаНаСервере(, КонтрагентИНН);
				Если НайденныеКонтрагенты <> Неопределено И НайденныеКонтрагенты.Количество() = 1 Тогда
					Контрагент = НайденныеКонтрагенты[0].Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СертификатКонтрагента) Тогда
			
			title = СертификатКонтрагента.Получить("title");
			Если ЗначениеЗаполнено(title) Тогда
				НаименованиеПоСертификату = СтрЗаменить(СтрЗаменить(title, "“", """"), "”","""");
				Если ЗначениеЗаполнено(НаименованиеПоСертификату) Тогда
					НайденныеКонтрагенты = НайтиКонтрагентаНаСервере(,,НаименованиеПоСертификату);
					
					НайденныеКонтрагенты = НайтиКонтрагентаНаСервере(,,НаименованиеПоСертификату);
					Если ЗначениеЗаполнено(НайденныеКонтрагенты) И НайденныеКонтрагенты.Количество() = 1 Тогда
						Контрагент = НайденныеКонтрагенты[0].Контрагент;
					Иначе
						Сообщить("Не найден контрагент с полным наименованием """+НаименованиеПоСертификату+"""");
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;			
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументСсылкаПриИзменении(Элемент)
	
	КонтрагентИзменился = ПриИзмененииДокументСсылка();
	
	Если КонтрагентИзменился Тогда
		ПриИзмененииКонтрагента();
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументСсылкаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		ДокументСсылка = Результат;
	КонецЕсли;
	
	КонтрагентИзменился = ПриИзмененииДокументСсылка();
	
	Если КонтрагентИзменился Тогда
		ПриИзмененииКонтрагента();
	КонецЕсли;
	
	УстановитьЗаголовокФормы();

КонецПроцедуры

&НаКлиенте
Процедура ДокументСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отбор = Новый Структура;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Отбор.Вставить("Контрагент", Контрагент)
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация)
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор,  РежимВыбора", Отбор, Истина);
	
	ОткрытьФорму(ИмяФормыВыбораДокумента, ПараметрыФормы,,,,, Новый ОписаниеОповещения("ДокументСсылкаНачалоВыбораЗавершение", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентIDОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат1С = API.Account(КонтрагентId);
	Если Результат1С = Неопределено Тогда
		Возврат;
	Иначе
		КонтрагентНаименование = Результат1С["name"];
		КонтактId = "";
		КонтактНаименование = "";
	КонецЕсли;
	ЗаполнитьКонтактыКонтрагента();
	НайтиВыбратьКонтрагента(КонтрагентId,, КонтрагентНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлИмяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СохранитьВложение(, Новый Структура("Операция" ,"Выбор"));
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложение(Значение = Неопределено, ДопПараметры = Неопределено) Экспорт
    
    Если ДопПараметры = Неопределено Тогда
        ДопПараметры = Новый Структура("Операция", "Выбор");
    ИначеЕсли НЕ ДопПараметры.Свойство("Операция") Тогда
        ДопПараметры.Вставить("Операция", "Выбор");
    КонецЕсли;

    Если ДопПараметры.Операция = "Выбор" Тогда
		
		// начало выбора из меню
		
		ДопПараметры.Вставить("Операция", "Сохранение");
        ПоказатьВыборИзМеню(Новый ОписаниеОповещения("СохранитьВложение", ЭтаФорма, ДопПараметры), Меню, Элементы.ФайлИмя);
		
    ИначеЕсли ДопПараметры.Операция = "Сохранение" Тогда

		// Сохранение файла
		
		Если ТипЗнч(Значение) <> Тип("ЭлементСпискаЗначений") Тогда
			Возврат;
		КонецЕсли;
		
		Если Значение.Значение = КонстЗагрузитьФайл Тогда
			
			Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ФайлИмя);
			ИмяВремФайла = API.GetAttachment(id, ФайлID, Расширение, ФайлИмя);
			ПолноеИмяФайла = ФайлИмя;
			
		ИначеЕсли Значение.Значение = КонстЗагрузитьАрхив Тогда
			
			Расширение = "zip";
			ИмяВремФайла = API.GetZip_Archive(id, ФайлИмя);
			ПолноеИмяФайла = ФайлИмя + ".zip";
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.Расширение = Расширение;
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ПолноеИмяФайла;
		ВыборФайла.Фильтр = "Все файлы (*."+Расширение+")|*."+Расширение;
		Если ВыборФайла.Выбрать() Тогда
			ПереместитьФайл(ИмяВремФайла, ВыборФайла.ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументВБазе()
	
	Файл = Новый Файл(ФайлИмя);
	Расширение = Файл.Расширение;
	
	ПутьКФайлу = API.GetAttachment(id, ФайлID, Расширение, ФайлИмя);
	
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектФайл = Новый Файл(ПутьКФайлу);
	Если НЕ ОбъектФайл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = СформироватьДокументВБазеНаСервере(ПутьКФайлу);
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ПерейтиПоНавигационнойСсылке(ПолучитьНавигационнуюСсылку(ДокументСсылка));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Комментарий = "")
	
	СтруктураВозврата = ОткрытьФорму(ПутьКФормам + "ФормаВводаКомментария", Новый Структура("Комментарий, МаксимальныйРазмерФайла", Комментарий, ВладелецФормы.МаксимальныйРазмерФайла),
		ЭтотОбъект,,,, Новый ОписаниеОповещения("КомментарииПослеВвода", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНаименованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если КонтрагентID = 0 Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ID", КонтрагентID);
	ФормаКонтрагента = ОткрытьФорму(ПутьКФормам+"ФормаКонтрагента", ПараметрыФормы, ВладелецФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНовойЗаявки()
	
	ПараметрыФормы = Новый Структура("ТипыТранспорта, Контрагент", ВладелецФормы.ТипыТранспорта, Контрагент);
	
	ОткрытьФорму(ПутьКФормам + "ФормаЗаявки", ПараметрыФормы, ЭтотОбъект,,, Новый ОписаниеОповещения("ПослеЗакрытияФормыЗаявки", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокумент(ДопПараметры = Неопределено)
	
	ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ФормаВыбора",, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ПодписатьДокументЗавершение", ЭтаФорма, ДопПараметры), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокументЗавершение(ВыбранныйСертификат, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйСертификат) И ДопПараметры.ПодписыватьДокумент Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры.ПодписыватьДокумент И ТипЗнч(ВыбранныйСертификат) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования")
		И НЕ ВыбранныйСертификат.Пустая() Тогда
		
		ДействителенДо = ПолучитьЗначениеРеквизита(ВыбранныйСертификат, "ДействителенДо");
		Если ДействителенДо < НачалоДня(ТекущаяДата()) Тогда
			ВызватьИсключение "Сертификат " + ВыбранныйСертификат + " просрочен!";
			Возврат;
		КонецЕсли;  
		
	КонецЕсли;
	
	
	//Если НЕ ДопПараметры.Свойство("ИмяФайла") Тогда
	//	ДопПараметры.Вставить("ИмяФайла", API.GetAttachment(id, ФайлID, Расширение, ФайлИмя));
	//КонецЕсли;
	
	Если ЭтоСчетФактура И ДопПараметры.Свойство("ИмяФайла") И НЕ ПустаяСтрока(ДопПараметры.ИмяФайла) Тогда
		
		Массив = ВладелецФормы.Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", ВладелецФормы.АктивныйСертификат));
		Если Массив.Количество() > 0 Тогда
			СтрокаСертификата = Массив[0];
		КонецЕсли;
		
		ДополнитьФайлПодписантом(ДопПараметры.ИмяФайла, ВыбранныйСертификат, СтрокаСертификата.ИНН);
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ИмяФайла") И ЗначениеЗаполнено(ДопПараметры.ИмяФайла) Тогда
		
		СтруктураОтвета = API.PostAttachment(id, ДопПараметры.ИмяФайла);
		
		ФлагУдаление = Ложь;
		ДопПараметры.Свойство("ФлагУдаление", ФлагУдаление);
		Если ФлагУдаление = Истина Тогда
			УдалитьФайлы(ДопПараметры.ИмяФайла);
		КонецЕсли;
		
		Если НЕ СтруктураОтвета = Неопределено Тогда
			Сообщить("Файл "+ПутьКФайлу+" успешно отправлен на сервер");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДопПараметры.Свойство("Отправлять") И ДопПараметры.Отправлять = Истина И НЕ API.SendDocument(id, КонтрагентId, КонтактId) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДопПараметры.ПодписыватьДокумент Тогда
		Подписан = API.Sign(id, ВыбранныйСертификат);
	КонецЕсли;
	
	ТокенДиадок = "";
	Если НРег(ТипДокумента) = "счет-фактура" И ТипЗнч(ДопПараметры) = Тип("Структура")
		И ДопПараметры.Свойство("ТокенДиадок", ТокенДиадок) Тогда
			
		ОтправитьВФНС(ВладелецФормы.АктивныйСертификат, ДопПараметры.ТокенДиадок);
		
	КонецЕсли;
	
	ОбновитьДанныеДокумента();
	УправлениеВидимостьюДоступностьюЭлементов();
	
	//НеобходимоОбновитьСписок = Истина;

	Если ДопПараметры.Свойство("ЗакрытьФорму") И ДопПараметры.ЗакрытьФорму Тогда
		Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкиМаршрутаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		ТекДанные = Элементы.ТочкиМаршрута.ТекущиеДанные;
		ТекДанные.uid = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкиМаршрутаПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ТочкиМаршрута.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.uid) Тогда
		Элементы.Грузы.ОтборСтрок = Новый ФиксированнаяСтруктура("uid_ТочкиМаршрута", ТекДанные.uid);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекТочкаМаршрута = Элементы.ТочкиМаршрута.ТекущиеДанные;
		Элементы.Грузы.ТекущиеДанные.uid_ТочкиМаршрута = ТекТочкаМаршрута.uid;
		
		Если НЕ Копирование Тогда
			Элементы.Грузы.ТекущиеДанные.Количество = 1;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКоманд

&НаКлиенте
Процедура КомандаСохранить(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьДокумент(, Новый Структура("ПодписыватьДокумент, Отправлять", Ложь, Ложь));
	ОбновитьДанныеДокумента(Ложь);
	УправлениеВидимостьюДоступностьюЭлементов();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправить(Команда)
	
	ОтправитьДокумент(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписатьИОтправить(Команда)
	
	ОтправитьДокумент(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУтвердить(Команда)
	
	API.Approve(id);
	ОбновитьДанныеДокумента();
	
	УправлениеВидимостьюДоступностьюЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтклонить(Команда)
	
	Причина = "";
	ПоказатьВводСтроки(Новый ОписаниеОповещения("КомандаОтклонитьЗавершение", ЭтаФорма),
		Причина, "Укажите причину отклонения",, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтклонитьЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Строка) Тогда
		API.Decline(id, Строка);
		Закрыть(Истина);
		//Было: ОбновитьДанныеДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписать(Команда)
	
	ДопПараметры = Новый Структура("ЗакрытьФорму, ПодписыватьДокумент", Ложь, Истина);
	
	СертификатСсылка = ВладелецФормы.ПолучитьАктивныйСертификат();
	Если ТипЗнч(СертификатСсылка) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") И НЕ СертификатСсылка.Пустая() Тогда
		ПодписатьДокументЗавершение(СертификатСсылка, ДопПараметры);
	Иначе
		ПодписатьДокумент(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПечать(Команда)
	
	Если НЕ (Найти(Расширение, "xml") ИЛИ Найти(Расширение, "zip")) Тогда
		Возврат
	КонецЕсли;
	
	Если ЭтоЗаявка Тогда
		
		КоллекцияПечатныхФорм = СформироватьПечатнуюФормуНаСервере();
		
		Если КоллекцияПечатныхФорм <> Неопределено Тогда
			ПечатьДокументов(КоллекцияПечатныхФорм);
		КонецЕсли;
		
	Иначе
		
		ИмяВремФайла = API.GetAttachment(id, ФайлID, Расширение);
		
		Если ЗначениеЗаполнено(ИмяВремФайла) Тогда
			
			Попытка
				
				КоллекцияПечатныхФорм = СформироватьПечатнуюФормуНаСервере(ИмяВремФайла);
				
				Если КоллекцияПечатныхФорм <> Неопределено Тогда
					ПечатьДокументов(КоллекцияПечатныхФорм);
				КонецЕсли;
				
			Исключение
				Сообщить("Не удалось напечатать файл: "+ИмяВремФайла);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСформироватьДокументВБазе(Команда)
	
	СформироватьДокументВБазе();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьID(Команда)
	
	Если ЗначениеЗаполнено(Контрагент) И КонтрагентId > 0 Тогда
		Сохранить_ATI_DOC_ID_Контрагента(Контрагент, КонтрагентID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьКонтрагента(Команда)
	
	Контрагент = Служебный.СоздатьКонтрагента(КонтрагентID);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьКомментарий(Команда)
	
	ДобавитьКомментарий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаявки(Команда)
	
	Если ЗначениеЗаполнено(ФайлИмя) Тогда
		
		ИмяВремФайла = API.GetAttachment(id, ФайлID, "xml", ФайлИмя);
		
		ПараметрыФормы = Новый Структура("ФайлИмя", ИмяВремФайла);
		
		ОткрытьФорму(ПутьКФормам + "ФормаЗаявки", ПараметрыФормы, ЭтотОбъект);
		
	Иначе
		
		ОткрытьФормуНовойЗаявки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьНаКомментарий(Команда)
	
	ТекДанные = Элементы.Комментарии.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДобавитьКомментарий("[i]"+ТекДанные.Комментарий+"[/i]"+Символы.ПС);
	Иначе
		Сообщить("Не выбран комментарий для ответа");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокумент(Команда)
	
	ОбновитьДанныеДокумента();
	ЗаполнитьСсылкиНаОбъекты();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкачатьПодписьОтправителя(Команда)
	
	Если ЗначениеЗаполнено(ПодписьОтправителяId) Тогда
		Расширение = ".sig";
		ИмяВремФайла = API.GetSign(id, ФайлID, ПодписьОтправителяId);

		Если ЗначениеЗаполнено(ИмяВремФайла) Тогда
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ВыборФайла.Расширение = Расширение;
			ВыборФайла.МножественныйВыбор = Ложь;
			ВыборФайла.ПолноеИмяФайла = ФайлИмя+".sig";
			ВыборФайла.Фильтр = "Все файлы (*"+Расширение+")|*"+Расширение;
			Если ВыборФайла.Выбрать() Тогда
				ПереместитьФайл(ИмяВремФайла, ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкачатьПодписьПолучателя(Команда)
	
	Если ЗначениеЗаполнено(ПодписьПолучателяId) Тогда	
		Расширение = ".sig";
		ИмяВремФайла = API.GetSign(id, ФайлID, ПодписьПолучателяId);
		Если ЗначениеЗаполнено(ИмяВремФайла) Тогда
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ВыборФайла.Расширение = Расширение;
			ВыборФайла.МножественныйВыбор = Ложь;
			ВыборФайла.ПолноеИмяФайла = ФайлИмя+".sig";
			ВыборФайла.Фильтр = "Все файлы (*"+Расширение+")|*"+Расширение;
			Если ВыборФайла.Выбрать() Тогда
				ПереместитьФайл(ИмяВремФайла, ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКарта(Команда)
	
	ОчиститьСообщения();
	
	Сообщить("Еще не реализована");
	Возврат;
	
	ОткрытьФорму(ПутьКФормам+"КартаГуглУпр");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьВФНС(Команда)
	
	//ОтправитьВФНС(ВладелецФормы.Сертификаты[0].token)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Файл = Новый Файл(ПутьКФайлу);
	Диалог.Каталог = Файл.Путь;
	
	Диалог.ПолноеИмяФайла = ПутьКФайлу;
	
	Если Диалог.Выбрать() Тогда
		ВыбранныйФайл = Новый Файл(Диалог.ПолноеИмяФайла);
		МаксРазмер = ВладелецФормы.МаксимальныйРазмерФайла;
		Если ВыбранныйФайл.Размер()/1024/1024 > МаксРазмер Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Выбранный файл превышает максимальный размер "+МаксРазмер+"Мб";
			Сообщение.Поле = "ИмяФайла"; //имя реквизита 
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
		
		ПутьКФайлу = Диалог.ПолноеИмяФайла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КонтрагентId = ВыбранноеЗначение["id"];
		КонтрагентНаименование = ВыбранноеЗначение["name"]+" ("+ВыбранноеЗначение["id"]+")";
		
		Результат1С = API.Account(КонтрагентId);
		КонтрагентИНН = Результат1С["inn"];
		КонтрагентКПП = Результат1С["kpp"];

		ЗаполнитьКонтактыКонтрагента();
		
		ЗаполнитьСертификатыКонтрагента();
		
	КонецЕсли;
	
	НайтиВыбратьКонтрагента(КонтрагентId, КонтрагентИНН, КонтрагентНаименование);	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНаименованиеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Результат1С = API.Search(Текст);
	Если Результат1С = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;
	Для каждого НайденныйКонтрагент Из Результат1С Цикл
		
		СтатусКабинетаДиадок = "";
		
		Добавлять = Истина;
		Если ТипДокумента = "Счет-фактура" Тогда
	        Добавлять = Истина ИЛИ (НайденныйКонтрагент["has_diadoc_cabinet"] = Истина);
		КонецЕсли;
		
		Если Добавлять Тогда
			ДанныеВыбора.Добавить(НайденныйКонтрагент, НайденныйКонтрагент["name"]+" (Код: "+НайденныйКонтрагент["id"]+")");
		КонецЕсли;
		
		Если Результат1С.Количество() = 1 Тогда
			КонтрагентНаименованиеОбработкаВыбора(Элементы.КонтрагентНаименование, НайденныйКонтрагент, Истина);
		КонецЕсли;

	КонецЦикла;
	
	Элемент.СписокВыбора.Очистить();
	Для каждого Элем Из ДанныеВыбора Цикл
		Элемент.СписокВыбора.Добавить(Элем.Значение, Элем.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНаименованиеОкончаниеВводаТекстаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Результат1С = ДополнительныеПараметры.Результат1С;
	СписокКонтрагентов = ДополнительныеПараметры.СписокКонтрагентов;
	
	КонтрагентНаименованиеОкончаниеВводаДействие(ВыбранныйЭлемент, Результат1С);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНаименованиеОкончаниеВводаДействие(Знач ВыбранныйЭлемент, Знач Результат1С)
	
	Перем Значение;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматФайлаПриИзменении(Элемент)
	
	Формализованный = (ФорматФайла = "XML");
	
	УправлениеВидимостьюДоступностьюЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLДокументСформирован(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КодировкаПриИзменении(Элемент)
	
	ВыходнойФайл = API.GetAttachment(id, ФайлID, "txt", ФайлИмя);
	
	ФорматироватьXML(ВыходнойФайл, Кодировка);
	
	УдалитьФайлы(ВыходнойФайл);
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкиМаршрутаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		ДанныеСтроки.Дата = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкиМаршрутаАдресОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ТочкиМаршрута.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Адрес) Тогда
		ЗапуститьПриложение("http://maps.yandex.ru/?text="+ТекДанные.Город+" "+ТекДанные.Адрес);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкиМаршрутаАдресПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТочкиМаршрута.ТекущиеДанные;
	Если ТекДанные<>Неопределено И ЗначениеЗаполнено(ТекДанные.Адрес) Тогда
		Координаты = Координаты_Гугл(ТекДанные.Город + " " + ТекДанные.Адрес);
		Если Координаты<>Неопределено Тогда
			ТекДанные.Широта = Координаты.Широта;
			ТекДанные.Долгота = Координаты.Долгота;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкиМаршрутаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Вызов формы ввода адреса
	СтандартнаяОбработка = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяРеквизита", "Адрес");
	
	ДанныеСтроки = Элементы.ТочкиМаршрута.ТекущиеДанные;
	Если (ДанныеСтроки = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Представление = ДанныеСтроки.Адрес;
	//Если Представление = УправлениеКонтактнойИнформациейКлиентСерверБП.ПредставлениеПустойГиперссылки() Тогда
		Представление = "";
	//КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"));
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ДанныеСтроки.ЗначенияПолей);
	ПараметрыОткрытия.Вставить("Представление", ДанныеСтроки.Адрес);
	//ПараметрыОткрытия.Вставить("Комментарий", ДанныеСтроки.Комментарий);
	ПараметрыОткрытия.Вставить("РедактированиеТолькоВДиалоге", Истина);
	ПараметрыОткрытия.Вставить("АдресТолькоРоссийский", Ложь);
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораАдреса", ЭтотОбъект, Новый Структура);
	Оповещение.ДополнительныеПараметры.Вставить("Результат",         Результат);
	Оповещение.ДополнительныеПараметры.Вставить("ДанныеСтроки",      ДанныеСтроки);
	Оповещение.ДополнительныеПараметры.Вставить("Элемент",           Элемент);
	Оповещение.ДополнительныеПараметры.Вставить("Форма",             ЭтотОбъект);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТочкиМаршрутаГородНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Вызов формы ввода КИ
	СтандартнаяОбработка = Ложь;
	
	// Если пришли впрямую после редактирования, то сбрасываем значение части адреса.
	//Если Элемент.ТекстРедактирования <> Элементы.ТочкиМаршрута.ТекущиеДанные[Элемент.Имя] Тогда
	//	УстановитьЗначениеЧастиАдреса(Элемент, Элемент.ТекстРедактирования);
	//КонецЕсли;
	
	
	ЧастьАдреса = ЧастьАдресаЭлемента(Элемент);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ФорматАдреса", "ФИАС");
	ПараметрыОткрытия.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	
	ПараметрыОткрытия.Вставить("Уровень",  ЧастьАдреса.Уровень);
	ПараметрыОткрытия.Вставить("Родитель", ИдентификаторРодителяЧастиАдресаЭлемента(ЧастьАдреса, ЧастиАдреса));
	ПараметрыОткрытия.Вставить("Родитель", "");
	
	// Текущий элемент
	ПараметрыОткрытия.Вставить("Идентификатор", ЧастьАдреса.Идентификатор);
	ПараметрыОткрытия.Вставить("Представление", ЧастьАдреса.Представление);
	
	ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма.ВыборАдресаПоУровню", ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораАдреса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ТочкиМаршрутаАдресПриИзменении(Неопределено);
		Возврат
	КонецЕсли;
	
	ДанныеСтроки = ДополнительныеПараметры.ДанныеСтроки;
	ДанныеСтроки.Адрес = Результат.Представление;
	ДанныеСтроки.ЗначенияПолей = Результат.КонтактнаяИнформация;
	
	ДанныеСтроки.Город = ПолучитьГородНаСервере(ДанныеСтроки.ЗначенияПолей);
	
	ТочкиМаршрутаАдресПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаСсылкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ЗаявкаСсылка) Тогда
		ЗаявкаСсылкаОбработкаВыбораНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиФИОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Элементы.ВодителиФИО.ОграничениеТипа = ОграничениеТипа;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиФИООчистка(Элемент, СтандартнаяОбработка)
	
	ОграничениеТипа = Новый ОписаниеТипов("Строка");
	Элементы.ВодителиФИО.ОграничениеТипа = ОграничениеТипа;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодителиФИООбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДанныеДокументов = ПолучитьДанныеВодителя(ВыбранноеЗначение);
	
	ЗаполнитьЗначенияСвойств(Элементы.Водители.ТекущиеДанные, ДанныеДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(id) Тогда
		
		ТекДанные = Элемент.ТекущиеДанные;
		
		Если Поле.Имя = "КомментарииВложение" И ЗначениеЗаполнено(ТекДанные.Вложение) Тогда
			
			Расширение = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ТекДанные.Вложение);
			
			ИмяВремФайла = API.GetAttachment(id, ТекДанные.ФайлИмя, Расширение, ТекДанные.Вложение);
			
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ВыборФайла.Расширение = Расширение;
			ВыборФайла.МножественныйВыбор = Ложь;
			ВыборФайла.ПолноеИмяФайла = ТекДанные.Вложение;
			ВыборФайла.Фильтр = "Все файлы (*"+Расширение+")|*"+Расширение;
			Если ВыборФайла.Выбрать() Тогда
				НачатьПеремещениеФайла(Новый ОписаниеОповещения("КомментарииВыборЗавершение", ЭтаФорма), ИмяВремФайла, ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
		ИначеЕсли Поле.Имя = "КомментарииКомментарий" Тогда	
			СтандартнаяОбработка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарииВыборЗавершение(ПеремещенныйФайл, ДополнительныеПараметры) Экспорт
КонецПроцедуры

&НаКлиенте
Процедура ДатаНомерПриИзменении(Элемент)
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Box_idПриИзменении(Элемент)
	
	Если ПустаяСтрока(Box_id) Тогда
		Возврат;
	КонецЕсли;
	
	Массив = СертификатыПолучателя.НайтиСтроки(Новый Структура("Box_id", Box_id));
	Если Массив.Количество() > 0 Тогда
		edo_id = Массив[0].edo_id;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДокументНажатие(Элемент)
	
	ЗапуститьПриложение("http://" + ВладелецФормы.АдресСервера + "/document/" + ID);
	
КонецПроцедуры


#КонецОбласти



// Подключаемые модули
&НаКлиенте
Перем JSON Экспорт;

&НаКлиенте
Перем API Экспорт;

&НаКлиенте
Перем Служебный Экспорт;

&НаКлиенте
Перем ПечатьДокументов Экспорт;

&НаКлиенте
Перем ИмяМодуляЭлДокументов Экспорт;

&НаКлиенте
Перем ИмяМодуляУправлениеВзаиморасчетами Экспорт;

&НаКлиенте
Перем СтруктураСправочники Экспорт;

&НаКлиенте
Перем МапИмяПапкиЗаголовок;

&НаСервере
Перем ФормаИнициализирована;

#Область СервернаяЛогика

&НаСервере
Функция ИмяФайла()
	
	ИмяФайла = РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла;
	ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла);
	
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция ПоместитьТабличныеЧастиВХранилище()
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресТабЧастейВХранилище) Тогда
		СтруктураТабЧастей = Новый Структура("ТипыДокументов", Объект.ТипыДокументов.Выгрузить());	
		АдресТабЧастейВХранилище = ПоместитьВоВременноеХранилище(СтруктураТабЧастей, УникальныйИдентификатор)
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруСтроки(ВыбраннаяСтрока)
	
	Перем Значение;
	
	Результат = Новый Структура;
	
	ДанныеСтроки = Объект.СписокДокументов.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПоляСтроки = ПолучитьРеквизиты("Объект.СписокДокументов");
	Для каждого Элемент Из ПоляСтроки Цикл
		ДанныеСтроки.Свойство(Элемент.Имя, Значение);
		Результат.Вставить(Элемент.Имя, Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСерверныйОбъект()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции

&НаСервере
Процедура ЗарегистрироватьВнешнююПечатнуюФормуНаСервере()
	
	СервОбъект = ПолучитьСерверныйОбъект();
	
	МакетОбработки = СервОбъект.ПолучитьМакет("МакетВнешняяПечатнаяФорма");
	ИмяФайлаОбработки = ПолучитьИмяВременногоФайла(".epf");
	МакетОбработки.Записать(ИмяФайлаОбработки);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка КАК ИдентификаторОбъектовМетаданных,
	|	ДополнительныеОтчетыИОбработкиНазначение.Ссылка КАК ПечатнаяФормаСсылка
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК ДополнительныеОтчетыИОбработкиНазначение
	|		ПО (ДополнительныеОтчетыИОбработкиНазначение.Ссылка.ИмяОбъекта = ""ОтправкаДокумента"")
	|			И ИдентификаторыОбъектовМетаданных.Ссылка = ДополнительныеОтчетыИОбработкиНазначение.ОбъектНазначения
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмя = ""Документ.РеализацияТоваровУслуг""";
	
	Запрос.УстановитьПараметр("ПредставлениеКнопки", "Отправить через АТИ-Доки");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ПечатнаяФормаСсылка) Тогда
		СпрОбъект = Выборка.ПечатнаяФормаСсылка.ПолучитьОбъект();
	Иначе
		СпрОбъект = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
	КонецЕсли;
	
	СпрОбъект.Назначение.Очистить();
	СпрОбъект.Команды.Очистить();
	
	СпрОбъект.Вид = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма");
	СпрОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаОбработки));   
	СпрОбъект.ИмяФайла = "ВнешняяОтправкаДокумента.epf";   
	СпрОбъект.Наименование = "Отправить через АТИ-Доки";
	СпрОбъект.ИмяОбъекта = "ОтправкаДокумента";
	СпрОбъект.Публикация = ПредопределенноеЗначение("Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется");
	СпрОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	СпрОбъект.Версия = "1.0";
	
	СтрПринадлежность = СпрОбъект.Назначение.Добавить();
	СтрПринадлежность.ОбъектНазначения = Выборка.ИдентификаторОбъектовМетаданных;
	
	СтрКоманда = СпрОбъект.Команды.Добавить();
	СтрКоманда.Идентификатор = "ПодписатьИОтправить";
	СтрКоманда.Представление = "(ATI-Доки) Подписать и отправить";
	
	СпрОбъект.Записать();	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьКонтрагентовСервер()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.user_id КАК User_ID,
	|	ТЗ.Наименование,
	|	ТЗ.ОПФ,
	|	ТЗ.Активен
	|ПОМЕСТИТЬ ВТ_Контрагенты
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство
	|ПОМЕСТИТЬ ВТ_Свойство
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Наименование = ""Код_АТИ""
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Контрагенты.User_ID,
	|	ВТ_Контрагенты.Наименование КАК Наименование,
	|	ВТ_Контрагенты.ОПФ,
	|	ВТ_Контрагенты.Активен,
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	ВТ_Контрагенты КАК ВТ_Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ПО ДополнительныеСведения.Объект = Контрагенты.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Свойство КАК ВТ_Свойство
	|			ПО ДополнительныеСведения.Свойство = ВТ_Свойство.Свойство
	|		ПО ((ВЫРАЗИТЬ(ВТ_Контрагенты.User_ID КАК ЧИСЛО(17, 5))) = ДополнительныеСведения.Значение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ТЗ", Объект.Контрагенты.Выгрузить());
	
	Объект.Контрагенты.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецФункции

&НаСервере
Процедура УстановитьТипСертификата()
	
	Возврат;
	
	Если Метаданные.Справочники.Найти("СертификатыКлючейЭлектроннойПодписиИШифрования") <> Неопределено Тогда
		
		ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования");
		
	ИначеЕсли Метаданные.Справочники.Найти("СертификатыЭП") <> Неопределено Тогда
		
		ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СертификатыЭП");
		
	КонецЕсли;
	
	Элементы.СертификатСсылка.ОграничениеТипа = ТипЗначения;
	СертификатСсылка = ТипЗначения.ПривестиЗначение(СертификатСсылка);
	
	Если НЕ ЗначениеЗаполнено(СертификатСсылка) Тогда
		
		МассивРеквизиты = ПолучитьРеквизиты();
		Для каждого Реквизит Из МассивРеквизиты Цикл
			Если Реквизит.Имя = "СертификатСсылка" Тогда
				ОписаниеТипа = Реквизит.ТипЗначения;
				МассивТипов = ОписаниеТипа.Типы();
				
				НужныйТип = Неопределено;
				Для каждого Тип Из МассивТипов Цикл
					Если НЕ Найти(XMLТип(Тип).ИмяТипа, "Удалить") Тогда
						НужныйТип = Тип;
						
						Массив = Новый Массив;
						Массив.Добавить(НужныйТип);
						
						Описание = Новый ОписаниеТипов(Массив);
						СертификатСсылка = Описание.ПривестиЗначение();
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ИнициализацияРеквизитов()
	
	//Если ФормаИнициализирована Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если ДокументовНаСтранице = 0 Тогда
		ДокументовНаСтранице = 10;
	КонецЕсли;
	
	Если МаксимальныйРазмерФайла = 0 Тогда
		МаксимальныйРазмерФайла = 10;
	КонецЕсли;
	
	Если ПустаяСтрока(АдресСервера) Тогда
		АдресСервера = "d.ati.docs";
	КонецЕсли;
	
	УстановитьТипСертификата();
	
	Если Метаданные.ОбщиеМодули.Найти("ЭлектронныеДокументыВнутренний") <> Неопределено Тогда
		
		Объект.ИмяМодуляЭлектронныеДокументыВнутренний = "ЭлектронныеДокументыВнутренний";
		Объект.ИмяМодуляЭлектронныеДокументыПереопределяемый = "ЭлектронныеДокументыПереопределяемый";
		Объект.ИмяМодуляЭлектронныеДокументыСлужебныйВызовСервера = "ЭлектронныеДокументыВызовСервера";
		Объект.ИмяМодуляЭлектронноеВзаимодействиеСлужебныйВызовСервера = "ЭлектронныеДокументыВызовСервера";
		
	ИначеЕсли Метаданные.ОбщиеМодули.Найти("ОбменСКонтрагентамиВнутренний") <> Неопределено Тогда	
		
		Объект.ИмяМодуляЭлектронныеДокументыВнутренний = "ОбменСКонтрагентамиВнутренний";
		Объект.ИмяМодуляЭлектронныеДокументыПереопределяемый = "ОбменСКонтрагентамиПереопределяемый";
		Объект.ИмяМодуляЭлектронныеДокументыСлужебныйВызовСервера = "ОбменСКонтрагентамиВызовСервера";
		Объект.ИмяМодуляЭлектронноеВзаимодействиеСлужебныйВызовСервера = "ЭлектронноеВзаимодействиеСлужебныйВызовСервера";
		
	КонецЕсли;
	
	ВыводитьВкладки = Истина;
	
	ФормаИнициализирована = Истина;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьАктуальныеСертификаты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СертификатыЭЦП.Ссылка,
	|	СертификатыЭЦП.Наименование КАК Наименование,
	|	СертификатыЭЦП.ДействителенДо
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыЭЦП
	|ГДЕ
	|	НЕ СертификатыЭЦП.ПометкаУдаления
	|	И НЕ СертификатыЭЦП.Отозван";
	
	СписокСертификатов = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСертификатов.Добавить(Выборка.Ссылка, ""+Выборка.Наименование+" ( действителен до "+Формат(Выборка.ДействителенДо, "ДФ=dd.MM.yyyy")+")");
	КонецЦикла;
	
	Возврат СписокСертификатов;	
	
КонецФункции

&НаСервере
Функция ЗаполнитьСертификатыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка) = 1
	|			ТОГДА МАКСИМУМ(СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сертификат
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	|		ПО (СертификатыКлючейЭлектроннойПодписиИШифрования.Организация = Организации.Ссылка)
	|			И (НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления)
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка";
	
	//СертификатыОрганизаций.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецФункции

&НаСервере
Функция ОпределитьОрганизацию(id) Экспорт
	
	Организация = Неопределено;
	Если ЗначениеЗаполнено(Id) Тогда
		СтруктураИдентификаторов = РеквизитФормыВЗначение("Объект").ПолучитьСтруктуруИдентификатора(ID, "_");
		Если СтруктураИдентификаторов.Свойство("ID") И СтруктураИдентификаторов.Свойство("Префикс") Тогда
			
			Если СтруктураИдентификаторов.Префикс = "Act" Тогда
				
				ДокументСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураИдентификаторов.ID));
				
			ИначеЕсли СтруктураИдентификаторов.Префикс = "Bill" Тогда				
				
				ДокументСсылка = Документы.СчетНаОплатуПокупателю.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураИдентификаторов.ID));
				
			ИначеЕсли СтруктураИдентификаторов.Префикс = "Invoice" Тогда				
				
				ДокументСсылка = Документы.СчетФактураВыданный.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураИдентификаторов.ID));
				
			КонецЕсли;
			
			Если ДокументСсылка <> Неопределено Тогда
				Если ДокументСсылка.ПолучитьОбъект() <> Неопределено Тогда
					Организация = ДокументСсылка.Организация;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

&НаСервере
Функция НайтиСертификат(Организация) Экспорт
	
	//Если ЗначениеЗаполнено(Организация) Тогда
	//	МассивСтрок = СертификатыОрганизаций.НайтиСтроки(Новый Структура("Организация", Организация));
	//	Если МассивСтрок.Количество() <> 0 Тогда
	//		Возврат МассивСтрок[0].Сертификат;
	//	КонецЕсли;
	//КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка");
	
КонецФункции

&НаСервере
Процедура ОтрисоватьПодменюТиповДокументов()
	
	МапТиповДокументов.Очистить();
	
	Для каждого ЭлТип Из ТипыДокументов Цикл
		
		ИмяЭлемента = "Отправить" + ПреобразоватьАлфавит((ТРег(ЭлТип.Наименование)));
		
		Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
			МапТиповДокументов.Добавить(ИмяЭлемента, ЭлТип.Наименование);
			Продолжить;
		КонецЕсли;
		
		Пункт = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Элементы.СписокДокументовПодменю);
		
		Команда = Команды.Найти(ИмяЭлемента);
		Если Команда = Неопределено Тогда
			Команда = Команды.Добавить(ИмяЭлемента);
			Команда.Действие = "КомандаСоздатьДокумент";
			Команда.Заголовок = ЭлТип.Наименование;
		КонецЕсли;
		
		Пункт.ИмяКоманды = ИмяЭлемента;
		
		МапТиповДокументов.Добавить(ИмяЭлемента, ЭлТип.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьАлфавит(Знач ВхСтрока)
	
	Результат = "";
	Для Инд = 1 По СтрДлина(ВхСтрока) Цикл
		
		Символ = Сред(ВхСтрока, Инд, 1);
		КодСимвола = КодСимвола(Символ);
		Если (КодСимвола >= 1040 И КодСимвола <= 1103) Тогда
			//ИЛИ (КодСимвола >= 48 И КодСимвола <= 57)
			Результат = Результат + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеВСтрокуВнутрНаСервере(Значение)
	
	Возврат ЗначениеВСтрокуВнутр(Значение)
	
КонецФункции

&НаСервере
Функция КонтактныеЛица_Выгрузить()
	
	Возврат ЗначениеВСтрокуВнутр(КонтактныеЛица.Выгрузить());
	
КонецФункции

&НаСервере
Функция КонтактныеЛица_Загрузить(АдресВХранилище)
	
	Если ЭтоАдресВременногоХранилища(АдресВХранилище) Тогда
		
		Таблица = ПолучитьИзВременногоХранилища(АдресВХранилище);
		
		Если ТипЗнч(Таблица) = Тип("ТаблицаЗначений") Тогда
			КонтактныеЛица.Загрузить(Таблица);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РасшифроватьТокены(Результат = Неопределено, Контекст = Неопределено) Экспорт
	
	Если Контекст = Неопределено Тогда
		 Контекст = Новый Структура("Фаза", "СозданиеМенеджера");
	КонецЕсли;
	
	Если Контекст.Фаза = "СозданиеМенеджера" Тогда
		
		Оповещение = Новый ОписаниеОповещения("РасшифроватьТокены", ЭтотОбъект, Контекст);
		Контекст.Вставить("Фаза", "Расшифровка");
		
		Попытка
			ЭлектроннаяПодписьСлужебныйКлиент.СоздатьМенеджерКриптографии(Оповещение, "Расшифровка");
		Исключение
			ВыполнитьОбработкуОповещения(Оповещение, Новый МенеджерКриптографии("", "", 75));
		КонецПопытки;
		
	ИначеЕсли Контекст.Фаза = "Расшифровка" Тогда	
		
		МенеджерКриптографии = Результат;
		
		Для каждого Стр Из Сертификаты Цикл
			
			Если ПустаяСтрока(Стр.ЗашифрованныйТокен) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Истина ИЛИ ПустаяСтрока(Стр.token) Тогда
				
				ПараметрыСертификата = API.ПолучитьДоступКСертификату(Стр.СертификатСсылка);
				
				Если ТипЗнч(ПараметрыСертификата) <> Тип("Структура") Тогда
					Продолжить;
					
				ИначеЕсли ПараметрыСертификата.ПарольПолучен Тогда
					
					МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПараметрыСертификата.ПарольПользователя;
					
					Попытка
						Стр.token = Base64Строка(МенеджерКриптографии.Расшифровать(Base64Значение(Стр.ЗашифрованныйТокен)));
						
						Стр.token = СтрЗаменить(Стр.token, Символы.ПС, "");
						Стр.token = СтрЗаменить(Стр.token, Символы.ВК, "");
						
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьСертификатыПослеРасшифровки();
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

#КонецОбласти

#Область КлиентскаяЛогика

&НаКлиенте
Процедура ДействияПриОткрытии()
	
	ТребуетсяИнициализация = ПустаяСтрока(Логин) И ПустаяСтрока(token);
	Если ТребуетсяИнициализация Тогда
		Параметры(Неопределено);
		Возврат
	КонецЕсли;
	
	Если НЕ ТребуетсяИнициализация Тогда
		
		//АдресСервера = "192.168.222.124:5000";
		//token = "6c6bf72c223941e0b58dbd8a2c025faf";
		
		ОбновитьДанныеАТИДоков();
		
		Если ВыводитьВкладки Тогда
			// для дерева папок вызывается автоматически событие "ПриАктивизацииСтроки"
			ЗаполнитьДокументыТекущейПапки();
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте 
Процедура УправлениеВидимостьюДоступностьюЭлементов()
	
	//Для каждого Элемент Из Элементы.СтраницыФормы.ПодчиненныеЭлементы Цикл
	//	
	//	Если Элемент.Имя <> "СтраницаПараметры" Тогда
	//		Элемент.Видимость = НЕ ТребуетсяИнициализация
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПапки(Результат1С) Экспорт
	
	Объект.ПапкиДокументов.Очистить();
	
	Для Каждого Поле Из Результат1С Цикл
		
		СтрПапка = Объект.ПапкиДокументов.Добавить();
		СтрПапка.Наименование = Поле.Ключ;
		СтрПапка.Заголовок = МапИмяПапкиЗаголовок.Получить(Поле.Ключ);
		
		Если ТипЗнч(Поле.Значение) = Тип("Массив") Тогда
			СтрПапка.ВсегоДокументов = Поле.Значение[0];
			СтрПапка.Обработать = Поле.Значение[1];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументыТекущейПапки()
	
	Если ВыводитьВкладки Тогда
		
		ИмяТекущейПапки = Элементы.ГруппаВкладкиПапок.ТекущаяСтраница.Имя;
		
	Иначе
		ТекДанные = Элементы.ДеревоПапок.ТекущиеДанные;
		ИмяТекущейПапки = ТекДанные.name;
		
	КонецЕсли;
	
	Массив = Объект.ПапкиДокументов.НайтиСтроки(Новый Структура("Наименование", ИмяТекущейПапки));
	
	Если Массив.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ТекДанные = Массив[0];
	
	СтрокаТекущейПапки = Объект.ПапкиДокументов.Индекс(ТекДанные);
	
	Если ТекДанные <> Неопределено Тогда
		
		ТекущийСдвиг = 0;
		Результат1С = API.Documents(ИмяТекущейПапки, ТекДанные.Сдвиг, ДокументовНаСтранице);
		
		Служебный.ЗаполнитьДокументы(Результат1С);
		
		СформироватьНадписьЛожнойКнопки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Функция ПолучитьПолноеИмяФормы(ИмяФормы)
	
	СимволТочка = ".";
	ПозицияТочки = СтрДлина(ЭтаФорма.ИмяФормы);
	Пока Сред(ЭтаФорма.ИмяФормы, ПозицияТочки, 1) <> СимволТочка Цикл ПозицияТочки = ПозицияТочки - 1; КонецЦикла; //
	Возврат Лев(ЭтаФорма.ИмяФормы, ПозицияТочки) + ИмяФормы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМодульПечатиДокументов()
	
	Если ИмяКонфигурации = "БухгалтерияПредприятия" Тогда
		
		Если РедакцияКофигурации = "3.0" Тогда
			
			Возврат ПолучитьФорму(ПутьКФормам+"ПечатьДокументовБП30",, ЭтаФорма);
			
		ИначеЕсли РедакцияКофигурации = "2.0" Тогда
			
			Возврат ПолучитьФорму(ПутьКФормам+"ПечатьДокументовБП20",, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВызватьИсключение "Функции печати будут недоступны";
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяМодуляЭлДокументов() Экспорт
	
	Если ИмяКонфигурации = "БухгалтерияПредприятия" Тогда
		
		Если РедакцияКофигурации = "3.0" Тогда
			
			Возврат "ЭлектроннаяПодписьКлиентСервер"
			
		ИначеЕсли РедакцияКофигурации = "2.0" Тогда
			
			Возврат "ЭлектроннаяЦифроваяПодписьКлиентСервер"
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВызватьИсключение "Не обнаружен общий модуль ""ЭлектроннаяЦифроваяПодписьКлиентСервер""";	
	
КонецФункции

&НаКлиенте
Процедура СформироватьДеревоПапок()
	
	ДеревоПапок.ПолучитьЭлементы().Очистить();
	
	СтрВсеДокументы = ДеревоПапок.ПолучитьЭлементы().Добавить();
	СтрВсеДокументы.Наименование = "Все документы";
	СтрВсеДокументы.name = "documents";
	
	СтрВходящие = СтрВсеДокументы.ПолучитьЭлементы().Добавить();
	СтрВходящие.Наименование = "Входящие";
	СтрВходящие.name = "inbox";
	
	СтрВходящие_ОжидаютРешения = СтрВходящие.ПолучитьЭлементы().Добавить();
	СтрВходящие_ОжидаютРешения.Наименование = "Ожидают решения";
	СтрВходящие_ОжидаютРешения.name = "waiting_in";
	
	СтрИсходящие = СтрВсеДокументы.ПолучитьЭлементы().Добавить();
	СтрИсходящие.Наименование = "Исходящие";
	СтрИсходящие.name = "outbox";
	
	СтрИсходящие_ОжидаютРешения = СтрИсходящие.ПолучитьЭлементы().Добавить();
	СтрИсходящие_ОжидаютРешения.Наименование = "Ожидают решения";
	СтрИсходящие_ОжидаютРешения.name = "waiting";
	
	СтрИсходящие_ОжидаютРешения_Вашего = СтрИсходящие_ОжидаютРешения.ПолучитьЭлементы().Добавить();
	СтрИсходящие_ОжидаютРешения_Вашего.Наименование = "Вашего";
	СтрИсходящие_ОжидаютРешения_Вашего.name = "waiting_in";
	
	СтрИсходящие_ОжидаютРешения_ДругойСтороны = СтрИсходящие_ОжидаютРешения.ПолучитьЭлементы().Добавить();
	СтрИсходящие_ОжидаютРешения_ДругойСтороны.Наименование = "Другой стороны";
	СтрИсходящие_ОжидаютРешения_ДругойСтороны.name = "waiting_out";
	
	СтрОдобренные = ДеревоПапок.ПолучитьЭлементы().Добавить();
	СтрОдобренные.Наименование = "Одобренные";
	СтрОдобренные.name = "approved";
	
	СтрОтклоненные = ДеревоПапок.ПолучитьЭлементы().Добавить();
	СтрОтклоненные.Наименование = "Отклоненные";
	СтрОтклоненные.name = "declined";
	
	СтрАрхив = ДеревоПапок.ПолучитьЭлементы().Добавить();
	СтрАрхив.Наименование = "Архив";
	СтрАрхив.name = "archive";
	
	СтрКорзина = ДеревоПапок.ПолучитьЭлементы().Добавить();
	СтрКорзина.Наименование = "Корзина";
	СтрКорзина.name = "deleted";
	
	СтрЧерновики = ДеревоПапок.ПолучитьЭлементы().Добавить();
	СтрЧерновики.Наименование = "Черновики";
	СтрЧерновики.name = "drafts";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПапок()
	
	Если ПустаяСтрока(token) Тогда
		Возврат
	КонецЕсли;
	
	Результат1С = API.Mailbox();
	
	Если ЗначениеЗаполнено(Результат1С) Тогда
		
		ЗаполнитьПапки(Результат1С);
		
		Для каждого Вкладка Из Элементы.ГруппаВкладкиПапок.ПодчиненныеЭлементы Цикл
			
			Имя = Вкладка.Имя;
			МассивСтрок = Объект.ПапкиДокументов.НайтиСтроки(Новый Структура("Наименование", Имя));
			СтрПапка = МассивСтрок[0];
			
			Если Имя = "archive" ИЛИ Имя = "deleted" Тогда
				ЗаголовокВкладки = СтрПапка.Заголовок;
				
			Иначе	
				ЗаголовокВкладки = СтрПапка.Заголовок + ?(СтрПапка.Обработать = 0, "", " ("+Формат(СтрПапка.Обработать, "ЧДЦ=")+")");
			КонецЕсли;
			
			Если Имя = "documents" Тогда
				СтрокаФиксДлины = ЗаголовокВкладки;
				ЗаголовокВкладки = СтрокаФиксДлины;
			КонецЕсли;
			
			Вкладка.Заголовок = ЗаголовокВкладки;
			
		КонецЦикла;
		
		ЗаполнитьДеревоРекурсивно(ДеревоПапок);
		
		ЗаполнитьДокументыТекущейПапки();
		СформироватьНадписьЛожнойКнопки();
		
		//Для каждого Стр Из ДеревоПапок.ПолучитьЭлементы() Цикл
		//	Элементы.ДеревоПапок.Развернуть(Стр.ПолучитьИдентификатор(), Истина);
		//КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоРекурсивно(Элемент)
	
	Для каждого ПапкаВДереве Из Элемент.ПолучитьЭлементы() Цикл
		
		Имя = ПапкаВДереве.Name;
		МассивСтрок = Объект.ПапкиДокументов.НайтиСтроки(Новый Структура("Наименование", Имя));
		СтрПапка = МассивСтрок[0];
		
		ПапкаВДереве.НаименованиеПолное = ПапкаВДереве.Наименование + ?(СтрПапка.Обработать=0, "", " ("+Формат(СтрПапка.Обработать, "ЧДЦ=")+")");
		ПапкаВДереве.ВсегоДокументов = СтрПапка.ВсегоДокументов;
		ПапкаВДереве.Обработать = СтрПапка.Обработать;
		
		ЗаполнитьДеревоРекурсивно(ПапкаВДереве);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеАккаунта()
	
	Результат1С = API.Account();
	
	Если Результат1С = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	UserID = Результат1С["ati_id"];
	Заголовок = "АТИ-Доки (" + Результат1С["name"] + ")"; 
	
	ИнформацияОКомпании = Служебный.СформироватьИнформациюОбАккаунте(Результат1С, Истина);
	
	КонтактныеЛица.Очистить();
	Для Каждого КЛ Из Результат1С["contacts"] Цикл
		
		СтрКЛ = КонтактныеЛица.Добавить();
		СтрКЛ.Наименование = КЛ.Значение["name"];
		СтрКЛ.id = КЛ.Значение["ati_id"];
		
		СтрКЛ.Email = КЛ.Значение.Получить("email");		
		СтрКЛ.Телефон = КЛ.Значение.Получить("phone");
		СтрКЛ.МобильныйТелефон = КЛ.Значение.Получить("mobile");
		СтрКЛ.Факс = КЛ.Значение.Получить("fax");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНадписьЛожнойКнопки()
	
	СтрокаПапки = Объект.ПапкиДокументов[СтрокаТекущейПапки];
	Если СтрокаПапки <> Неопределено Тогда
		ВсегоСтраниц = Цел(СтрокаПапки.ВсегоДокументов/ДокументовНаСтранице) + ?(СтрокаПапки.ВсегоДокументов%ДокументовНаСтранице>0, 1, 0);
		ТекущаяСтраница = Цел(СтрокаПапки.Сдвиг/ДокументовНаСтранице)+1;
		Элементы.ЛожнаяКнопка.Заголовок = ""+ТекущаяСтраница + " из " + ВсегоСтраниц;
		Элементы.КомандаНазад.Доступность = ТекущаяСтраница > 1;
		Элементы.КомандаВперед.Доступность = ТекущаяСтраница < ВсегоСтраниц;
	Иначе
		Элементы.ЛожнаяКнопка.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаМенюДействия(Документ, Папка)
	
	Возврат;
	
	Если Документ = Неопределено Тогда
		
		Элементы.КоманднаяПанельДокументы.Кнопки.ПодменюДействияСДокументом.Кнопки.Подписать.Доступность = Ложь;
		Элементы.КоманднаяПанельДокументы.Кнопки.ПодменюДействияСДокументом.Кнопки.ПоместитьВАрхив.Доступность = Ложь;
		Элементы.КоманднаяПанельДокументы.Кнопки.ПодменюДействияСДокументом.Кнопки.ВернутьИзАрхива.Доступность = Ложь;
		Элементы.КоманднаяПанельДокументы.Кнопки.ПодменюДействияСДокументом.Кнопки.ПоместитьВКорзину.Доступность = Ложь;
		Элементы.КоманднаяПанельДокументы.Кнопки.ПодменюДействияСДокументом.Кнопки.ВернутьИзКорзины.Доступность = Ложь;
		Элементы.КоманднаяПанельДокументы.Кнопки.ПодменюДействияСДокументом.Кнопки.ПроверитьПодпись.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.КоманднаяПанельДокументы.Кнопки.ПодменюДействияСДокументом.Кнопки.Подписать.Доступность = 
	Документ.ПравоПодписи И Документ.ЕстьВложения И НЕ Документ.Подписан;
	
	Элементы.КоманднаяПанельДокументы.Кнопки.ПодменюДействияСДокументом.Кнопки.ПроверитьПодпись.Доступность = Документ.Подписан ИЛИ Документ.ПодписанКонтрагентом;
	Элементы.КоманднаяПанельДокументы.Кнопки.ПроверитьПодпись.Доступность = Документ.Подписан ИЛИ Документ.ПодписанКонтрагентом;
	
	Элементы.КоманднаяПанельДокументы.Кнопки.ПодменюДействияСДокументом.Кнопки.ПоместитьВКорзину.Доступность = НЕ Папка.name = "deleted";
	Элементы.КоманднаяПанельДокументы.Кнопки.ПодменюДействияСДокументом.Кнопки.ВернутьИзКорзины.Доступность = Папка.name = "deleted";
	Элементы.КоманднаяПанельДокументы.Кнопки.ПодменюДействияСДокументом.Кнопки.ПоместитьВАрхив.Доступность = НЕ Папка.name = "archive";
	Элементы.КоманднаяПанельДокументы.Кнопки.ПодменюДействияСДокументом.Кнопки.ВернутьИзАрхива.Доступность = Папка.name = "archive";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеАТИДоков()
	
	//ФормаПроцесса = ПолучитьФорму(ПутьКФормам+"Ожидание");
	//ФормаПроцесса.Открыть();
	
	Если НЕ ПустаяСтрока(token) Тогда
		Попытка

			//ОбновитьСертификаты();

			ОбновитьДанныеАккаунта();
			СформироватьДеревоПапок();
			ОбновитьСписокПапок();
			
			ОбновитьСправочники();
			
			ОтрисоватьПодменюТиповДокументов();
			
		Исключение
			//ФормаПроцесса.Закрыть();
		КонецПопытки;
	КонецЕсли;
	
	//Если ФормаПроцесса.Открыта() Тогда
	//	ФормаПроцесса.Закрыть();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСправочники()
	
	//Если Не СтруктураСправочники.Получить("Города") <> Неопределено Тогда
	Результат1С_Справочники = API.References();
	
	Если Результат1С_Справочники = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если СтруктураСправочники = Неопределено Тогда
		СтруктураСправочники = Новый Структура;
	КонецЕсли;
	
	СтруктураСправочники.Вставить("Города", Города);
	СтруктураСправочники.Вставить("ОПФ", ОПФ);
	СтруктураСправочники.Вставить("ТипыДокументов", ТипыДокументов);
	СтруктураСправочники.Вставить("ТипыТранспорта", ТипыТранспорта);
	
	Служебный.ЗаполнитьСправочники(Результат1С_Справочники, СтруктураСправочники);
	//КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоискКонтрагентов()
	
	ОчиститьСообщения();
	
	Результат1С = API.Search(СтрокаПоиска);
	//Если НЕ ЗначениеЗаполнено(Результат1С) Тогда
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = "По вашему запросу нечего не найдено";
	//	Сообщение.Поле = "СтрокаПоиска"; //имя реквизита 
	//	Сообщение.Сообщить();
	//КонецЕсли;
	ЗаполнитьКонтрагентов(Результат1С);
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьКонтрагентов(Результат1С) Экспорт
	
	Если Результат1С = Неопределено Тогда
		Возврат
	КонецЕсли; 
	
	Объект.Контрагенты.Очистить();
	
	//Контрагенты = ВладелецФормы.РеквизитФормыВЗначение("Объект.Контрагенты");
	
	МассивКонтрагентов = Результат1С;
	
	Для Каждого Контрагент Из МассивКонтрагентов Цикл
		СтрКонтрагент = Объект.Контрагенты.Добавить();
		СтрКонтрагент.user_id = Контрагент["id"];
		СтрКонтрагент.Наименование = Контрагент["name"]+" ("+Контрагент["id"]+")";
		СтрКонтрагент.ОПФ = Контрагент["ownership"];
		СтрКонтрагент.Активен = (Контрагент["activated"] <> Ложь);
	КонецЦикла;
	
	ЗаполнитьКонтрагентовСервер();
	
	//ВладелецФормы.ЗначениеВРеквизитФормы(Контрагенты, "Объект.Контрагенты");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьВкладокПапок()
	
	Элементы.ГруппаВкладкиПапок.Видимость = ВыводитьВкладки;
	Элементы.ДеревоПапок.Видимость = НЕ ВыводитьВкладки;
	
КонецПроцедуры 

&НаКлиенте
Процедура РедактироватьДокумент(ДанныеСтроки)
	
	ПараметрыФормы = Новый Структура("ПутьКФормам, ID, ЗакрыватьПриЗакрытииВладельца", ПутьКФормам, ДанныеСтроки.ID, Истина);
	НеобходимоОбновить = Ложь;
	
	ОткрытьФорму(ПутьКФормам+"ФормаДокумента", ПараметрыФормы, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ФормаДокументаПослеЗакрытия", ЭтаФорма, Новый Структура("НеобходимоОбновить", НеобходимоОбновить)));
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСертификаты() Экспорт
	
	//Сертификаты.Очистить();
	Для каждого Стр Из Сертификаты Цикл
		Стр.Удалить = Истина;
	КонецЦикла;
	
	СписокСертификатов = API.Certificates_Get();
	
	Если ТипЗнч(СписокСертификатов) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СписокСертификатов) Тогда
		
		Для Каждого СертификатЭлемент Из СписокСертификатов Цикл
			
			Массив = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", СертификатЭлемент["id"]));
			Если Массив.Количество() = 0 Тогда
				СтрСертифкат = Сертификаты.Добавить();
				СтрСертифкат.ДатаОкончания = ТекущаяДата()+120*60;
			Иначе
				СтрСертифкат = Массив[0];
				СтрСертифкат.Удалить = Ложь;
			КонецЕсли;
			
			СтрСертифкат.Отпечаток = СертификатЭлемент["id"];
			СтрСертифкат.Наименование = СертификатЭлемент["title"];
			
			ИНН = СертификатЭлемент["components"]["INN"];
			Если Лев(ИНН, 2) = "00" Тогда
				ИНН = Сред(ИНН, 3)
			КонецЕсли;
			СтрСертифкат.ИНН = ИНН;
			
			СтрСертифкат.Организация = СертификатЭлемент["components"]["O"];
			СтрСертифкат.ДействителенС = Служебный.СтрокаВДату(СертификатЭлемент["valid_from"]);
			СтрСертифкат.ДействителенПо = Служебный.СтрокаВДату(СертификатЭлемент["valid_until"]);
			
			Свойства = СертификатЭлемент["components"];
			
			Если СертификатЭлемент["extra"] <> Неопределено Тогда
				Если ПустаяСтрока(Свойства["OGRN"]) Тогда
					
					Свойства.Вставить("OGRN", СертификатЭлемент["extra"]["ogrn"]);
					
				КонецЕсли;
				
				Свойства.Вставить("ifns", СертификатЭлемент["extra"]["ifns"]);
				Свойства.Вставить("region_code", СертификатЭлемент["extra"]["region_code"]);
				Свойства.Вставить("comment", СертификатЭлемент["extra"]["comment"]);
				
			КонецЕсли;
			
			СтрСертифкат.Свойства = ЗначениеВСтрокуВнутрНаСервере(СертификатЭлемент["components"]);
			СтрСертифкат.extra = ЗначениеВСтрокуВнутрНаСервере(СертификатЭлемент["extra"]);
	
			СтрСертифкат.Представление = СертификатЭлемент["title"];
			СтрСертифкат.Отпечаток = СертификатЭлемент.Получить("id");
			
			Если СертификатЭлемент["integrator"] <> Неопределено Тогда
				
				СтрСертифкат.СтатусКабинетаВДиадок = СертификатЭлемент["integrator"]["status"];
				СтрСертифкат.СтатусКод = СертификатЭлемент["integrator"]["status_code"];
				
				СтрСертифкат.Box_ID = СертификатЭлемент["integrator"]["Box_ID"];
				СтрСертифкат.edo_id = СертификатЭлемент["integrator"]["edo_id"];
				
			КонецЕсли;
			
			// Проверка перед подачей заявления в ФНС
			СтрСертифкат.РеквизитыЗаполнены = СертификатЭлемент["extra"] <> Неопределено
				И НЕ ПустаяСтрока(СертификатЭлемент["extra"]["ifns"])
				И НЕ ПустаяСтрока(СертификатЭлемент["extra"]["ogrn"])
				И НЕ ПустаяСтрока(СертификатЭлемент["extra"]["region_code"]);
			
			Если СтрСертифкат.Отпечаток = АктивныйСертификат И (ПустаяСтрока(СтрСертифкат.token) ИЛИ ПустаяСтрока(СтрСертифкат.edo_id) ИЛИ (СтрСертифкат.ДатаОкончания-10*60) <= ТекущаяДата()) Тогда
				
				Результат1С = API.Certificate_Token_Get(СтрСертифкат.Отпечаток);
				
				Если Результат1С <> Неопределено Тогда
					СтрСертифкат.ЗашифрованныйТокен = Результат1С.Получить("token");
					СтрСертифкат.token = "";
					СтрСертифкат.ДатаОкончания = ТекущаяДата()+120*60;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		РасшифроватьТокены();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСертификатыПослеРасшифровки() Экспорт
	
	Для каждого Стр Из Сертификаты Цикл
		
		Если Стр.Отпечаток <> АктивныйСертификат Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Стр.token) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Стр.СтатусКод = "not_registered" Тогда
			Результат1С = API.Certificate_Token_Login(Стр.Отпечаток, Стр.token);
		КонецЕсли;
		
		Если Стр.СтатусКод = "activation_pending" Тогда
			Результат1С = API.IFNS_UpdateStatus(Стр.Отпечаток, Стр.token);
			
			Если Результат1С <> Неопределено Тогда
				Стр.СтатусКод = Результат1С;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивКУдалению = Сертификаты.НайтиСтроки(Новый Структура("Удалить", Истина));
	Для Каждого Элемент Из МассивКУдалению Цикл
		Сертификаты.Удалить(Элемент);
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("ПолучитьСервисныеСообщения", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатСохранитьКомментарий(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		Попытка
			API.Certificate_MetaData_Set(ДополнительныеПараметры.Отпечаток, ДополнительныеПараметры);
		Исключение
			Сообщить(ОписаниеОшибки())
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияПараметров(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда 
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Результат);
		Объект.ПутьКФункцииДанныеЗаявки = Результат.ПутьКФункцииДанныеЗаявки;
		Объект.ПутьКФункцииФормированияЗаявки = Результат.ПутьКФункцииФормированияЗаявки;		
	КонецЕсли;
	
	НеобходимоОбновитьСписок = Ложь;
	НеобходимоПерелогиниться = Ложь;
	НеобходимоОбновитьВидимостьПапок = Ложь;
	
	ДополнительныеПараметры.Свойство("НеобходимоОбновитьСписок", НеобходимоОбновитьСписок);
	ДополнительныеПараметры.Свойство("НеобходимоПерелогиниться", НеобходимоПерелогиниться);
	ДополнительныеПараметры.Свойство("НеобходимоОбновитьВидимостьПапок", НеобходимоОбновитьВидимостьПапок);
	
	Если НеобходимоПерелогиниться <> Неопределено И НеобходимоПерелогиниться Тогда
		ПодключитьсяКСерверуАТИДоков();
	КонецЕсли;
	
	Если НеобходимоОбновитьСписок <> Неопределено И НеобходимоОбновитьСписок Тогда
		ОбновитьСписокПапок();
	КонецЕсли;
	
	Если НеобходимоОбновитьВидимостьПапок <> Неопределено И НеобходимоОбновитьВидимостьПапок Тогда
		ВидимостьВкладокПапок();
	КонецЕсли;

	ОтключитьОбработчикОжидания("ПолучитьСервисныеСообщения");
	
	Если ПолучатьСервисныеСообщения Тогда
		ПодключитьОбработчикОжидания("ПолучитьСервисныеСообщения", 100);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруВозврата() Экспорт

	СтруктураВозврата = Новый Структура(
	
		"token,
		|UserID,
		|ИнформацияОКомпании,
		|АвторегистрацияДополнительнойОбработки,
		|АдресСервера,
		|ДокументовНаСтранице,
		|ИспользоватьЗащищенноеСоединение,
		|КаталогАгента,
		|Логин,
		|ОтправлятьСообщенияОбОшибках,
		|ОтправлятьЧерезАгента,
		|Пароль,
		|ВыводитьВкладки,
		|ПутьКФормам,
		|АктивныйСертификат,
		|ПутьКФункцииДанныеЗаявки,
		|ПутьКФункцииФормированияЗаявки");
	
	Возврат СтруктураВозврата;

КонецФункции

&НаКлиенте
Процедура ПоместитьДокументыВКорзину()

	МассивСтрок = Элементы.СписокДокументов.ВыделенныеСтроки;
	
	Для каждого ИДСтроки Из МассивСтрок Цикл
		
		ТекДокумент = Объект.СписокДокументов.НайтиПоИдентификатору(ИДСтроки);
		API.Delete(ТекДокумент.id);
		
	КонецЦикла;
	
	ОбновитьСписокПапок();

КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьСервисныеСообщения()
	
	Если НЕ ПолучатьСервисныеСообщения Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	СертификатСсылка = ПолучитьАктивныйСертификат();
	
	Массив = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", АктивныйСертификат));
	Если Массив.Количество() > 0 Тогда
		Элем = Массив[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Элем.token) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОтветов = Новый Массив;
	
	КоллекцияСообщений = API.Notifications_Get(Элем.token, Элем.Отпечаток);
	
	Если КоллекцияСообщений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементОтвета Из КоллекцияСообщений Цикл
		
		Если НЕ API.Notifications_Sign(ЭлементОтвета, СертификатСсылка) Тогда
			Отказ = Истина;
			Прервать;

		КонецЕсли;
		
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Обмен счетами-фактурами: обработано извещение %1", ЭлементОтвета["file_name"]);
		ПоказатьОповещениеПользователя("Обмен счетами-фактурами",, ТекстОповещения);
		
	КонецЦикла;
	
	Если НЕ Отказ И КоллекцияСообщений.Количество() > 0 Тогда
		API.Notifications_Put(Элем.token, Элем.Отпечаток, КоллекцияСообщений)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАктивныйСертификат() Экспорт
	
	Массив = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", АктивныйСертификат));
	Если Массив.Количество() > 0 Тогда
		СтрСертификаты = Массив[0];
		СертификатСсылка = СтрСертификаты.СертификатСсылка;
		
		Возврат СертификатСсылка;
		
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ПолучитьРеквизитыСертификата() Экспорт
	
	Результат = Новый Структура("Отпечаток, token");
	
	Массив = Сертификаты.НайтиСтроки(Новый Структура("Отпечаток", АктивныйСертификат));
	Если Массив.Количество() > 0 Тогда
		СтрСертификата = Массив[0];
		ЗаполнитьЗначенияСвойств(Результат, СтрСертификата);		
		
		Возврат Результат;
		
	КонецЕсли;

КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийФормыСервер

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоТакси = Ложь;
	ФормаИнициализирована = Ложь;
	
	Настройка = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	ЭтоТакси = (Настройка.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси);
	
	Элементы.ГруппаВкладкиПапок.Высота = ?(ЭтоТакси, 14, 17);
	
	СервОбъект = РеквизитФормыВЗначение("Объект");
	ПутьКФормам = СервОбъект.Метаданные().ПолноеИмя() + ".Форма.";
	
	ИмяМодуляЭлДокументов = СервОбъект.ИмяМодуляЭлДокументов;
	ИмяМодуляУправлениеВзаиморасчетами = СервОбъект.ИмяМодуляУправлениеВзаиморасчетами;
	
	ИмяКонфигурации = Метаданные.Имя;
	
	Объект.ЭтоСтороннееРешение = (ИмяКонфигурации <> "БухгалтерияПредприятия" И Метаданные.Поставщик <> "Фирма ""1С""" И Метаданные.Поставщик <> "1С:БИТ");
	//Объект.ЭтоБИТЭкспедирование = (ИмяКонфигурации <> "БухгалтерияПредприятия" И Метаданные.Поставщик <> "Фирма ""1С""" И Метаданные.Поставщик <> "1С:БИТ");
	
	РедакцияКофигурации = Лев(Метаданные.Версия, 3);
	
	ИнициализацияРеквизитов();
	
	ЗаполнитьСертификатыНаСервере();
	
КонецПроцедуры


&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.СохранитьПараметрыПодключения(token, АдресСервера);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ИнициализацияРеквизитов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормыКлиент

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МапИмяПапкиЗаголовок = Новый Соответствие();
	МапИмяПапкиЗаголовок.Вставить("documents", "Все документы");
	МапИмяПапкиЗаголовок.Вставить("inbox", "  Входящие");
	МапИмяПапкиЗаголовок.Вставить("outbox", "  Отправленные");
	МапИмяПапкиЗаголовок.Вставить("approved", "  Одобренные");
	МапИмяПапкиЗаголовок.Вставить("declined", "  Отклоненные");
	МапИмяПапкиЗаголовок.Вставить("waiting", "Ожидают решения");
	МапИмяПапкиЗаголовок.Вставить("waiting_in", "  Вашего");
	МапИмяПапкиЗаголовок.Вставить("waiting_out", "  Другой стороны");
	МапИмяПапкиЗаголовок.Вставить("drafts", "Черновики");
	МапИмяПапкиЗаголовок.Вставить("archive", "Архив");
	МапИмяПапкиЗаголовок.Вставить("deleted", "Корзина");
	
	Служебный = ПолучитьФорму(ПолучитьПолноеИмяФормы("Служебный"),, ЭтаФорма);
	Служебный.ОбработкаОбъект.ИмяМодуляЭлектронныеДокументыВнутренний = Объект.ИмяМодуляЭлектронныеДокументыВнутренний;
	
	JSON = ПолучитьФорму(ПолучитьПолноеИмяФормы("JSON"),, ЭтаФорма);
	API = ПолучитьФорму(ПолучитьПолноеИмяФормы("API"),, ЭтаФорма);
	API.Служебный = Служебный;
	API.ИмяМодуляЭлектронноеВзаимодействиеСлужебныйВызовСервера = Объект.ИмяМодуляЭлектронноеВзаимодействиеСлужебныйВызовСервера;
	
	ПечатьДокументов = ПолучитьМодульПечатиДокументов();
	
	ЗаполнитьЗначенияСвойств(API, ЭтаФорма, "JSON");
	ЗаполнитьЗначенияСвойств(Служебный, ЭтаФорма, "JSON, API, ПечатьДокументов");
	
	ВидимостьВкладокПапок();
	
	ПодключитьОбработчикОжидания("ДействияПриОткрытии", 0.1, Истина);
	
	ПодключитьОбработчикОжидания("ОбновитьСертификаты", 1, Истина);

	Если ПолучатьСервисныеСообщения Тогда
		ПодключитьОбработчикОжидания("ПолучитьСервисныеСообщения", 100);
	КонецЕсли;
	
	УправлениеВидимостьюДоступностьюЭлементов();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОтключитьОбработчикОжидания("ПолучитьСервисныеСообщения");

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКоманд

&НаКлиенте
Процедура КомандаОбновитьСписокПапок(Команда)
	ОбновитьСписокПапок();
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьДокумент(Команда)
	
	// Пока так, позже может потребоваться соответствие
	ТипДокумента = МапТиповДокументов.НайтиПоЗначению(Команда.Имя).Представление;
	
	ПараметрыФормы = Новый Структура("ПутьКФормам, ТипДокумента", ПутьКФормам, ТипДокумента);
	НеобходимоОбновить = Неопределено;
	
	ОткрытьФорму(ПутьКФормам+"ФормаДокумента", ПараметрыФормы, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ФормаДокументаПослеЗакрытия", ЭтаФорма, Новый Структура("НеобходимоОбновить", НеобходимоОбновить)));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписать(Команда)
	
	СертификатСсылка = ПолучитьАктивныйСертификат();
	Если ТипЗнч(СертификатСсылка) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования") И НЕ СертификатСсылка.Пустая() Тогда
		
		КомандаПодписатьЗавершение(СертификатСсылка, Неопределено);
		
	Иначе
		
		ОткрытьФорму("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ФормаВыбора",, ЭтаФорма,,,,
			Новый ОписаниеОповещения("КомандаПодписатьПодпись", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписатьПодпись(ВыбранныйСертификат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйСертификат) Тогда
		Возврат
	КонецЕсли;
	
	ДействителенДо = ПолучитьЗначениеРеквизита(ВыбранныйСертификат, "ДействителенДо");
	Если ДействителенДо < НачалоДня(ТекущаяДата()) Тогда
		ВызватьИсключение "Сертификат " + ВыбранныйСертификат + " просрочен!";
		Возврат;
	КонецЕсли;             

	МассивСтрок = Элементы.СписокДокументов.ВыделенныеСтроки;
	
	Для каждого ИДСтроки Из МассивСтрок Цикл
		
		ТекДокумент = Объект.СписокДокументов.НайтиПоИдентификатору(ИДСтроки);
		
		Оповещение = 
		
		API.Sign(ТекДокумент.id, ВыбранныйСертификат);
			
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписатьЗавершение(ВыбранныйСертификат, ДополнительныеПараметры) Экспорт
		
	ОбновитьСписокПапок();

КонецПроцедуры

&НаКлиенте
Процедура КомандаПоместитьВАрхив(Команда)
	
	МассивСтрок = Элементы.СписокДокументов.ВыделенныеСтроки;
	
	Для каждого ИДСтроки Из МассивСтрок Цикл
		
		ТекДокумент = Объект.СписокДокументов.НайтиПоИдентификатору(ИДСтроки);
		// Глупость - удаленный документ не может быть помещен в архив
		// API.Undelete(ТекДокумент.id);
		API.Archive(ТекДокумент.id);
		
	КонецЦикла;
	
	ОбновитьСписокПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВернутьИзАрхива(Команда)
	
	МассивСтрок = Элементы.СписокДокументов.ВыделенныеСтроки;
	
	Для каждого ИДСтроки Из МассивСтрок Цикл
		
		ТекДокумент = Объект.СписокДокументов.НайтиПоИдентификатору(ИДСтроки);
		API.Unarchive(ТекДокумент.id);
		
	КонецЦикла;
	
	ОбновитьСписокПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоместитьВКорзину(Команда)
	
	ПоместитьДокументыВКорзину();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВернутьИзКорзины(Команда)
	
	МассивСтрок = Элементы.СписокДокументов.ВыделенныеСтроки;
	
	Для каждого ИДСтроки Из МассивСтрок Цикл
		
		ТекДокумент = Объект.СписокДокументов.НайтиПоИдентификатору(ИДСтроки);
		API.Undelete(ТекДокумент.id);
		
	КонецЦикла;
	
	ОбновитьСписокПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьПодпись(Команда)
	
	МассивСтрок = Элементы.СписокДокументов.ВыделенныеСтроки;
	
	Для каждого ИДСтроки Из МассивСтрок Цикл
		
		ТекДокумент = Объект.СписокДокументов.НайтиПоИдентификатору(ИДСтроки);
		API.TestSign(ТекДокумент.id);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКСерверуАТИДоков()
	
	ОчиститьСообщения();
	
	token = API.GetToken(Логин, Пароль);
	Если ПустаяСтрока(token) Тогда
		Сообщить("Не удалось подключиться к серверу "+АдресСервера+"!");
	Иначе
		ТребуетсяИнициализация = Ложь;
		
		ПоказатьОповещениеПользователя("Вы успешно вошли в АТИ-Доки");
		
	КонецЕсли;

	Сертификаты.Очистить();

	ОбновитьДанныеАТИДоков();
	УправлениеВидимостьюДоступностьюЭлементов();
	
	//Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПапки;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗарегистрироватьВнешнююПечатнуюФорму(Команда)
	
	ЗарегистрироватьВнешнююПечатнуюФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоискКонтрагентов(Команда)
	
	ПоискКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьДокументПоКонтрагенту(Команда)
	
	ТекДанные = Элементы.Контрагенты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ПутьКФормам, КонтрагентID", ПутьКФормам, ТекДанные.user_id);
	НеобходимоОбновить = Неопределено;
	
	ОткрытьФорму(ПутьКФормам+"ФормаДокумента", ПараметрыФормы, ЭтаФорма,,,,
	Новый ОписаниеОповещения("ФормаДокументаПослеЗакрытия", ЭтаФорма, Новый Структура("НеобходимоОбновить", НеобходимоОбновить)));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	СтрПапки = Объект.ПапкиДокументов[СтрокаТекущейПапки];
	
	СтрПапки.Сдвиг = Макс(0, СтрПапки.Сдвиг - ДокументовНаСтранице);
	РезультатJSON = API.Documents(ИмяТекущейПапки, СтрПапки.Сдвиг, ДокументовНаСтранице);
	Служебный.ЗаполнитьДокументы(РезультатJSON);
	СформироватьНадписьЛожнойКнопки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВперед(Команда)
	
	СтрПапки = Объект.ПапкиДокументов[СтрокаТекущейПапки];
	
	СтрПапки.Сдвиг = СтрПапки.Сдвиг + ДокументовНаСтранице;
	РезультатJSON = API.Documents(ИмяТекущейПапки, СтрПапки.Сдвиг, ДокументовНаСтранице);
	Служебный.ЗаполнитьДокументы(РезультатJSON);
	СформироватьНадписьЛожнойКнопки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВвестиЗаявкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураДанных = Результат;
	
	Если СтруктураДанных <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура(
		"ИмяФайла,
		|Контрагент,
		|ТипДокумента,
		|Формализованный,
		|Описание",
		
		СтруктураДанных.ИмяФайла,
		СтруктураДанных.Контрагент,
		"Договор-заявка",
		Истина,
		СтруктураДанных.Описание);
		
		ОткрытьФорму(ПутьКФормам+"ФормаДокумента", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перезапустить(Команда)
	
	ПоместитьФайл("", ИмяФайла(),, Ложь);
	ОткрытьФорму(ЭтаФорма.ИмяФормы, , , Ложь);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСертификаты(Команда)
	
	ЗаполнитьСертификатыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьДокумент(Команда)
	
	ВыбраннаяСтрока = Элементы.СписокДокументов.ТекущиеДанные;
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		РедактироватьДокумент(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТакскомСоздатьКабинет(Команда)
	
	ТекДанные = Элементы.Сертификаты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		API.Cabinet(ТекДанные.Отпечаток);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура Параметры(Команда)
	
	РеквизитыПараметры = ПолучитьСтруктуруВозврата();
	
	ЗаполнитьЗначенияСвойств(РеквизитыПараметры, ЭтаФорма);
	РеквизитыПараметры.Вставить("ПутьКФункцииДанныеЗаявки", Объект.ПутьКФункцииДанныеЗаявки);
	РеквизитыПараметры.Вставить("ПутьКФункцииФормированияЗаявки", Объект.ПутьКФункцииФормированияЗаявки);
	
	РеквизитыПараметры.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	РеквизитыПараметры.Вставить("КонтактныеЛица", КонтактныеЛица_Выгрузить());
		
	ПараметрыОтвета = Новый Структура(
		"НеобходимоОбновитьСписок,
		|НеобходимоПерелогиниться,
		|НеобходимоОбновитьВидимостьПапок");
	
	ОткрытьФорму(ПутьКФормам+"ОсновныеПараметры", РеквизитыПараметры, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ПослеРедактированияПараметров", ЭтаФорма, ПараметрыОтвета));
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура КаталогАгентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Каталог = КаталогАгента;
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.Заголовок = "Выберите каталог ""Агента"" ATI-Docs";
	Если ДиалогВыбора.Выбрать() Тогда
		КаталогАгента = ДиалогВыбора.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПапокПриАктивизацииСтроки(Элемент)
	
	Если ПустаяСтрока(token) Тогда
		Возврат
	КонецЕсли;
	
	ЗаполнитьДокументыТекущейПапки();
	СформироватьНадписьЛожнойКнопки();	
	ТекДокумент = Элементы.СписокДокументов.ТекущиеДанные;
	ТекПапка = Элементы.ДеревоПапок.ТекущиеДанные;
	
	Если ТекПапка <> Неопределено Тогда
		НастройкаМенюДействия(ТекДокумент, ТекПапка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока <> Неопределено Тогда
		
		РедактироватьДокумент(Элемент.ДанныеСтроки(ВыбраннаяСтрока));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаДокументаПослеЗакрытия(Результат, ДополнительныеПараметры ) Экспорт
	
	НеобходимоОбновить = (Результат <> Неопределено И Результат);
	
	Если НеобходимоОбновить
		ИЛИ (ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("НеобходимоОбновить", НеобходимоОбновить) И НеобходимоОбновить) Тогда
		ОбновитьСписокПапок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЛоготипНажатие(Элемент)
	
	Если НЕ ПустаяСтрока(token) Тогда
		ЗапуститьПриложение("http://"+АдресСервера+"/api/session/"+token);
	Иначе
		ЗапуститьПриложение("http://" + АдресСервера + "/welcome/");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура tokenПриИзменении(Элемент)
	
	Если НЕ ПустаяСтрока(token) И НЕ ПустаяСтрока(АдресСервера) Тогда
		Попытка
			ОбновитьДанныеАккаунта();
			СформироватьДеревоПапок();
			ОбновитьСписокПапок();
			
			//Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПапки;
			
		Исключение
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаФорумНажатие(Элемент)
	
	ЗапуститьПриложение("http://www.ati.su/Forum/Topic.aspx?forumid=1029&topicid=8905b610-d76e-e311-8e0d-00259038ec34");
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаФидбэкНажатие(Элемент)
	
	ЗапуститьПриложение("http://feedback.d.ati.su/");
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаFAQНажатие(Элемент)
	
	ЗапуститьПриложение("http://minsvyaz.ru/ru/directions/?regulator=118");
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтрокаПоиска = Текст;
	ПоискКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Контрагенты.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("ID", ТекДанные.user_id);
		ФормаКонтрагента = ОткрытьФорму(ПутьКФормам+"ФормаКонтрагента", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаВкладкиПапокПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПодключитьОбработчикОжидания("ЗаполнитьДокументыТекущейПапки", 0.1, Истина);
	//ЗаполнитьДокументыТекущейПапки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьВкладкиДокументовПриИзменении(Элемент)
	
	ВидимостьВкладокПапок();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимДемонтрацииПриИзменении(Элемент)
	
	Элементы.РежимДемонтрации.Видимость = Ложь;
	Элементы.СписокДокументовid.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		ПараметрыФормы = Новый Структура("Отпечаток, Наименование, Период, РеквизитыСертификата",
			ТекДанные.Отпечаток,
			ТекДанные.Наименование,
			"Период действия: "+ПредставлениеПериода(НачалоДня(ТекДанные.ДействителенС), КонецДня(ТекДанные.ДействителенПо), "ФП=Истина"),
			ТекДанные.Свойства);
		
		МетаданныеСертификата = API.Certificate_MetaData_Get(ТекДанные.Отпечаток);
		
		extra = МетаданныеСертификата.Получить("extra");
		Если extra <> Неопределено Тогда
			comment = extra.Получить("Comment");
			Если comment <> Неопределено Тогда
				ПараметрыФормы.Вставить("Комментарий", comment);
			КонецЕсли;
		КонецЕсли;
		
		ОткрытьФорму(ПутьКФормам+"ФормаСертификата", ПараметрыФормы, ЭтаФорма,,,,
			Новый ОписаниеОповещения("СертификатСохранитьКомментарий", ЭтаФорма, Новый Структура("Comment, Отпечаток",, ТекДанные.Отпечаток)));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	
	Документ = Элемент.ТекущиеДанные;
	
	Если Документ = Неопределено Тогда
		Возврат
	КонецЕсли; 
	
	Элементы.СписокДокументовПодписать.Доступность = (Документ.ПравоПодписи И НЕ Документ.Подписан);
	Элементы.СписокДокументовПодписать1.Доступность = (Документ.ПравоПодписи И НЕ Документ.Подписан И НЕ (ИмяТекущейПапки = "draft"));
	
	Элементы.СписокДокументовПроверитьПодпись.Доступность = Документ.Подписан ИЛИ Документ.ПодписанКонтрагентом;
	Элементы.СписокДокументовПроверитьПодпись1.Доступность = Документ.Подписан ИЛИ Документ.ПодписанКонтрагентом;
	
	Элементы.СписокДокументовПоместитьВКорзину.Доступность = Документ.can_be_deleted;
	Элементы.СписокДокументовПоместитьВКорзину1.Доступность = Документ.can_be_deleted;
	
	Элементы.СписокДокументовВернутьИзКорзины.Доступность = Документ.can_be_undeleted;
	Элементы.СписокДокументовВернутьИзКорзины1.Доступность = Документ.can_be_undeleted;
	
	Элементы.СписокДокументовПоместитьВАрхив.Доступность = Документ.can_be_archived;
	Элементы.СписокДокументовПоместитьВАрхив1.Доступность = Документ.can_be_archived;
	
	Элементы.СписокДокументовВернутьИзАрхива.Доступность = Документ.can_be_unarchived;
	Элементы.СписокДокументовВернутьИзАрхива1.Доступность = Документ.can_be_unarchived;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
	ПоместитьДокументыВКорзину();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправкиПриИзменении(Элемент)
	
	УправлениеВидимостьюДоступностьюЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоддержкаПочтаНажатие(Элемент)
	
	ЗапуститьПриложение("mailto:support@ati.su");
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация12Нажатие(Элемент)
	
	ЗапуститьПриложение("http://d.ati.su/help/11207030.html");
	
КонецПроцедуры

#КонецОбласти

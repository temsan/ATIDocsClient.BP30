
//Перем ТекущийСдвиг Экспорт;
//Перем ТекущаяПапка Экспорт;

Перем мВалютаРегламентированногоУчета;

// Подключаемые модули
//Перем JSON Экспорт;
//Перем API Экспорт;
//Перем ПечатьДокументов Экспорт;
Перем ИмяМодуляЭлДокументов Экспорт;
Перем ИмяМодуляУправлениеВзаиморасчетами Экспорт;

Перем ТипСтрока;
Перем ТипЧисло;

//Перем ТипыТранспорта Экспорт;

Перем МапЭДИНашихДокументов;

Перем ИдентификаторОбщихСвойств;

Функция ПолучитьСоздатьСвойство(ИмяСвойства, ТипЗначения, НаборСвойств = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	(ДополнительныеРеквизитыИСведения.Заголовок = &ИмяСвойства
	|				И (ДополнительныеРеквизитыИСведения.НаборСвойств = &НаборСвойств
	|			ИЛИ &НаборСвойств = НЕОПРЕДЕЛЕНО))";
	
	Запрос.УстановитьПараметр("ИмяСвойства", ИмяСвойства);
	Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СвойствоОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
		СвойствоОбъект.Наименование = ИмяСвойства;
		СвойствоОбъект.Заголовок = ИмяСвойства;
		СвойствоОбъект.ТипЗначения = ТипЗначения;
		СвойствоОбъект.НаборСвойств = НаборСвойств;
		СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
		
		Попытка
			СвойствоОбъект.Записать();
		Исключение
		КонецПопытки;	
		
		Если ЗначениеЗаполнено(НаборСвойств) Тогда
			
			// Портировано из модуля формы объекта ПВХ ДополнительныеРеквизитыИСведения
			ОбъектНаборСвойств = НаборСвойств.ПолучитьОбъект();
			ТабличнаяЧасть = ОбъектНаборСвойств.ДополнительныеСведения;
			НайденнаяСтрока = ТабличнаяЧасть.Найти(СвойствоОбъект.Ссылка, "Свойство");
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				НоваяСтрока.Свойство = СвойствоОбъект.Ссылка;
				ОбъектНаборСвойств.Записать();
				СвойствоОбъект.ДополнительныеСвойства.Вставить("ИзмененныйНабор", НаборСвойств);
			КонецЕсли;
			// Конец
			
		КонецЕсли;
		
		Возврат СвойствоОбъект.Ссылка;
		
	Иначе
		
		Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
		
	КонецЕсли;
	
КонецФункции

Функция НайтиКонтрагента(Идентификатор, ИНН = "", Наименование = "") Экспорт
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ДополнительныеСведения.Объект = Контрагенты.Ссылка
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &Свойство
		|	И ДополнительныеСведения.Значение = &Значение
		|	И НЕ Контрагенты.Ссылка ЕСТЬ NULL ";
		
		ИмяСвойства = "Код_АТИ";
		Свойство = ПолучитьСоздатьСвойство(ИмяСвойства, ТипЧисло, ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты"));
		Запрос.УстановитьПараметр("Свойство", Свойство);
		Запрос.УстановитьПараметр("Значение", Идентификатор);
		
	ИначеЕсли ЗначениеЗаполнено(ИНН) Тогда
		
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ЭтоГруппа
		|	И НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.ИНН = &ИНН";
		
		Запрос.УстановитьПараметр("ИНН", ИНН);

	ИначеЕсли ЗначениеЗаполнено(Наименование) Тогда
		
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование ПОДОБНО &Наименование
		|	И НЕ Контрагенты.ЭтоГруппа
		|	И НЕ Контрагенты.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Наименование", СокрЛП(Наименование)+"%");
		
	КонецЕсли;
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
	
	Возврат Список;
	
КонецФункции	

Функция НайтиДокументПоДокИД(ИмяТаблицы, Идентификатор) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК Док
	|		ПО ДополнительныеСведения.Объект = Док.Ссылка
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Свойство
	|	И ДополнительныеСведения.Значение = &Значение";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоступлениеТоваровУслуг", ИмяТаблицы);
	
	Запрос.Текст = ТекстЗапроса;
	
	ИмяСвойства = "ATI_DOC_ID";
	Свойство = ПолучитьСоздатьСвойство(ИмяСвойства, ТипСтрока);
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Значение", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	    Результат = Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции	

Функция ПолучитьСтруктуруИдентификатора(Знач ID, Разделитель = "_") Экспорт
	
	СтруктураИдентификатора = Новый Структура;
	
	ПозицияРазделителя = Найти(ID, Разделитель);
	
	Если ПозицияРазделителя > 0 Тогда
		Префикс = Лев(ID, ПозицияРазделителя - 1);
		ID = Сред(ID, ПозицияРазделителя + СтрДлина(Разделитель));
	Иначе
		Префикс = "";
	КонецЕсли;
	СтруктураИдентификатора.Вставить("Префикс", Префикс);
	
	ПозицияРазделителя = Найти(ID, Разделитель);
	Если ПозицияРазделителя > 0 Тогда
		ВерсияДанных = Сред(ID, ПозицияРазделителя + СтрДлина(Разделитель));
		ID = Лев(ID, ПозицияРазделителя - 1);
	Иначе
		ВерсияДанных = "";
	КонецЕсли;
	СтруктураИдентификатора.Вставить("ВерсияДанных", ВерсияДанных);
	СтруктураИдентификатора.Вставить("ID", ID);
	
	Возврат СтруктураИдентификатора;
	
КонецФункции

Функция ЗаменитьСимволы (Источник,Текст,Замена)
	Результат = Текст;
	Для Сч = 1 По СтрДлина(Источник) Цикл
		Результат = СтрЗаменить(Результат,Сред(Источник,Сч,1),Сред(Замена,Сч,1));
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция Транслитерация(ИсходноеСлово)
	Слово = НРег(ИсходноеСлово);
	Слово=СтрЗаменить(Слово,"её","yeyo");
	Слово=СтрЗаменить(Слово,"ёе","yoye");
	Слово=СтрЗаменить(Слово,"я","ya");
	Слово=СтрЗаменить(Слово," - ","-");
	Слово=СтрЗаменить(Слово," -","-");
	Слово=СтрЗаменить(Слово,"- ","-");
	Слово=СтрЗаменить(Слово," ","-");
	Слово=ЗаменитьСимволы("абвгдезийклмнопрстуфыэ",Слово,"abvgdezijklmnoprstufye");
	Возврат Слово;
КонецФункции

// Навигация по дереву разбора

Функция ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
	
	ПозТочки = Найти(ПутьКРеквизиту, ".");
	Если ПозТочки > 0 Тогда
		ИмяГлавногоРеквизита     = Лев(ПутьКРеквизиту, ПозТочки - 1);
		ИмяПодчиненногоРеквизита = Прав(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - ПозТочки);
	Иначе
		ИмяГлавногоРеквизита     = ПутьКРеквизиту;
		ИмяПодчиненногоРеквизита = "";
	КонецЕсли;
	
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ИмяГлавногоРеквизита, "Реквизит");
	
	Если ГлавныйРеквизит <> Неопределено Тогда
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		Если ИмяПодчиненногоРеквизита <> "" Тогда
			СтрокаПоСсылке = Неопределено;
			Если ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
				Возврат ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаПоСсылке, ИмяПодчиненногоРеквизита);
			КонецЕсли;
			
			// Нет возможности получить значение подчиненного реквизита.
			Возврат Неопределено;
		Иначе
			// Не требуется получать значение подчиненного реквизита.
			Возврат ЗначениеГлавногоРеквизита
		КонецЕсли;
	Иначе
		// Нет такого реквизита.
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено)
	
	ЗначениеСтрокой = Строка(Значение);
	
	Если Найти(ЗначениеСтрокой, "_") > 0 Тогда
		СтрокаПоСсылке =  ДеревоРазбора.Строки.Найти(ЗначениеСтрокой, "ИндексСтроки", Истина);
	КонецЕсли;
	
	Возврат ?(СтрокаПоСсылке = Неопределено, Ложь, Истина);
	
КонецФункции

Функция ПолучитьСсылкуРеквизита(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
		
	ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ПутьКРеквизиту, "Реквизит");
	
	Если ГлавныйРеквизит <> Неопределено Тогда
		
		ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;
		СтрокаПоСсылке = Неопределено;
		Если ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке) Тогда
			Возврат СтрокаПоСсылке.СсылкаНаОбъект;
		КонецЕсли;
		
		// Нет возможности получить значение подчиненного реквизита.
		Возврат Неопределено;
		
	Иначе
		// Нет такого реквизита.
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ XML ИЗ ДОКУМЕНТОВ 1С

Функция СформироватьДокумент1С(ДокументСсылка, ОтправлятьПечатнуюФорму, ДопПараметры = Неопределено) Экспорт
	
	Если ОтправлятьПечатнуюФорму Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			Возврат ВыгрузитьАкт(ДокументСсылка, ?(ФормироватьЭД, Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), Неопределено));
			
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда	
			
			Возврат ВыгрузитьСчетФактуру(ДокументСсылка, ДопПараметры)
			
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда	
			
			Возврат ВыгрузитьСчет(ДокументСсылка);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецФункции

Функция ВернутьРасчетныйСчет(СчетКонтрагента)

	БанкДляРасчетов = СчетКонтрагента.БанкДляРасчетов;
	Результат       = ?(БанкДляРасчетов.Пустая(), СчетКонтрагента.НомерСчета, СчетКонтрагента.Банк.КоррСчет);

	Возврат Результат;

КонецФункции // ВернутьРасчетныйСчет()

Функция ВыгрузитьАкт(ДокументСсылка, ЭДСсылка = Неопределено) Экспорт
	
	ВиртуальноеСоглашениеЭД = Новый Структура;
	ВиртуальноеСоглашениеЭД.Вставить("Ссылка", Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("ПрофильНастроекЭДО", Справочники.ПрофилиНастроекЭДО.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);

	НастройкиОбменаЭД = Новый Структура;
	НастройкиОбменаЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктИсполнитель);
	НастройкиОбменаЭД.Вставить("СоглашениеЭД", ВиртуальноеСоглашениеЭД);
	НастройкиОбменаЭД.Вставить("ИдентификаторОрганизации", ДокументСсылка.Организация.ИНН);
	НастройкиОбменаЭД.Вставить("ИдентификаторКонтрагента", ДокументСсылка.Контрагент.ИНН);
	НастройкиОбменаЭД.Вставить("Организация", ДокументСсылка.Организация);
	НастройкиОбменаЭД.Вставить("Контрагент", ДокументСсылка.Контрагент);
	НастройкиОбменаЭД.Вставить("ПрофильНастроекЭДО", НастройкиОбменаЭД.СоглашениеЭД.ПрофильНастроекЭДО);
	НастройкиОбменаЭД.Вставить("ВерсияРегламентаЭДО", Перечисления.ВерсииРегламентаОбмена1С.Версия20);

	СтруктураПараметров = Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).СформироватьАкт501ИсполнительФНС(ДокументСсылка, НастройкиОбменаЭД, Истина);
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Контрагент", ДокументСсылка.Контрагент);
	СтруктураПараметров.Вставить("Организация", ДокументСсылка.Организация);
	СтруктураПараметров.Вставить("Дата", ДокументСсылка.Дата);
	СтруктураПараметров.Вставить("Номер", ДокументСсылка.Номер);
	
	Если НЕ ЭДСсылка = Неопределено Тогда
		//Переделать на процедуры ОМ..
		СтруктураЭД = СтруктураПараметров.СтруктураЭД;
		Если НЕ ЗначениеЗаполнено(ЭДСсылка) Тогда
			ЭДОбъект = Справочники.ЭДПрисоединенныеФайлы.СоздатьЭлемент();
		Иначе
			ЭДОбъект = ЭДСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭДОбъект, СтруктураЭД);
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		ЭДОбъект.Автор = ПараметрыСеанса.ТекущийПользователь;
		ЭДОбъект.ВладелецФайла = ДокументСсылка;
		ЭДОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса;
		ЭДОбъект.ДатаМодификацииУниверсальная = ТекущаяДатаСеанса;
		ЭДОбъект.ДатаСоздания = ТекущаяДатаСеанса;
		ЭДОбъект.ДатаФормированияЭДОтправителем = ТекущаяДатаСеанса;
		ЭДОбъект.Изменил = ПараметрыСеанса.ТекущийПользователь;
		ЭДОбъект.Наименование = СтруктураПараметров.УникальныйИдентификатор;
		ЭДОбъект.НаименованиеФайла = СтруктураПараметров.УникальныйИдентификатор;
		ЭДОбъект.Наименование = СтруктураПараметров.УникальныйИдентификатор;
		ЭДОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		ЭДОбъект.ПутьКФайлу = СтруктураПараметров.ПолноеИмяФайла;
		ЭДОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		
		ЗапросСоглашение = Новый Запрос;
		ЗапросСоглашение.Текст=
		"ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭД.Ссылка
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.Контрагент = &Контрагент
		|	И СоглашенияОбИспользованииЭД.Организация = &Организация
		|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления";
		//|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = &СтатусСоглашения";
		ЗапросСоглашение.УстановитьПараметр("Контрагент", ДокументСсылка.Контрагент);
		ЗапросСоглашение.УстановитьПараметр("Организация", ДокументСсылка.Организация);
		ЗапросСоглашение.УстановитьПараметр("СтатусСоглашения", Перечисления.СтатусыСоглашенийЭД.Действует);
		РезультатЗапроса = ЗапросСоглашение.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ЭДОбъект.СоглашениеЭД = РезультатЗапроса.Выгрузить()[0].Ссылка;
		КонецЕсли;
		
		//ЭДОбъект.ФайлХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
		ЭДОбъект.Записать();
		
		МЗ = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
		МЗ.ПрисоединенныйФайл = ЭДОбъект.Ссылка;
		МЗ.ХранимыйФайл = Новый ХранилищеЗначения(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));
		МЗ.Записать();
		
		ЭДСсылка = ЭДОбъект.Ссылка;
		//ПрисоединенныеФайлы.ДобавитьФайл();
	КонецЕсли;
	
	Возврат СтруктураПараметров.ПолноеИмяФайла;
	
КонецФункции

Функция ВыгрузитьСчетФактуру(ДокументСсылка, ДопПараметры = Неопределено) Экспорт
	
	Перем ИдентификаторОрганизации;
	Перем ИдентификаторКонтрагента;
	
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		ДопПараметры.Свойство("ИдентификаторОрганизации", ИдентификаторОрганизации);
		ДопПараметры.Свойство("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	КонецЕсли;
	
	Если ПустаяСтрока(ИдентификаторОрганизации) Тогда
		ВызватьИсключение "Не заполнен ФНС ИД отправителя";
	КонецЕсли;
	
	Если ПустаяСтрока(ИдентификаторКонтрагента) Тогда
		ВызватьИсключение "Не заполнен ФНС ИД получателя";
	КонецЕсли;
	
	ВиртуальноеСоглашениеЭД = Новый Структура;
	ВиртуальноеСоглашениеЭД.Вставить("Ссылка", Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("ПрофильНастроекЭДО", Справочники.ПрофилиНастроекЭДО.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	
	НастройкиОбменаЭД = Новый Структура;
	НастройкиОбменаЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетФактура);
	НастройкиОбменаЭД.Вставить("СоглашениеЭД", ВиртуальноеСоглашениеЭД);
	НастройкиОбменаЭД.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	НастройкиОбменаЭД.Вставить("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	НастройкиОбменаЭД.Вставить("Организация", ДокументСсылка.Организация);
	НастройкиОбменаЭД.Вставить("Контрагент", ДокументСсылка.Контрагент);
	НастройкиОбменаЭД.Вставить("ПрофильНастроекЭДО", НастройкиОбменаЭД.СоглашениеЭД.ПрофильНастроекЭДО);
	
	СтруктураПараметров = Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).СформироватьСчетФактуруФНС(ДокументСсылка, НастройкиОбменаЭД, Истина);
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Контрагент", ДокументСсылка.Контрагент);
	СтруктураПараметров.Вставить("Организация", ДокументСсылка.Организация);
	СтруктураПараметров.Вставить("Дата", ДокументСсылка.Дата);
	СтруктураПараметров.Вставить("Номер", ДокументСсылка.Номер);
	
	// В модуле Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний) часть параметров забиты харкодом
	// Исправим это
	
	//Объект.Установить("/СвУчДокОбор/СвОЭДОтпр/НаимОрг", "ЗАО ""ПФ ""СКБ Контур""");
	//Объект.Установить("/СвУчДокОбор/СвОЭДОтпр/ИННЮЛ", "6663003127");
	//Объект.Установить("/СвУчДокОбор/СвОЭДОтпр/ИдЭДО", "2BM");
	
	// NEW
	ОбъектXML = Новый ЧтениеXML;
	ОбъектXML.ОткрытьФайл(СтруктураПараметров.ПолноеИмяФайла);
	
	// Считаем содержимое XML файла
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);
	
	// Освободим временный файл для записи
	ОбъектXML.Закрыть();
	ОбъектXML = Неопределено;
	
	// Получим тег Подписант для обработки.
	Сведения = ДокументDOM.ПолучитьЭлементыПоИмени("СвОЭДОтпр")[0];
	
	Сведения.УстановитьАтрибут("НаимОрг", "ЗАО ""ПФ ""СКБ Контур""");
	Сведения.УстановитьАтрибут("ИННЮЛ", "6663003127");
	Сведения.УстановитьАтрибут("ИдЭДО", "2BM");

	// Удалим сведения в XML
	
	//Файл/Документ/СвСчФакт/ИнфПол
	
	ИнфПол = ДокументDOM.ПолучитьЭлементыПоИмени("ИнфПол")[0];
	ИнфПол.УдалитьАтрибут("ТекстИнф");
	
	Для Инд = 0 По ИнфПол.ДочерниеУзлы.Количество()-1 Цикл
		ИнфПол.УдалитьДочерний(ИнфПол.ДочерниеУзлы[0])		
	КонецЦикла;
	
	КоллекцияИнфПолСтр = ДокументDOM.ПолучитьЭлементыПоИмени("СведТов");
	Для Каждого Элемент Из КоллекцияИнфПолСтр Цикл
		Элемент.УдалитьАтрибут("ИнфПолСтр");
		
		Коллекция = Элемент.ПолучитьЭлементыПоИмени("ИнфПолСтр");
		Для Каждого Элем Из Коллекция Цикл
			Элемент.УдалитьДочерний(Элем);
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(СтруктураПараметров.ПолноеИмяФайла, "windows-1251");
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	Возврат СтруктураПараметров.ПолноеИмяФайла;
		
КонецФункции

Функция ВыгрузитьСчет(ДокументСсылка) Экспорт
	
	ВиртуальноеСоглашениеЭД = Новый Структура;
	ВиртуальноеСоглашениеЭД.Вставить("Ссылка", Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("ПрофильНастроекЭДО", Справочники.ПрофилиНастроекЭДО.ПустаяСсылка());
	ВиртуальноеСоглашениеЭД.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.ЧерезКаталог);

	НастройкиОбменаЭД = Новый Структура;
	НастройкиОбменаЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетНаОплату);
	НастройкиОбменаЭД.Вставить("СоглашениеЭД", ВиртуальноеСоглашениеЭД);
	НастройкиОбменаЭД.Вставить("ИдентификаторОрганизации", ДокументСсылка.Организация.ИНН);
	НастройкиОбменаЭД.Вставить("ИдентификаторКонтрагента", ДокументСсылка.Контрагент.ИНН);
	НастройкиОбменаЭД.Вставить("Организация", ДокументСсылка.Организация);
	НастройкиОбменаЭД.Вставить("Контрагент", ДокументСсылка.Контрагент);
	НастройкиОбменаЭД.Вставить("ПрофильНастроекЭДО", НастройкиОбменаЭД.СоглашениеЭД.ПрофильНастроекЭДО);
	НастройкиОбменаЭД.Вставить("ВерсияРегламентаЭДО", Перечисления.ВерсииРегламентаОбмена1С.Версия20);
	
	СтруктураПараметров = Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).УдалитьСформироватьСчетНаОплатуПоДокументу(ДокументСсылка, НастройкиОбменаЭД, Истина);
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Контрагент", ДокументСсылка.Контрагент);
	СтруктураПараметров.Вставить("Организация", ДокументСсылка.Организация);
	СтруктураПараметров.Вставить("Дата", ДокументСсылка.Дата);
	СтруктураПараметров.Вставить("Номер", ДокументСсылка.Номер);
	
	Возврат СтруктураПараметров.ПолноеИмяФайла;
	
КонецФункции

Функция ПолучитьДанныеВодителя(Физлицо)
	
	Результат = Новый Структура("Паспорт, НомерВодительскогоУдостоверения, Телефон");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыФизическихЛицСрезПоследних.Представление КАК Паспорт
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			ЯвляетсяДокументомУдостоверяющимЛичность
		|				И Физлицо = &Физлицо
		|				И ВидДокумента <> ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение)) КАК ДокументыФизическихЛицСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыФизическихЛицСрезПоследних.Серия + "" "" + ДокументыФизическихЛицСрезПоследних.Номер КАК НомерВодительскогоУдостоверения
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			Физлицо = &Физлицо
		|				И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение)) КАК ДокументыФизическихЛицСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Телефон
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка = &Физлицо
		|	И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|	И ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица)";
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[0].Выбрать();
	Если Выборка.Следующий() Тогда
		
		 Результат.Вставить("Паспорт", Выборка.Паспорт);
		
	КонецЕсли;
	
	Выборка = Результаты[1].Выбрать();
	Если Выборка.Следующий() Тогда
		
		 Результат.Вставить("НомерВодительскогоУдостоверения", Выборка.НомерВодительскогоУдостоверения);
		
	КонецЕсли;

	Выборка = Результаты[2].Выбрать();
	Если Выборка.Следующий() Тогда
		
		 Результат.Вставить("Телефон", Выборка.Телефон);
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеЗаявкиИзДокумента(СтруктураЗаявки, ДокументСсылка)
	
	Объект = ДокументСсылка.ПолучитьОбъект();
	Объект = Документы.Бит_ЗаявкаЭкспедирования.СоздатьДокумент();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	""Договор-заявка"" КАК ТипДокумента,
	|	новаЗаявкаЭкспедирования.Номер,
	|	новаЗаявкаЭкспедирования.Дата,
	|	ЛОЖЬ КАК CMR,
	|	ЛОЖЬ КАК TIR,
	|	новаЗаявкаЭкспедирования.ВремяС,
	|	новаЗаявкаЭкспедирования.ВремяПо,
	|	новаЗаявкаЭкспедирования.ДопУсловия КАК ДополнительныеУсловия,
	|	ПРЕДСТАВЛЕНИЕ(новаЗаявкаЭкспедирования.ВалютаПеревозчика) КАК Валюта,
	|	новаЗаявкаЭкспедирования.ВидТребуемогоТранспорта,
	|	новаЗаявкаЭкспедирования.Водитель,
	|	новаЗаявкаЭкспедирования.Водитель.ФизЛицо,
	|	новаЗаявкаЭкспедирования.ВремяВыгрузкиС,
	|	новаЗаявкаЭкспедирования.ВремяВыгрузкиПо,
	|	новаЗаявкаЭкспедирования.ДоговорПеревозчика КАК Договор,
	|	новаЗаявкаЭкспедирования.Направление.Откуда,
	|	новаЗаявкаЭкспедирования.АдресЗагрузки,
	|	новаЗаявкаЭкспедирования.КомментарийАдресаЗагрузки,
	|	новаЗаявкаЭкспедирования.Направление.Куда,
	|	новаЗаявкаЭкспедирования.АдресВыгрузки,
	|	новаЗаявкаЭкспедирования.Транспорт.Марка КАК МаркаТягача,
	|	новаЗаявкаЭкспедирования.КомментарийАдресаВыгрузки,
	|	новаЗаявкаЭкспедирования.Транспорт.Вид КАК МодельТягача,
	|	новаЗаявкаЭкспедирования.Транспорт.НомерГосударственнойРегистрации КАК РегНомерТягача,
	|	новаЗаявкаЭкспедирования.Транспорт.НомерПрицепа КАК РегНомерПрицепа,
	|	новаЗаявкаЭкспедирования.Заказчик КАК Организация,
	|	новаЗаявкаЭкспедирования.Перевозчик КАК Контрагент,
	|	новаЗаявкаЭкспедирования.Перевозчик.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	новаЗаявкаЭкспедирования.КонтактноеЛицоЗаказчика КАК ПредставительОрганизации,
	|	новаЗаявкаЭкспедирования.КонтактноеЛицоПеревозчика КАК ПредставительКонтрагента,
	|	новаЗаявкаЭкспедирования.СанитарныйПаспортТребуемогоТранспорта КАК СанКнижкаТС,
	|	ПРЕДСТАВЛЕНИЕ(новаЗаявкаЭкспедирования.ТипКузоваТребуемогоТранспорта) КАК ТипКузова,
	|	новаЗаявкаЭкспедирования.ОписаниеГруза КАК ГрузНаименование,
	|	новаЗаявкаЭкспедирования.Вес КАК Вес,
	|	новаЗаявкаЭкспедирования.Объем,
	|	новаЗаявкаЭкспедирования.ДлинаКузова КАК Длина,
	|	новаЗаявкаЭкспедирования.ШиринаКузова КАК Ширина,
	|	новаЗаявкаЭкспедирования.ЦенаПеревозчика,
	|	новаЗаявкаЭкспедирования.ВысотаКузова КАК Высота,
	|	ВЫБОР новаЗаявкаЭкспедирования.Палетт
	|		КОГДА 0
	|			ТОГДА 1
	|		ИНАЧЕ новаЗаявкаЭкспедирования.Палетт
	|	КОНЕЦ КАК Количество,
	|	новаЗаявкаЭкспедирования.СтоимостьГруза КАК Стоимость,
	|	новаЗаявкаЭкспедирования.Перевозчик,
	|	новаЗаявкаЭкспедирования.Комментарий КАК Примечание,
	|	новаЗаявкаЭкспедирования.КоличествоЧасов,
	|	новаЗаявкаЭкспедирования.СуммаПеревозчика КАК СуммаИтого,
	|	"""" КАК ШтрафныеСанкцииИОтветственность,
	|	ПРЕДСТАВЛЕНИЕ(новаЗаявкаЭкспедирования.Грузоотправитель) КАК Грузоотправитель,
	|	новаЗаявкаЭкспедирования.КонтактноеЛицоПоАдресу,
	|	ПРЕДСТАВЛЕНИЕ(новаЗаявкаЭкспедирования.Грузополучатель) КАК Грузополучатель,
	|	новаЗаявкаЭкспедирования.КонтактноеЛицоПоАдресуРазгрузки,
	|	новаЗаявкаЭкспедирования.ВидТребуемогоТранспорта.Грузоподъемность КАК Грузоподъемность
	|ИЗ
	|	Документ.новаЗаявкаЭкспедирования КАК новаЗаявкаЭкспедирования
	|ГДЕ
	|	новаЗаявкаЭкспедирования.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Бит_ЗаявкаЭкспедированияРасчетСтоимости.Ссылка.Дата,
	|	Бит_ЗаявкаЭкспедированияРасчетСтоимости.ВидУслуги КАК Примечание,
	|	Бит_ЗаявкаЭкспедированияРасчетСтоимости.ПоставщикВидОплаты КАК ФормаОплаты,
	|	Бит_ЗаявкаЭкспедированияРасчетСтоимости.ПоставщикСумма КАК Сумма,
	|	Бит_ЗаявкаЭкспедированияРасчетСтоимости.ПоставщикВидОплаты КАК ВидОплаты
	|ИЗ
	|	Документ.новаЗаявкаЭкспедирования.РасчетСтоимости КАК Бит_ЗаявкаЭкспедированияРасчетСтоимости
	|ГДЕ
	|	Бит_ЗаявкаЭкспедированияРасчетСтоимости.ВключатьВСтоимость
	|	И Бит_ЗаявкаЭкспедированияРасчетСтоимости.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	новаЗаявкаЭкспедированияТипыКузововТребуемогоТранспорта.ТипКузова.Представление КАК ТипКузова
	|ИЗ
	|	Документ.новаЗаявкаЭкспедирования.ТипыКузововТребуемогоТранспорта КАК новаЗаявкаЭкспедированияТипыКузововТребуемогоТранспорта
	|ГДЕ
	|	новаЗаявкаЭкспедированияТипыКузововТребуемогоТранспорта.Ссылка = &ДокументСсылка";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка = РезультатЗапроса[0].Выбрать();
	Шапка.Следующий();
	
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		СтруктураЗаявки.Вставить(Колонка.Имя, Шапка[Колонка.Имя])
	КонецЦикла;
	
	РасчетСтоимости = РезультатЗапроса[1].Выгрузить();
	
	ТипыКузова = РезультатЗапроса[2].Выбрать();
	ТипыКузова.Следующий();
	
	СтруктураЗаявки.Вставить("ТипКузова", ТипыКузова.ТипКузова);
	
	Водители = СтруктураЗаявки.Водители;
	Строка = Водители.Добавить();
	Строка.ФИО = Шапка.Водитель;
	ЗаполнитьЗначенияСвойств(Строка, ПолучитьДанныеВодителя(Шапка.ВодительФизЛицо));
	
	ГрафикОплаты = СтруктураЗаявки.ГрафикОплаты;
	
	Для Каждого Стр Из РасчетСтоимости Цикл
		ЗаполнитьЗначенияСвойств(ГрафикОплаты.Добавить(), Стр);
	КонецЦикла;
	
	Транспорт = СтруктураЗаявки.Транспорт;
	Строка = Транспорт.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, Шапка);

	// Точка погрузки
	ТочкиМаршрута = СтруктураЗаявки.ТочкиМаршрута;
	
	СтрокаПогрузка = ТочкиМаршрута.Добавить();
	СтрокаПогрузка.uid = Строка(Новый УникальныйИдентификатор);
	СтрокаПогрузка.Дата = Шапка.Дата;
	СтрокаПогрузка.Время = Формат(Шапка.ВремяС, "ДЛФ=T");
	СтрокаПогрузка.Действие = "Погрузка";
	СтрокаПогрузка.type = "load";
	СтрокаПогрузка.Город = Шапка.НаправлениеОткуда;
	СтрокаПогрузка.Адрес = Шапка.АдресЗагрузки;
	СтрокаПогрузка.Контрагент = Шапка.Перевозчик;
	СтрокаПогрузка.КонтрагентНаименованиеПолное = Шапка.КонтрагентНаименованиеПолное;
	
	// Груз погрузки
	Грузы = СтруктураЗаявки.Грузы;
	Строка = Грузы.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, Шапка);
	Строка.uid_ТочкиМаршрута = СтрокаПогрузка.uid;
	//Строка.ГрузНаименование = Шапка.КомментарийАдресаЗагрузки;
	
	// Точка разгрузки
	СтрокаРазгрузка = ТочкиМаршрута.Добавить();
	СтрокаРазгрузка.uid = Строка(Новый УникальныйИдентификатор);
	СтрокаРазгрузка.Дата = Шапка.Дата;
	СтрокаРазгрузка.Время = Формат(Шапка.ВремяВыгрузкиС, "ДЛФ=T");
	СтрокаРазгрузка.Действие = "Разгрузка";
	СтрокаРазгрузка.type = "unload";
	СтрокаРазгрузка.Город = Шапка.НаправлениеКуда;
	СтрокаРазгрузка.Адрес = Шапка.АдресВыгрузки;
	СтрокаРазгрузка.Контрагент = Шапка.Перевозчик;
	СтрокаРазгрузка.КонтрагентНаименованиеПолное = Шапка.КонтрагентНаименованиеПолное;
	
	// Груз разгрузки
	Грузы = СтруктураЗаявки.Грузы;
	Строка = Грузы.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, Шапка);
	Строка.uid_ТочкиМаршрута = СтрокаРазгрузка.uid;
	//Строка.ГрузНаименование = Шапка.КомментарийАдресаВыгрузки;
	
	Возврат СтруктураЗаявки;
	
КонецФункции

Функция СформироватьДокументЗаявка(ДанныеЗаявки) Экспорт
	
	ID = ДанныеЗаявки.ID;
		
	ДокументСсылка = НайтиДокументПоДокИД("новаЗаявкаЭкспедирования", ID);
	
	Возврат Истина;
	
КонецФункции


Функция СформироватьФайлЗаявки(ДокументСсылка) Экспорт
	
	СтруктураЗаявки = ПолучитьСтруктуруЗаявки();
	
	Если ЭтоСтороннееРешение И НЕ ПустаяСтрока(ПутьКФункцииДанныеЗаявки) Тогда
		Выполнить("ВхДанные = " + ПутьКФункцииДанныеЗаявки);
	Иначе
		ВхДанные = ПолучитьДанныеЗаявкиИзДокумента(СтруктураЗаявки, ДокументСсылка);
	КонецЕсли;
	
	ФайлЗаявки = ПолучитьИмяВременногоФайла("xml");
	ФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
	Макет = ЭтотОбъект.ПолучитьМакет("СхемаЗаявки");
	Макет.Записать(ФайлСхемы);
	
	Фабрика = СоздатьФабрикуXDTO(ФайлСхемы);
	ПакетATI = Фабрика.Пакеты.Получить("https://d.ati.su/xml/ns/0.1/");
	
	ДокументОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ПакетATI, "document");
	ДокументОбъектXDTO.type = "Заказ";
	ДокументОбъектXDTO.version = "0.1";
	ДокументОбъектXDTO.id = Строка(Новый УникальныйИдентификатор);
	
	ЗаголовокОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ДокументОбъектXDTO, "header");
	ЗаголовокОбъектXDTO.number = СокрЛП(ВхДанные.Номер);
	ЗаголовокОбъектXDTO.title = ВхДанные.ТипДокумента;
	ЗаголовокОбъектXDTO.date = ВхДанные.Дата;
	
	ДокументОбъектXDTO.header = ЗаголовокОбъектXDTO;
	
	///////////////////////////////////////////////////////////////////////////
	
	ТелоОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ДокументОбъектXDTO, "body");
	
	Если ЗначениеЗаполнено(ВхДанные.Договор) Тогда
		//ТелоОбъектXDTO.relation = "К договору №"+ВхДанные.Договор.Номер+" от "+Формат(ВхДанные.Договор.Дата, "ДЛФ=DD");//Удалено: artem.b 03.06.2015
	КонецЕсли;
	
	ТекстЗаказчик = "";
	ТекстИсполнитель = "";
	Если ВхДанные.РольКонтрагента = 1 Тогда //Заказчик
		ТекстЗаказчик = ВхДанные.Контрагент.Наименование + ", именуемое в дальнейшем Заказчик ";
		Если ЗначениеЗаполнено(ВхДанные.ПредставительКонтрагента) Тогда
			ТекстЗаказчик = ТекстЗаказчик + " в лице "+ВхДанные.ПредставительКонтрагента;
			Если ЗначениеЗаполнено(ВхДанные.ОснованиеПредставителяКонтрагента) Тогда
				ТекстЗаказчик = ТекстЗаказчик + ", действующего(-ей) на основании "+ВхДанные.ОснованиеПредставителяКонтрагента;
			КонецЕсли;
		КонецЕсли;
		
		ТекстИсполнитель = ВхДанные.Организация.Наименование + ", именуемое в дальнейшем Перевозчик";
		Если ЗначениеЗаполнено(ВхДанные.ПредставительОрганизации) Тогда
			ТекстИсполнитель = ТекстИсполнитель + " в лице "+ВхДанные.ПредставительОрганизации;
			Если ЗначениеЗаполнено(ВхДанные.ОснованиеПредставителяОрганизации) Тогда
				ТекстИсполнитель = ТекстИсполнитель + ", действующего(-ей) на основании "+ВхДанные.ОснованиеПредставителяОрганизации;
			КонецЕсли;
		КонецЕсли;
	Иначе //Исполнитель
		ТекстЗаказчик = ВхДанные.Организация.Наименование + ", именуемое в дальнейшем Заказчик";
		Если ЗначениеЗаполнено(ВхДанные.ПредставительОрганизации) Тогда
			ТекстЗаказчик = ТекстЗаказчик + " в лице "+ВхДанные.ПредставительОрганизации;
			Если ЗначениеЗаполнено(ВхДанные.ОснованиеПредставителяОрганизации) Тогда
				ТекстЗаказчик = ТекстЗаказчик + ", действующего(-ей) на основании "+ВхДанные.ОснованиеПредставителяОрганизации;
			КонецЕсли;
		КонецЕсли;
		
		ТекстИсполнитель = ВхДанные.Контрагент.Наименование + ", именуемое в дальнейшем Перевозчик";
		Если ЗначениеЗаполнено(ВхДанные.ПредставительКонтрагента) Тогда
			ТекстИсполнитель = ТекстИсполнитель + " в лице "+ВхДанные.ПредставительКонтрагента;
			Если ЗначениеЗаполнено(ВхДанные.ОснованиеПредставителяКонтрагента) Тогда
				ТекстИсполнитель = ТекстИсполнитель + ", действующего(-ей) на основании "+ВхДанные.ОснованиеПредставителяКонтрагента;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаказчик = ТекстЗаказчик + " с одной стороны, и ";
	ТекстИсполнитель = ТекстИсполнитель + " с другой стороны, подписали настоящий заказ на выполнение перевозки груза на следующих условиях:";
		
	ТелоОбъектXDTO.headerText = ТекстЗаказчик + ТекстИсполнитель;
		
	///////////////////////////////////////////////////////////////////////////
	
	МаршрутОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "route");
	МаршрутОбъектXDTO.Path = "";
	Для Каждого ТочкаМаршрута Из ВхДанные.ТочкиМаршрута Цикл
		МаршрутОбъектXDTO.Path = МаршрутОбъектXDTO.Path + ТочкаМаршрута.Действие + "(" + ТочкаМаршрута.Город + ") - ";
	КонецЦикла;
	
	Если СтрДлина(МаршрутОбъектXDTO.Path)>3 Тогда
		МаршрутОбъектXDTO.Path = Лев(МаршрутОбъектXDTO.Path, СтрДлина(МаршрутОбъектXDTO.Path)-3);
	КонецЕсли;
	
	Для Каждого ТочкаМаршрута Из ВхДанные.ТочкиМаршрута Цикл
		
		МестоОбъект = ПолучитьОбъектXDTO(Фабрика, МаршрутОбъектXDTO, "location");
		
		ДействиеОбъект = ПолучитьОбъектXDTO(Фабрика, МестоОбъект, "action");
		ДействиеОбъект.method = "на усмотрение перевозчика";
		ДействиеОбъект.__content = ТочкаМаршрута.Действие;
		ДействиеОбъект.type = ТочкаМаршрута.type;
		
		МестоОбъект.action = ДействиеОбъект;
		
		АдресОбъект = ПолучитьОбъектXDTO(Фабрика, МестоОбъект, "address");
		АдресОбъект.City = ТочкаМаршрута.Город;
		АдресОбъект.Locality = ТочкаМаршрута.Адрес;
		//АдресОбъект.latitude = ТочкаМаршрута.Широта;
		//АдресОбъект.longitude = ТочкаМаршрута.Долгота;
		
		МестоОбъект.address = АдресОбъект;
		
		Агент = ПолучитьОбъектXDTO(Фабрика, МестоОбъект, "agent");
		
		Если ТочкаМаршрута.Действие = "Погрузка" Тогда
			
			Агент.Role = "Грузоотправитель";
			Агент.title = ВхДанные.Грузоотправитель;
			Агент.Contact = ВхДанные.КонтактноеЛицоПоАдресу;
			
		Иначе
			
			Агент.Role = "Грузополучатель";
			Агент.title = ВхДанные.Грузополучатель;
			Агент.Contact = ВхДанные.КонтактноеЛицоПоАдресуРазгрузки;
			
		КонецЕсли;
		
		
		МестоОбъект.agent = Агент;
		МестоОбъект.date = ТочкаМаршрута.Дата;
		МестоОбъект.time = ТочкаМаршрута.Время;
		МестоОбъект.duration = ТочкаМаршрута.Продолжительность;
		
		ГрузыXDTO = ПолучитьОбъектXDTO(Фабрика, МестоОбъект, "list");
		ГрузыXDTO.role = "Грузы";
		
		Отбор = Новый Структура;
		Отбор.Вставить("uid_ТочкиМаршрута", ТочкаМаршрута.uid);
		ГрузыВТочке = ВхДанные.Грузы.НайтиСтроки(Отбор);
		
		Для Каждого СтрГруз Из ГрузыВТочке Цикл
			Груз = ПолучитьОбъектXDTO(Фабрика, ГрузыXDTO, "cargo");
			Груз.adr = "";
			Груз.name = СтрГруз.ГрузНаименование;
			Груз.amount = СтрГруз.Количество;
			Груз.package = СтрГруз.Упаковка;
			
			Размеры = ПолучитьОбъектXDTO(Фабрика, Груз, "dimensions");
			Размеры.unit = "м";
			Размеры.__content = Формат(СтрГруз.Длина, "ЧН=0")+"/"+Формат(СтрГруз.Ширина, "ЧН=0")+"/"+Формат(СтрГруз.Высота, "ЧН=0");
			Груз.dimensions = Размеры;
			
			Объем = ПолучитьОбъектXDTO(Фабрика, Груз, "Volume");
			Объем.unit = "куб. м";
			Объем.__content = СтрГруз.Объем;
			Груз.volume = Объем;
			
			Вес = ПолучитьОбъектXDTO(Фабрика, Груз, "Weight");
			Вес.unit = "т";
			Вес.__content = СтрГруз.Вес;
			Груз.Weight = Вес;
			
			Груз.cost = СтрГруз.Стоимость;
			
			Груз.requirements = СтрГруз.ОсобыеТребования;
			
			ГрузыXDTO.Cargo.Добавить(Груз);
		КонецЦикла;
		
		МестоОбъект.List = ГрузыXDTO;
		
		МаршрутОбъектXDTO.Location.Добавить(МестоОбъект);
		
	КонецЦикла;
	
	ТелоОбъектXDTO.route = МаршрутОбъектXDTO;
	
	//////////////////////////////////////////////////////////////////////////
	
	ТранспортОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "transport");
	ВодителиОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "drivers");
	
	ТребованияОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТранспортОбъектXDTO, "requirements");
	ГрузоподъемностьОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТребованияОбъектXDTO, "Capacity");
	ГрузоподъемностьОбъектXDTO.unit = "тонн"; //???
	ГрузоподъемностьОбъектXDTO.__content = Строка(ВхДанные.Грузоподъемность);
	
	ТребованияОбъектXDTO.Capacity = ГрузоподъемностьОбъектXDTO;
	
	ТребованияОбъектXDTO.type = ВхДанные.ТипКузова;
	
	ОпцииОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТребованияОбъектXDTO, "Options");
	
	Если ВхДанные.TIR Тогда
		ОпцииОбъектXDTO.option.Добавить("TIR");
	Иначе
		ОпцииОбъектXDTO.option.Добавить("");
	КонецЕсли;	
	
	Если ВхДанные.CMR Тогда
		ОпцииОбъектXDTO.option.Добавить("CMR");
	Иначе
		ОпцииОбъектXDTO.option.Добавить("");
	КонецЕсли;	
	
	Если ВхДанные.T1 = Истина Тогда
		ОпцииОбъектXDTO.option.Добавить("T1");
	Иначе
		ОпцииОбъектXDTO.option.Добавить("");
	КонецЕсли;	
	
	Если ВхДанные.СанКнижкаТС Тогда
		ОпцииОбъектXDTO.option.Добавить("Сан. книжка ТС");
	Иначе
		ОпцииОбъектXDTO.option.Добавить("");
	КонецЕсли;	
	
	Если ВхДанные.МедКнижкаВодителя = Истина Тогда
		ОпцииОбъектXDTO.option.Добавить("Мед. книжка водителя");
	Иначе
		ОпцииОбъектXDTO.option.Добавить("");
	КонецЕсли;	
	
	ТребованияОбъектXDTO.options = ОпцииОбъектXDTO;
	
	ТребованияОбъектXDTO.notes = Строка(ВхДанные.Примечание);
	
	ТранспортОбъектXDTO.requirements = ТребованияОбъектXDTO;
	
	ТСОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТранспортОбъектXDTO, "List");
	Для Каждого СтрТранспорт Из ВхДанные.Транспорт Цикл
		
		СцепкаОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ТСОбъектXDTO, "Vehicle");
		
		ТягачОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, СцепкаОбъектXDTO, "Tractor");
		ПрицепОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, СцепкаОбъектXDTO, "Trailer");
		
		ТягачОбъектXDTO.Brand = СтрТранспорт.МаркаТягача;
		ТягачОбъектXDTO.Model = СтрТранспорт.МодельТягача;
		ТягачОбъектXDTO.RegNum = СтрТранспорт.РегНомерТягача;
		
		ПрицепОбъектXDTO.Brand = СтрТранспорт.МаркаПрицепа;
		ПрицепОбъектXDTO.Model = СтрТранспорт.МодельПрицепа;
		ПрицепОбъектXDTO.RegNum = СтрТранспорт.РегНомерПрицепа;
		
		СцепкаОбъектXDTO.Tractor = ТягачОбъектXDTO;
		СцепкаОбъектXDTO.Trailer = ПрицепОбъектXDTO;
		
		ТСОбъектXDTO.Vehicle.Добавить(СцепкаОбъектXDTO);
		
	КонецЦикла;
	ТранспортОбъектXDTO.List = ТСОбъектXDTO;
	
	ТелоОбъектXDTO.transport = ТранспортОбъектXDTO;
	
	ВодительОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ВодителиОбъектXDTO, "Driver");
	
	Для Каждого СтрВодитель Из ВхДанные.Водители Цикл
		
		ВодительОбъектXDTO.name = Строка(СтрВодитель.ФИО);
		ВодительОбъектXDTO.passport = СтрВодитель.Паспорт;
		ВодительОбъектXDTO.driverLicense = СтрВодитель.НомерВодительскогоУдостоверения;
		ВодительОбъектXDTO.mobile = СтрВодитель.Телефон;
		
		ВодителиОбъектXDTO.driver.Добавить(ВодительОбъектXDTO);
		
	КонецЦикла;
	
	ТелоОбъектXDTO.drivers = ВодителиОбъектXDTO;
	
	//////////////////////////////////////////////////////////////////////////
	
	РазделОплата = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "payment");
	РазделОплата.header = "Оплата перевозки";
	
	РазделОплатаИтого = ПолучитьОбъектXDTO(Фабрика, РазделОплата, "total");
	РазделОплатаИтого.name = "Оплата перевозки";
	РазделОплатаИтого.value = ВхДанные.СуммаИтого;
	РазделОплатаИтого.unit = ВхДанные.Валюта;
	РазделОплатаИтого.timeForTransport = ВхДанные.КоличествоЧасов;
	РазделОплатаИтого.minWorkTime = ВхДанные.КоличествоЧасов;
	
	РазделОплата.total = РазделОплатаИтого;
	
	ЧастиОплаты = ПолучитьОбъектXDTO(Фабрика, РазделОплата, "parts");
	
	Для Каждого СтрГрафик Из ВхДанные.ГрафикОплаты Цикл
		
		УсловияОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, ЧастиОплаты, "part");
		УсловияОбъектXDTO.type = "final";
		УсловияОбъектXDTO.value = СтрГрафик.Сумма;
		УсловияОбъектXDTO.currency = ВхДанные.Валюта;
		УсловияОбъектXDTO.method = СтрГрафик.ВидОплаты;

		Документ = ПолучитьОбъектXDTO(Фабрика, УсловияОбъектXDTO, "docs");
		Документ.__content = "";
		Документ.type = "Копии";
		
		УсловияОбъектXDTO.docs = Документ;
		
		ЧастиОплаты.part.Добавить(УсловияОбъектXDTO);
		
	КонецЦикла;
	
	РазделОплата.parts = ЧастиОплаты;
	РазделОплата.notes = "";
	
	ТелоОбъектXDTO.payment = РазделОплата;
	
	//////////////////////////////////////////////////////////////////////////
	
	РазделДопУсловие = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "additional");
	РазделДопУсловие.header = "Дополнительные условия";
	РазделДопУсловие.term = ВхДанные.ДополнительныеУсловия;
	РазделДопУсловие.agreement = "";
	
	ТелоОбъектXDTO.additional = РазделДопУсловие;
	
	//////////////////////////////////////////////////////////////////////////
	
	РазделШтрафныеСанкции = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "penalties");
	РазделШтрафныеСанкции.header = "Штрафные санкции и ответственность";
	РазделШтрафныеСанкции.text = ВхДанные.ШтрафныеСанкцииИОтветственность;
	
	ТелоОбъектXDTO.penalties = РазделШтрафныеСанкции;
	
	//////////////////////////////////////////////////////////////////////////
	
	//РазделПрочее = ПолучитьОбъектXDTO(Фабрика, ТелоОбъектXDTO, "section");
	//УсловияОбъектXDTO = ПолучитьОбъектXDTO(Фабрика, РазделПрочее, "term");
	//УсловияОбъектXDTO.__content = ВхДанные.Прочее;
	//РазделПрочее.Term.Добавить(УсловияОбъектXDTO);
	//
	//ТелоОбъектXDTO.Section.Добавить(РазделПрочее);
	
	//////////////////////////////////////////////////////////////////////////
	
	ДокументОбъектXDTO.body = ТелоОбъектXDTO;
	
	Агенты = ПолучитьОбъектXDTO(Фабрика, ДокументОбъектXDTO, "agents");
	
	АгентКонтрагент = ПолучитьОбъектXDTO(Фабрика, Агенты, "agent");
	АгентОрганизация = ПолучитьОбъектXDTO(Фабрика, Агенты, "agent");
	
	Если ВхДанные.РольКонтрагента = 1 Тогда
		АгентКонтрагент.role = "Заказчик";
		АгентОрганизация.role = "Перевозчик";
	Иначе	
		АгентКонтрагент.role = "Перевозчик";
		АгентОрганизация.role = "Заказчик";
	КонецЕсли;
	
	Если ВхДанные.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда //пока хотя бы так
		АгентКонтрагент.ownership = "ИП";
	Иначе
		АгентКонтрагент.ownership = "ООО";
	КонецЕсли;
	
	АгентОрганизация.ownership = "ООО";
	
	АгентКонтрагент.title = ВхДанные.Контрагент.НаименованиеПолное;
	АгентОрганизация.title = ВхДанные.Организация.НаименованиеПолное;
	
	АгентКонтрагент.contact = Строка(ВхДанные.Контрагент.ОсновноеКонтактноеЛицо);
	АгентОрганизация.contact = Строка(ВхДанные.Организация.ОсновноеКонтактноеЛицо);
	
	КонтрагентЮрАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ВхДанные.Контрагент, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
	КонтрагентФактАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ВхДанные.Контрагент, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"));
	
	РеквизитыКонтрагента = "ИНН: "+ВхДанные.Контрагент.ИНН+Символы.ВК+";"+
	?(ЗначениеЗаполнено(ВхДанные.Контрагент.КПП), "КПП: "+ВхДанные.Контрагент.КПП+Символы.ПС+";","")+
	?(ЗначениеЗаполнено(КонтрагентЮрАдрес), "Юр. адрес: "+КонтрагентЮрАдрес+Символы.ВК+";","")+
	?(ЗначениеЗаполнено(КонтрагентФактАдрес), "Факт. адрес: "+КонтрагентФактАдрес+Символы.ВК+";","");
	
	АгентКонтрагент.requisites = РеквизитыКонтрагента;
	
	ОрганизацияЮрАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ВхДанные.Организация, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	ОрганизацияФактАдрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ВхДанные.Организация, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	РеквизитыОрганизации = "ИНН: "+ВхДанные.Организация.ИНН+Символы.ВК+";"+
	?(ЗначениеЗаполнено(ВхДанные.Организация.КПП), "КПП: "+ВхДанные.Организация.КПП+Символы.ПС+";","")+
	?(ЗначениеЗаполнено(ОрганизацияЮрАдрес), "Юр. адрес: "+ОрганизацияЮрАдрес+Символы.ПС+";","")+
	?(ЗначениеЗаполнено(ОрганизацияФактАдрес), "Факт. адрес: "+ОрганизацияФактАдрес+Символы.ПС+";","");
	
	АгентОрганизация.requisites = РеквизитыОрганизации;
	
	Агенты.agent.Добавить(АгентКонтрагент);
	Агенты.agent.Добавить(АгентОрганизация);
	
	ДокументОбъектXDTO.Agents = Агенты;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ФайлЗаявки);
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ДокументОбъектXDTO.Проверить();
	
	Фабрика.ЗаписатьXML(ЗаписьXML, ДокументОбъектXDTO, "document");
	
	ЗаписьXML.Закрыть();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ИмяФайла", ФайлЗаявки);
	СтруктураДанных.Вставить("Контрагент", ВхДанные.Контрагент);
	СтруктураДанных.Вставить("Описание", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Заявка №%1 от %2", СокрЛП(ВхДанные.Номер), Формат(ВхДанные.Дата, "ДЛФ=D")));
		
	Возврат СтруктураДанных;

КонецФункции

//Работа с XDTO
Функция ПолучитьОбъектXDTO(Фабрика, Владелец, Имя, ЗначениеСвойства = "") Экспорт
	
	Если ТипЗнч(Владелец) = Тип("ПакетXDTO") Тогда
        СвойствоXDTO = Владелец.КорневыеСвойства.Получить(Имя);
	ИначеЕсли ТипЗнч(Владелец) = Тип("ОбъектXDTO") Тогда
		СвойствоXDTO = Владелец.Свойства().Получить(Имя);	
    Иначе
        СвойствоXDTO = Владелец.Свойства.Получить(Имя);
	КонецЕсли;
	
	Если СвойствоXDTO = Неопределено Тогда
		Возврат Неопределено
	КонецЕсли;
	
    ТипXDTO = СвойствоXDTO.Тип;
    Если  ТипЗнч(ТипXDTO) = Тип("ТипЗначенияXDTO") Тогда
        ОбъектXDTO = Фабрика.Создать(ТипXDTO, ЗначениеСвойства);
    Иначе
        ОбъектXDTO = Фабрика.Создать(ТипXDTO);
	КонецЕсли; 
	
    Возврат ОбъектXDTO;
	
КонецФункции

Функция ПолучитьСтруктуруЗаявки()
	
	ТЗВодители = Новый ТаблицаЗначений;
	ТЗВодители.Колонки.Добавить("ФИО", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗВодители.Колонки.Добавить("Паспорт", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗВодители.Колонки.Добавить("НомерВодительскогоУдостоверения", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗВодители.Колонки.Добавить("Телефон", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	
	ТЗТранспорт = Новый ТаблицаЗначений;
	ТЗТранспорт.Колонки.Добавить("МаркаТягача", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("МодельТягача", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("РегНомерТягача", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("МаркаПрицепа", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("МодельПрицепа", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	ТЗТранспорт.Колонки.Добавить("РегНомерПрицепа", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	
	ТЗГрафикОплаты = Новый ТаблицаЗначений;
	ТЗГрафикОплаты.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТЗГрафикОплаты.Колонки.Добавить("ФормаОплаты", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗГрафикОплаты.Колонки.Добавить("ВидОплаты", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗГрафикОплаты.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100))); 
	ТЗГрафикОплаты.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200))); 
	ТЗГрафикОплаты.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12,2))); 
	
	ТЗТочкиМаршрута = Новый ТаблицаЗначений;
	ТЗТочкиМаршрута.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТЗТочкиМаршрута.Колонки.Добавить("Время", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Время)));
	ТЗТочкиМаршрута.Колонки.Добавить("Действие", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗТочкиМаршрута.Колонки.Добавить("type", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗТочкиМаршрута.Колонки.Добавить("Город", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗТочкиМаршрута.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗТочкиМаршрута.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТЗТочкиМаршрута.Колонки.Добавить("КонтрагентНаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ТЗТочкиМаршрута.Колонки.Добавить("Продолжительность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3,0)));
	ТЗТочкиМаршрута.Колонки.Добавить("КонтактноеЛицо", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗТочкиМаршрута.Колонки.Добавить("uid", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	ТЗТочкиМаршрута.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,6)));
	ТЗТочкиМаршрута.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,6)));
	
	ТЗГрузы = Новый ТаблицаЗначений;
	ТЗГрузы.Колонки.Добавить("uid_ТочкиМаршрута", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	ТЗГрузы.Колонки.Добавить("ГрузНаименование", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));	
	ТЗГрузы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));	
	ТЗГрузы.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТЗГрузы.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));	
	ТЗГрузы.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗГрузы.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗГрузы.Колонки.Добавить("Ширина", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗГрузы.Колонки.Добавить("Высота", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3)));
	ТЗГрузы.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,3)));
	ТЗГрузы.Колонки.Добавить("ADR", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
	ТЗГрузы.Колонки.Добавить("ОсобыеТребования", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(200)));
	
	
	СтруктураЗаявки = Новый Структура;
	СтруктураЗаявки.Вставить("ТипДокумента");
	СтруктураЗаявки.Вставить("CMR");
	СтруктураЗаявки.Вставить("T1");
	СтруктураЗаявки.Вставить("TIR");
	СтруктураЗаявки.Вставить("Валюта");
	СтруктураЗаявки.Вставить("СуммаИтого");
	СтруктураЗаявки.Вставить("Водители", ТЗВодители);
	СтруктураЗаявки.Вставить("ГрафикОплаты", ТЗГрафикОплаты);
	СтруктураЗаявки.Вставить("Грузоподъемность");
	СтруктураЗаявки.Вставить("Дата");
	СтруктураЗаявки.Вставить("КоличествоЧасов");
	СтруктураЗаявки.Вставить("Номер");
	СтруктураЗаявки.Вставить("Договор");
	СтруктураЗаявки.Вставить("ДополнительныеУсловия");
	СтруктураЗаявки.Вставить("Контрагент");
	СтруктураЗаявки.Вставить("КонтрагентНаименованиеПолное");
	СтруктураЗаявки.Вставить("МедКнижкаВодителя");
	СтруктураЗаявки.Вставить("НомерДокумента");
	СтруктураЗаявки.Вставить("Организация");
	СтруктураЗаявки.Вставить("ОснованиеПредставителяКонтрагента");
	СтруктураЗаявки.Вставить("ОснованиеПредставителяОрганизации");
	СтруктураЗаявки.Вставить("ОсобыеУсловияОплаты");
	СтруктураЗаявки.Вставить("ПредставительКонтрагента");
	СтруктураЗаявки.Вставить("ПредставительОрганизации");
	СтруктураЗаявки.Вставить("Примечание");
	СтруктураЗаявки.Вставить("Прочее");
	СтруктураЗаявки.Вставить("РольКонтрагента");
	СтруктураЗаявки.Вставить("СанКнижкаТС");
	СтруктураЗаявки.Вставить("ТипДокумента");
	СтруктураЗаявки.Вставить("ТипКузова");
	СтруктураЗаявки.Вставить("ШтрафныеСанкцииИОтветственность");
	СтруктураЗаявки.Вставить("ТипКузова");
	СтруктураЗаявки.Вставить("ТочкиМаршрута", ТЗТочкиМаршрута);
	СтруктураЗаявки.Вставить("Грузы", ТЗГрузы);
	СтруктураЗаявки.Вставить("Транспорт", ТЗТранспорт);
	СтруктураЗаявки.Вставить("Водители", ТЗВодители);
	
	Возврат СтруктураЗаявки;
	
КонецФункции

Функция СформироватьЗаявку(ID, ПутьКФайлу)
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	ФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
	Макет = ЭтотОбъект.ПолучитьМакет("СхемаЗаявки");
	Макет.Записать(ФайлСхемы);
	
	Фабрика = СоздатьФабрикуXDTO(ФайлСхемы);
	ПакетATI = Фабрика.Пакеты.Получить("https://d.ati.su/xml/ns/0.1/");
	
	ДокументОбъектXDTO = Фабрика.ПрочитатьXML(ЧтениеXML);
	
	ДанныеЗаявки = ПолучитьСтруктуруЗаявки();
	ДанныеЗаявки.Вставить("ID", ID);
	
	// Чтение ДокументОбъектXDTO в структуру заявки
	
	Если ЭтоСтороннееРешение И НЕ ПустаяСтрока(ПутьКФункцииДанныеЗаявки) Тогда
		Выполнить("Результат = " + ПутьКФункцииФормированияЗаявки);
	Иначе
		Результат = СформироватьДокументЗаявка(ДанныеЗаявки);
	КонецЕсли;
	
КонецФункции


Функция ВыполнитьРазборЭлектронныхДокументов(Стр, АдресФайла, ИмяФайла, ИдентификаторФормы) Экспорт
	
	ПутьКФайлу = КаталогВременныхФайлов() + ИмяФайла;	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	Если ТипЗнч(ДанныеФайла) = Тип("ДвоичныеДанные") Тогда
		ДанныеФайла.Записать(ПутьКФайлу);
	КонецЕсли;
	
	СтруктураРазбора = Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).СформироватьДеревоРазбора(ПутьКФайлу);
	
	Если СтруктураРазбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;
	
	Стр.Дата = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Дата");
	Стр.Номер = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Номер");
	Стр.ВидЭД = СтрокаОбъекта.ВидЭД;
	
	Стр.СтруктураРазбора = ПоместитьВоВременноеХранилище(СтруктураРазбора, ИдентификаторФормы);
	
	ДокументСсылка = Неопределено;
	Если Стр.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктВыполненныхРабот")
		ИЛИ Стр.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель") Тогда
		
		ИмяТаблицы = "ПоступлениеТоваровУслуг";
		
	ИначеЕсли Стр.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура") Тогда
		
		ИмяТаблицы = "СчетФактураПолученный";
		
	ИначеЕсли Стр.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетНаОплату") Тогда
		
		ИмяТаблицы = "СчетНаОплатуПоставщика";
		
	КонецЕсли;
	
	СтруктураИдентификатора = ПолучитьСтруктуруИдентификатора(Стр.ID);
	ДокументСсылка = НайтиДокументПоДокИД(ИмяТаблицы, СтруктураИдентификатора.ID);
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		Стр.Вставить("Документ1С", ДокументСсылка);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДОКУМЕНТОВ 1С ИЗ XML

Функция ВыполнитьРазборФайла(ПутьКФайлу)
	
	Файл = Новый Файл(ПутьКФайлу);
	Расширение = Файл.Расширение;
	Файл = Неопределено;
	
	ЧтениеXML = Новый ЧтениеXML;

	Если НРег(Расширение) = "zip" Тогда
		МаксРазмер = 0;
		
		ИмяВременногоКаталога = КаталогВременныхФайлов()+Строка(Новый УникальныйИдентификатор);
		СоздатьКаталог(ИмяВременногоКаталога);
		РаспаковатьАрхивРекурсивно(ПутьКФайлу, ИмяВременногоКаталога);
		МассивФайлов = НайтиФайлы(ИмяВременногоКаталога, "*.xml");
		Для Каждого НайденныйФайл Из МассивФайлов Цикл
			//пока тупо по размеру ищем
			Если НайденныйФайл.Размер()>МаксРазмер Тогда
				ПутьКФайлу = НайденныйФайл.ПолноеИмя;
				МаксРазмер = НайденныйФайл.Размер();
			КонецЕсли;
		КонецЦикла;
	
		Если МаксРазмер=0 Тогда
			//видимо ничего путного не нашли или не искали
			Сообщить("Файлов для загрузки не обнаружено");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
		
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	
	Попытка
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
	    Возврат Неопределено;
	КонецПопытки;
	
	Возврат Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).СформироватьДеревоРазбора(ПутьКФайлу);
	
КонецФункции

Функция СоздатьБанковскийСчет(Владелец, ИмяРеквизита, ПараметрыОбъекта)
	
	СчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
	СчетОбъект.Владелец = Владелец;
	СчетОбъект.Наименование = "Основной р/с";
	СчетОбъект.НомерСчета = ПараметрыОбъекта[ИмяРеквизита+"Счет"];  
	СчетОбъект.ВидСчета = "Расчетный";
	СчетОбъект.ВалютаДенежныхСредств = ПараметрыОбъекта.Валюта;
	
	Попытка
		СчетОбъект.Записать();
	Исключение
		Сообщить("Ошибка записи банковского счета для "+ИмяРеквизита);
	    Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат СчетОбъект.Ссылка;
	
КонецФункции

Функция ТекстЗапросаПоискАкта()
	
	Возврат "ВЫБРАТЬ
	        |	&Номер,
	        |	&Дата,
	        |	&КонтрагентИНН,
	        |	&КонтрагентКПП,
	        |	&ОрганизацияИНН,
	        |	&ОрганизацияКПП
	        |ПОМЕСТИТЬ ВходныеПераметры
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВходныеПераметры.Номер,
	        |	ВходныеПераметры.Дата,
	        |	ВходныеПераметры.КонтрагентИНН,
	        |	ВходныеПераметры.КонтрагентКПП,
	        |	ВходныеПераметры.ОрганизацияИНН,
	        |	ВходныеПераметры.ОрганизацияКПП,
	        |	Организации.Ссылка КАК Организация
	        |ПОМЕСТИТЬ ПоискОрганизации
	        |ИЗ
	        |	ВходныеПераметры КАК ВходныеПераметры
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	        |		ПО ВходныеПераметры.ОрганизацияИНН = Организации.ИНН
	        |			И ВходныеПераметры.ОрганизацияКПП = Организации.КПП
	        |			И (НЕ Организации.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискОрганизации.Номер,
	        |	ПоискОрганизации.Дата,
	        |	ПоискОрганизации.КонтрагентИНН,
	        |	ПоискОрганизации.КонтрагентКПП,
	        |	ПоискОрганизации.ОрганизацияИНН,
	        |	ПоискОрганизации.ОрганизацияКПП,
	        |	ПоискОрганизации.Организация,
	        |	Контрагенты.Ссылка КАК Контрагент
	        |ПОМЕСТИТЬ ПоискКонтрагента
	        |ИЗ
	        |	ПоискОрганизации КАК ПоискОрганизации
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	        |		ПО ПоискОрганизации.КонтрагентИНН = Контрагенты.ИНН
	        |			И ПоискОрганизации.КонтрагентКПП = Контрагенты.КПП
	        |			И (НЕ Контрагенты.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискКонтрагента.Номер,
	        |	ПоискКонтрагента.Дата,
	        |	ПоискКонтрагента.КонтрагентИНН,
	        |	ПоискКонтрагента.КонтрагентКПП,
	        |	ПоискКонтрагента.ОрганизацияИНН,
	        |	ПоискКонтрагента.ОрганизацияКПП,
	        |	ПоискКонтрагента.Организация,
	        |	ПоискКонтрагента.Контрагент,
	        |	ПоступлениеТоваровУслуг.Ссылка КАК Документ
	        |ИЗ
	        |	ПоискКонтрагента КАК ПоискКонтрагента
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	        |		ПО (НЕ ПоступлениеТоваровУслуг.ПометкаУдаления)
	        |			И ПоискКонтрагента.Номер = ПоступлениеТоваровУслуг.НомерВходящегоДокумента
	        |			И ПоискКонтрагента.Дата = ПоступлениеТоваровУслуг.ДатаВходящегоДокумента
	        |			И ПоискКонтрагента.Контрагент = ПоступлениеТоваровУслуг.Контрагент
	        |			И ПоискКонтрагента.Организация = ПоступлениеТоваровУслуг.Организация
	        |ГДЕ
	        |	ПоискКонтрагента.Организация ЕСТЬ НЕ NULL 
	        |	И ПоискКонтрагента.Контрагент ЕСТЬ НЕ NULL 
	        |
	        |ОБЪЕДИНИТЬ
	        |
	        |ВЫБРАТЬ
	        |	ПоискКонтрагента.Номер,
	        |	ПоискКонтрагента.Дата,
	        |	ПоискКонтрагента.КонтрагентИНН,
	        |	ПоискКонтрагента.КонтрагентКПП,
	        |	ПоискКонтрагента.ОрганизацияИНН,
	        |	ПоискКонтрагента.ОрганизацияКПП,
	        |	ПоискКонтрагента.Организация,
	        |	ПоискКонтрагента.Контрагент,
	        |	ПоступлениеТоваровУслуг.Ссылка
	        |ИЗ
	        |	ПоискКонтрагента КАК ПоискКонтрагента
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	        |		ПО (НЕ ПоступлениеТоваровУслуг.ПометкаУдаления)
	        |			И ПоискКонтрагента.Номер = ПоступлениеТоваровУслуг.НомерВходящегоДокумента
	        |			И ПоискКонтрагента.Дата = ПоступлениеТоваровУслуг.ДатаВходящегоДокумента
	        |ГДЕ
	        |	(ПоискКонтрагента.Организация ЕСТЬ NULL 
	        |			ИЛИ ПоискКонтрагента.Контрагент ЕСТЬ NULL )";

	
КонецФункции

Функция ТекстЗапросаПоискСчетаФактуры()
	
	Возврат "ВЫБРАТЬ
	        |	&Номер,
	        |	&Дата,
	        |	&КонтрагентИНН,
	        |	&КонтрагентКПП,
	        |	&ОрганизацияИНН,
	        |	&ОрганизацияКПП
	        |ПОМЕСТИТЬ ВходныеПераметры
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВходныеПераметры.Номер,
	        |	ВходныеПераметры.Дата,
	        |	ВходныеПераметры.КонтрагентИНН,
	        |	ВходныеПераметры.КонтрагентКПП,
	        |	ВходныеПераметры.ОрганизацияИНН,
	        |	ВходныеПераметры.ОрганизацияКПП,
	        |	Организации.Ссылка КАК Организация
	        |ПОМЕСТИТЬ ПоискОрганизации
	        |ИЗ
	        |	ВходныеПераметры КАК ВходныеПераметры
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	        |		ПО ВходныеПераметры.ОрганизацияИНН = Организации.ИНН
	        |			И ВходныеПераметры.ОрганизацияКПП = Организации.КПП
	        |			И (НЕ Организации.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискОрганизации.Номер,
	        |	ПоискОрганизации.Дата,
	        |	ПоискОрганизации.КонтрагентИНН,
	        |	ПоискОрганизации.КонтрагентКПП,
	        |	ПоискОрганизации.ОрганизацияИНН,
	        |	ПоискОрганизации.ОрганизацияКПП,
	        |	ПоискОрганизации.Организация,
	        |	Контрагенты.Ссылка КАК Контрагент
	        |ПОМЕСТИТЬ ПоискКонтрагента
	        |ИЗ
	        |	ПоискОрганизации КАК ПоискОрганизации
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	        |		ПО ПоискОрганизации.КонтрагентИНН = Контрагенты.ИНН
	        |			И ПоискОрганизации.КонтрагентКПП = Контрагенты.КПП
	        |			И (НЕ Контрагенты.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискКонтрагента.Номер,
	        |	ПоискКонтрагента.Дата,
	        |	ПоискКонтрагента.КонтрагентИНН,
	        |	ПоискКонтрагента.КонтрагентКПП,
	        |	ПоискКонтрагента.ОрганизацияИНН,
	        |	ПоискКонтрагента.ОрганизацияКПП,
	        |	ПоискКонтрагента.Организация,
	        |	ПоискКонтрагента.Контрагент,
	        |	СчетФактураПолученный.Ссылка КАК Документ
	        |ИЗ
	        |	ПоискКонтрагента КАК ПоискКонтрагента
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	        |		ПО (НЕ СчетФактураПолученный.ПометкаУдаления)
	        |			//И (СчетФактураПолученный.Проведен)
	        |			И ПоискКонтрагента.Номер = СчетФактураПолученный.НомерВходящегоДокумента
	        |			И ПоискКонтрагента.Дата = СчетФактураПолученный.ДатаВходящегоДокумента
	        |			И ПоискКонтрагента.Контрагент = СчетФактураПолученный.Контрагент
	        |			И ПоискКонтрагента.Организация = СчетФактураПолученный.Организация
	        |ГДЕ
	        |	ПоискКонтрагента.Организация ЕСТЬ НЕ NULL 
	        |	И ПоискКонтрагента.Контрагент ЕСТЬ НЕ NULL 
	        |
	        |ОБЪЕДИНИТЬ
	        |
	        |ВЫБРАТЬ
	        |	ПоискКонтрагента.Номер,
	        |	ПоискКонтрагента.Дата,
	        |	ПоискКонтрагента.КонтрагентИНН,
	        |	ПоискКонтрагента.КонтрагентКПП,
	        |	ПоискКонтрагента.ОрганизацияИНН,
	        |	ПоискКонтрагента.ОрганизацияКПП,
	        |	ПоискКонтрагента.Организация,
	        |	ПоискКонтрагента.Контрагент,
	        |	СчетФактураПолученный.Ссылка
	        |ИЗ
	        |	ПоискКонтрагента КАК ПоискКонтрагента
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	        |		ПО (НЕ СчетФактураПолученный.ПометкаУдаления)
	        |			//И (СчетФактураПолученный.Проведен)
	        |			И ПоискКонтрагента.Номер = СчетФактураПолученный.НомерВходящегоДокумента
	        |			И ПоискКонтрагента.Дата = СчетФактураПолученный.ДатаВходящегоДокумента
	        |ГДЕ
	        |	ПоискКонтрагента.Организация ЕСТЬ NULL 
	        |	ИЛИ ПоискКонтрагента.Контрагент ЕСТЬ NULL ";
	
КонецФункции

Функция ТекстЗапросаПоискПлатежногоПоручения()
	
	Возврат "ВЫБРАТЬ
	        |	&Номер,
	        |	&Дата,
	        |	&КонтрагентИНН,
	        |	&КонтрагентКПП,
	        |	&КонтрагентСчет,
	        |	&ОрганизацияИНН,
	        |	&ОрганизацияКПП,
	        |	&ОрганизацияСчет
	        |ПОМЕСТИТЬ ВходныеПераметры
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВходныеПераметры.Номер,
	        |	ВходныеПераметры.Дата,
	        |	ВходныеПераметры.КонтрагентИНН,
	        |	ВходныеПераметры.КонтрагентКПП,
	        |	ВходныеПераметры.КонтрагентСчет,
	        |	ВходныеПераметры.ОрганизацияИНН,
	        |	ВходныеПераметры.ОрганизацияКПП,
	        |	ВходныеПераметры.ОрганизацияСчет,
	        |	Организации.Ссылка КАК Организация
	        |ПОМЕСТИТЬ ПоискОрганизации
	        |ИЗ
	        |	ВходныеПераметры КАК ВходныеПераметры
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	        |		ПО ВходныеПераметры.ОрганизацияИНН = Организации.ИНН
	        |			И ВходныеПераметры.ОрганизацияКПП = Организации.КПП
	        |			И (НЕ Организации.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискОрганизации.Номер,
	        |	ПоискОрганизации.Дата,
	        |	ПоискОрганизации.КонтрагентИНН,
	        |	ПоискОрганизации.КонтрагентКПП,
	        |	ПоискОрганизации.КонтрагентСчет,
	        |	ПоискОрганизации.ОрганизацияИНН,
	        |	ПоискОрганизации.ОрганизацияКПП,
	        |	ПоискОрганизации.ОрганизацияСчет,
	        |	ПоискОрганизации.Организация,
	        |	БанковскиеСчета.Ссылка КАК СчетОрганизации
	        |ПОМЕСТИТЬ ПоискОрганизацииСчета
	        |ИЗ
	        |	ПоискОрганизации КАК ПоискОрганизации
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	        |		ПО ПоискОрганизации.Организация = БанковскиеСчета.Владелец
	        |			И (ПоискОрганизации.ОрганизацияСчет ПОДОБНО БанковскиеСчета.НомерСчета)
	        |			И (НЕ БанковскиеСчета.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискОрганизацииСчета.Номер,
	        |	ПоискОрганизацииСчета.Дата,
	        |	ПоискОрганизацииСчета.КонтрагентИНН,
	        |	ПоискОрганизацииСчета.КонтрагентКПП,
	        |	ПоискОрганизацииСчета.КонтрагентСчет,
	        |	ПоискОрганизацииСчета.ОрганизацияИНН,
	        |	ПоискОрганизацииСчета.ОрганизацияКПП,
	        |	ПоискОрганизацииСчета.ОрганизацияСчет,
	        |	ПоискОрганизацииСчета.Организация,
	        |	ПоискОрганизацииСчета.СчетОрганизации,
	        |	Контрагенты.Ссылка КАК Контрагент
	        |ПОМЕСТИТЬ ПоискКонтрагента
	        |ИЗ
	        |	ПоискОрганизацииСчета КАК ПоискОрганизацииСчета
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	        |		ПО ПоискОрганизацииСчета.КонтрагентИНН = Контрагенты.ИНН
	        |			И ПоискОрганизацииСчета.КонтрагентКПП = Контрагенты.КПП
	        |			И (НЕ Контрагенты.ПометкаУдаления)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискКонтрагента.Номер,
	        |	ПоискКонтрагента.Дата,
	        |	ПоискКонтрагента.КонтрагентИНН,
	        |	ПоискКонтрагента.КонтрагентКПП,
	        |	ПоискКонтрагента.КонтрагентСчет,
	        |	ПоискКонтрагента.ОрганизацияИНН,
	        |	ПоискКонтрагента.ОрганизацияКПП,
	        |	ПоискКонтрагента.ОрганизацияСчет,
	        |	ПоискКонтрагента.Организация,
	        |	ПоискКонтрагента.СчетОрганизации,
	        |	ПоискКонтрагента.Контрагент,
	        |	БанковскиеСчета.Ссылка КАК СчетКонтрагента
	        |ПОМЕСТИТЬ ПоискКонтрагентаСчета
	        |ИЗ
	        |	ПоискКонтрагента КАК ПоискКонтрагента
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	        |		ПО (НЕ БанковскиеСчета.ПометкаУдаления)
	        |			И ПоискКонтрагента.Контрагент = БанковскиеСчета.Владелец
	        |			И (ПоискКонтрагента.КонтрагентСчет ПОДОБНО БанковскиеСчета.НомерСчета)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПоискКонтрагентаСчета.Номер,
	        |	ПоискКонтрагентаСчета.Дата,
	        |	ПоискКонтрагентаСчета.КонтрагентИНН,
	        |	ПоискКонтрагентаСчета.КонтрагентКПП,
	        |	ПоискКонтрагентаСчета.КонтрагентСчет,
	        |	ПоискКонтрагентаСчета.ОрганизацияИНН,
	        |	ПоискКонтрагентаСчета.ОрганизацияКПП,
	        |	ПоискКонтрагентаСчета.ОрганизацияСчет,
	        |	ПоискКонтрагентаСчета.Организация,
	        |	ПоискКонтрагентаСчета.СчетОрганизации,
	        |	ПоискКонтрагентаСчета.Контрагент,
	        |	ПоискКонтрагентаСчета.СчетКонтрагента,
	        |	ПлатежноеПоручение.Ссылка КАК Документ
	        |ИЗ
	        |	ПоискКонтрагентаСчета КАК ПоискКонтрагентаСчета
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	        |		ПО (НЕ ПлатежноеПоручение.ПометкаУдаления)
	        |			И ПоискКонтрагентаСчета.Контрагент = ПлатежноеПоручение.Контрагент
	        |			И ПоискКонтрагентаСчета.Организация = ПлатежноеПоручение.Организация
	        |			И (ПоискКонтрагентаСчета.Дата = НАЧАЛОПЕРИОДА(ПлатежноеПоручение.Дата, ДЕНЬ))";
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с агентом

Функция Получить_ATI_Docs_Agent_Catalog(Организация) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Значение КАК ATI_DOC_ID
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО ДополнительныеРеквизитыИСведения.Ссылка = ДополнительныеСведения.Свойство
	|			И (ДополнительныеСведения.Объект = &ОбъектСсылка)
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = ""ATI_Docs_Agent_Catalog""
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Организации)";
	
	Запрос.УстановитьПараметр("ОбъектСсылка", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат КаталогВременныхФайлов();
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].ATI_Docs_Agent_Catalog;
	КонецЕсли;
		
КонецФункции

///////////////////////////////////////////////////////////////////////////////
//Работа с архивами

Процедура РаспаковатьАрхивРекурсивно(ПутьКФайлу, ИмяВременногоКаталога) Экспорт
	
	ЧтениеЗИП = Новый ЧтениеZipФайла(ПутьКФайлу);
	Для Каждого Файл Из ЧтениеЗИП.Элементы Цикл
		ЧтениеЗИП.Извлечь(Файл, ИмяВременногоКаталога);
		Если Файл.Расширение = "zip" Тогда
			РаспаковатьАрхивРекурсивно(ИмяВременногоКаталога+"\"+Файл.ПолноеИмя, ИмяВременногоКаталога);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьАктАТИ(СтруктураРазбора, ИдентификаторДокумента, ПодписьИсполнителя = "", ПодписьЗаказчика = "") Экспорт
	
	КоличествоЭкземпляров = 1;
	НаПринтер = Ложь;
	
	ЭтоУСН = Ложь; //(Шапка.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);
	
	СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;	
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;	
	
	//ЗапросУслуги = Новый Запрос;
	//ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", СсылкаНаОбъект.Ссылка);
	//ЗапросУслуги.Текст = "
	//|ВЫБРАТЬ
	//|	Номенклатура КАК Номенклатура,
	//|	Номенклатура.НаименованиеПолное КАК Товар,
	//|	Количество,
	//|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	//|	Цена,
	//|	Сумма,
	//|	СтавкаНДС,
	//|	СуммаНДС
	//|ИЗ
	//|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	//|
	//|ГДЕ
	//|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	//|";
	//ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	СведенияОКонтрагенте.Вставить("КорСчет",            ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	СведенияОКонтрагенте.Вставить("Банк",               ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	СведенияОКонтрагенте.Вставить("БИК",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
		
	СведенияОбОрганизации = Новый Структура;
	СведенияОбОрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ПолноеНаименование"));
	СведенияОбОрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ИНН"));
	СведенияОбОрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Организация.КПП"));
	СведенияОбОрганизации.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ОКПО"));
	СведенияОбОрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ЮридическийАдрес_Представление"));
	СведенияОбОрганизации.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ФактическийАдрес_Представление"));
	СведенияОбОрганизации.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.НомерСчета"));
	СведенияОбОрганизации.Вставить("КорСчет",            ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.КоррСчет"));
	СведенияОбОрганизации.Вставить("Банк",               ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Наименование"));
	СведенияОбОрганизации.Вставить("БИК",                ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Код"));
		
	ДанныеЗаполненияШапки = Новый Структура;	
	ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("Курс", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Курс"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ТекстШапки", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Заголовок"));
	ДанныеЗаполненияШапки.Вставить("ОписаниеВыполненныхРабот", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "ОписаниеВыполненныхРабот"));
	ДанныеЗаполненияШапки.Вставить("Претензии", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Претензии"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
		
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &Код";
	Запрос.УстановитьПараметр("Код", ДанныеЗаполненияШапки.КодВалюты);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", мВалютаРегламентированногоУчета);
	Иначе
		ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", РезультатЗапроса.Выгрузить()[0].Ссылка);
	КонецЕсли;
	
	ИдентификаторФайла = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
	
	ТЗРабот = Новый ТаблицаЗначений;
	ТЗРабот.Колонки.Добавить("НомерСтроки");
	ТЗРабот.Колонки.Добавить("НаименованиеРабот");
	ТЗРабот.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗРабот.Колонки.Добавить("Количество");
	ТЗРабот.Колонки.Добавить("Цена");
	ТЗРабот.Колонки.Добавить("Сумма");
	ТЗРабот.Колонки.Добавить("СуммаНДС");
	ТЗРабот.Колонки.Добавить("СуммаСНДС");
	ТЗРабот.Колонки.Добавить("Описание");
	
	СтавкиНДС = Новый Массив;
	
	СтрокиТЧОписанийРабот = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СписокОписаний"));
	Для Каждого СтрокаТЧОписанийРабот Из СтрокиТЧОписанийРабот Цикл
		
		ОписаниеРабот = СтрокаТЧОписанийРабот.ЗначениеРеквизита;
		НачалоРабот = ПолучитьЗначениеРеквизита(ДеревоРазбора, ОписаниеРабот, "НачРабот");
		КонецРабот = ПолучитьЗначениеРеквизита(ДеревоРазбора, ОписаниеРабот, "КонРабот");
		Сумма = ПолучитьЗначениеРеквизита(ДеревоРазбора, ОписаниеРабот, "Сумма");
		СуммаНДС = ПолучитьЗначениеРеквизита(ДеревоРазбора, ОписаниеРабот, "СуммаНДС");
		СуммаСНДС = ПолучитьЗначениеРеквизита(ДеревоРазбора, ОписаниеРабот, "СуммаСНДС");
		
		СтрокиТЧРабот = ОписаниеРабот.Строки.НайтиСтроки(Новый Структура("Реквизит", "Работа"));
		Для Каждого СтрокаТЧРабот Из СтрокиТЧРабот Цикл
			НоваяСтрока = ТЗРабот.Добавить();
			НоваяСтрока.НомерСтроки = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот,
			"Номер");
			НоваяСтрока.НаименованиеРабот = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот,
			"Номенклатура.Наименование");
			НоваяСтрока.Описание = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот, "Описание");
			НоваяСтрока.ЕдиницаИзмерения = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот,
			"ЕдиницаИзмеренияНаименование");
			НоваяСтрока.Количество = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот, "Количество");
			НоваяСтрока.Цена = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот, "Цена");
			НоваяСтрока.Сумма = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот, "Сумма");
			НоваяСтрока.СуммаНДС = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот, "СуммаНДС");
			НоваяСтрока.СуммаСНДС = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот, "СуммаСНДС");
			
			СтавкаНДС = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧРабот, "СтавкаНДС");
			Если СтавкиНДС.Найти(СтавкаНДС) = Неопределено Тогда
				СтавкиНДС.Добавить(СтавкаНДС);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";
	Макет       = ПолучитьМакет("Акт");
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ТекстЗаголовка = НСтр("ru='Акт № %НомерДокумента% от %ДатаДокумента% г.'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеЗаполненияШапки.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеЗаполненияШапки.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
	НомерСтроки = 0;
	Для Каждого СтрокаТабличнойЧасти Из ТЗРабот Цикл	
		НомерСтроки = НомерСтроки + 1;
		ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
		ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
		ТабДокумент.Вывести(ОбластьСтроки);
	КонецЦикла;
	
	Если ТЗРабот <> Неопределено И ТЗРабот.Количество() > 0 Тогда
		Сумма    = ТЗРабот.Итог("Сумма");
		СуммаНДС = ТЗРабот.Итог("СуммаНДС");
		СуммаСНДС = ТЗРабот.Итог("СуммаСНДС");
	Иначе
		Сумма    = 0;
		СуммаНДС = 0;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	ОбластьМакета.Параметры.Всего = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ФорматСумм(Сумма);
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	Если СуммаНДС > 0 Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		
		Если СтавкиНДС.ВГраница() = 0 Тогда
			ОбластьМакета.Параметры.НДС = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ТекстНДСПоСтавке(СтавкиНДС[0], (Сумма = СуммаСНДС));
		КонецЕсли;
		
		ОбластьМакета.Параметры.ВсегоНДС = СуммаНДС;
		ОбластьМакета.Параметры.ВсегоСНДС = СуммаСНДС;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	СуммаКПрописи = Сумма;
	
	////////////////////////////////////////////////////////////////	
	
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	Если СуммаНДС = 0 Тогда
		Основание = ". НДС не облагается.";
	Иначе
		Основание = ", в т.ч.:НДС - " + РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаНДС, ДанныеЗаполненияШапки.ВалютаДокумента);
	КонецЕсли;
	
	ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Всего оказано услуг на сумму: %1%2",
		РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеЗаполненияШапки.ВалютаДокумента), Основание);
	ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("Стороны");
	ОбластьМакета.Параметры.ПредставлениеИсполнителя = СведенияОбОрганизации.ПолноеНаименование+Символы.ПС+
	"ИНН "+СведенияОбОрганизации.ИНН+Символы.ПС+
	?(ЗначениеЗаполнено(СведенияОбОрганизации.КПП), "КПП "+СведенияОбОрганизации.КПП+Символы.ПС, "")+
	?(ЗначениеЗаполнено(СведенияОбОрганизации.ЮридическийАдрес),"Юридический адрес "+СведенияОбОрганизации.ЮридическийАдрес+Символы.ПС, "")+
	?(ЗначениеЗаполнено(СведенияОбОрганизации.ФактическийАдрес), "Фактический адрес "+СведенияОбОрганизации.ФактическийАдрес, "")
	;
	ОбластьМакета.Параметры.ПредставлениеЗаказчика = СведенияОКонтрагенте.ПолноеНаименование+Символы.ПС+
	"ИНН "+СведенияОКонтрагенте.ИНН+Символы.ПС+
	?(ЗначениеЗаполнено(СведенияОКонтрагенте.КПП), "КПП "+СведенияОКонтрагенте.КПП+Символы.ПС, "")+
	?(ЗначениеЗаполнено(СведенияОКонтрагенте.ЮридическийАдрес),"Юридический адрес "+СведенияОКонтрагенте.ЮридическийАдрес+Символы.ПС, "")+
	?(ЗначениеЗаполнено(СведенияОКонтрагенте.ФактическийАдрес), "Фактический адрес "+СведенияОКонтрагенте.ФактическийАдрес, "")
	;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("АТИ_Доки");
	ОбластьМакета.Параметры.АТИ_Доки = "Документ передан через систему ЭДО ""АТИ-Доки""";
	ОбластьМакета.Параметры.ИдентификаторДокумента = ИдентификаторДокумента;
	ОбластьМакета.Параметры.ИдентификаторФайла = ИдентификаторФайла;
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	Если ЗначениеЗаполнено(ПодписьИсполнителя) Тогда
		ЗаголовокПодписиИсполнителя = "Подпись Исполнителя";
	Иначе
	    ЗаголовокПодписиИсполнителя = "Документ Исполнителем не подписан";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПодписьЗаказчика) Тогда
		ЗаголовокПодписиЗаказчика = "Подпись Заказчика";
	Иначе
	    ЗаголовокПодписиЗаказчика = "Документ Заказчиком не подписан";
	КонецЕсли;
	
	ОбластьМакета.Параметры.ЗаголовокПодписиИсполнителя = ЗаголовокПодписиИсполнителя;
	ОбластьМакета.Параметры.ЗаголовокПодписиЗаказчика = ЗаголовокПодписиЗаказчика;
	
	ОбластьМакета.Параметры.ПредставлениеПодписиИсполнителя = ПодписьИсполнителя;
	ОбластьМакета.Параметры.ПредставлениеПодписиЗаказчика = ПодписьЗаказчика;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Возврат ТабДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ СЧЕТА

Функция ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора, Тип = "Счет")
	
	ДанныеЗаполненияШапки = Новый Структура;
	
	СведенияОКонтрагенте = Новый Структура;
	СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));
	СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));
	СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));
	СведенияОКонтрагенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));
	СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));
	СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияОКонтрагенте);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);
	КонецЕсли;
	
	СведенияООрганизации = Новый Структура;
	СведенияООрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));
	СведенияООрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));
	СведенияООрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Организация.КПП"));
	СведенияООрганизации.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ОКПО"));
	СведенияООрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));
	СведенияООрганизации.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));
	
	Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);
	ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияООрганизации);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("БИКБанкаПолучателя",               ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкПолучателяПредставление",      ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаПолучателяПредставление", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
	ДанныеЗаполненияШапки.Вставить("СчетПолучателяПредставление",      ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
	ДанныеЗаполненияШапки.Вставить("БИКБанкаКорреспондента",           ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Код"));
	ДанныеЗаполненияШапки.Вставить("БанкКорреспондент",                ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Наименование"));
	ДанныеЗаполненияШапки.Вставить("СчетБанкаКорреспондента",          ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.КоррСчет"));
	
	ДанныеЗаполненияШапки.Вставить("Номер",             ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата",              ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));
	ДанныеЗаполненияШапки.Вставить("КодВалюты",         ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Код"));
	ДанныеЗаполненияШапки.Вставить("НаименованиеВалюты",ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Наименование"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"СрокПлатежа"));
	ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"ДатаОкончанияДействияСчета"));
	ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",     ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"ИтогиПрописью"));
	ДанныеЗаполненияШапки.Вставить("Руководитель",      ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Руководитель"));
	ДанныеЗаполненияШапки.Вставить("Бухгалтер",         ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"Бухгалтер"));
	ДанныеЗаполненияШапки.Вставить("НазначениеПлатежа", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"НазначениеПлатежа"));
	ДанныеЗаполненияШапки.Вставить("Сумма",             ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"СуммаИтог"));
	ДанныеЗаполненияШапки.Вставить("СуммаНДС",          ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"СуммаНалогаИтог"));
	ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",   ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));
	ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ПолучитьЗначениеРеквизита(ДеревоРазбора,
		СтрокаОбъекта, "ДополнительнаяИнформация"));
	ДанныеЗаполненияШапки.Вставить("АдресДоставки",     ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта,
		"АдресДоставки"));
	
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Артикул");
	ТЗ.Колонки.Добавить("ЕдиницаИзмерения");
	ТЗ.Колонки.Добавить("Количество");
	ТЗ.Колонки.Добавить("Цена");
	ТЗ.Колонки.Добавить("Сумма");
	ТЗ.Колонки.Добавить("СуммаНДС");
	ТЗ.Колонки.Добавить("СтавкаНДС");
	ТЗ.Колонки.Добавить("СуммаСкидки");
	ТЗ.Колонки.Добавить("Описание");
	
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗ.Добавить();
		Если СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			Если Тип = "Счет" Тогда
				НоваяСтрока.Товар = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
				ИДТовара = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
			Иначе
				НоваяСтрока.Товар = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Наименование");
				ИДТовара = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "НоменклатураПоставщика.Код");
			КонецЕсли; 
			Поз = Найти(ИДТовара, "#");
			Если Поз > 0 Тогда
				ИдТовара = Сред(ИДТовара, 1, Поз - 1);
			КонецЕсли;
			НоваяСтрока.Код = ИДТовара;
		ИначеЕсли СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			НоваяСтрока.Товар = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Наименование");
			НоваяСтрока.Код   = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Номенклатура.Код");
		КонецЕсли;
		
		НоваяСтрока.Описание = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Описание");
		НоваяСтрока.Артикул          = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.Артикул");
		Упаковка                     = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ,
			"ЕдиницаИзмерения.Наименование");
		БазоваяЕдиницаИзмерения      = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ,
			"Номенклатура.БазоваяЕдиница.Наименование");
		НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(Упаковка), Упаковка, БазоваяЕдиницаИзмерения);
		НоваяСтрока.Количество       = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ,
			"КоличествоУпаковок");
		НоваяСтрока.Цена             = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Цена");
		НоваяСтрока.Сумма            = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "Сумма");
		
		СуммаНДС = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "СуммаНДС");
		Если Не ЗначениеЗаполнено(СуммаНДС) Тогда
			НоваяСтрока.СуммаНДС         = 0;
		Иначе
			НоваяСтрока.СуммаНДС         = СуммаНДС;
		КонецЕсли;
		НоваяСтрока.СтавкаНДС        = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "СтавкаНДС");
		НоваяСтрока.СуммаСкидки      = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "СуммаСкидки");
		
	КонецЦикла;
	
	// ЭтапыОплаты
	ТЗЭтапыОплаты = Новый ТаблицаЗначений;
	
	Если Тип = "Заказ" Тогда
		ТЗЭтапыОплаты.Колонки.Добавить("ВариантОплаты");
	КонецЕсли;
	ТЗЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("ПроцентПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("СуммаПлатежа");
	ТЗЭтапыОплаты.Колонки.Добавить("НомерСтроки");
	НомерСтроки = 1;
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ЭтапыГрафикаОплаты"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		НоваяСтрока = ТЗЭтапыОплаты.Добавить();
		Если Тип = "Заказ" Тогда
			НоваяСтрока.ВариантОплаты = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "ВариантОплаты");
		КонецЕсли;
		НоваяСтрока.ДатаПлатежа    = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "ДатаПлатежа");
		НоваяСтрока.ПроцентПлатежа = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "ПроцентПлатежа");
		НоваяСтрока.СуммаПлатежа   = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаТЧ, "СуммаПлатежа");
		НоваяСтрока.НомерСтроки    = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка",       ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары",      ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыОплаты", ТЗЭтапыОплаты);
	
	СтрокаДереваДопДанных = ДеревоРазбора.Строки.Найти("ДеревоДопДанных", "Реквизит", Истина);
	Если СтрокаДереваДопДанных <> Неопределено И ТипЗнч(СтрокаДереваДопДанных.ЗначениеРеквизита) = Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = СтрокаДереваДопДанных.ЗначениеРеквизита;
		ДанныеДляОбъекта.Вставить("ДеревоДопДанных", ДеревоДопДанных);
	КонецЕсли;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ПрочитатьСтрокиДереваРекурсивно(СтрокиДерева, ТаблицаДопДанных, ИмяРодителя = "")
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ИмяРеквизита = "Набор" ИЛИ СтрокаДерева.ИмяРеквизита = "Массив" 
			ИЛИ СтрокаДерева.ИмяРеквизита = "Список" ИЛИ СтрокаДерева.ИмяРеквизита = "Нпп"
			ИЛИ СтрокаДерева.ЗначениеРеквизита = "Структура" Тогда
			
			ИмяРодителя = ИмяРодителя + СтрокаДерева.ЗначениеРеквизита;
			ПрочитатьСтрокиДереваРекурсивно(СтрокаДерева.Строки, ТаблицаДопДанных, ИмяРодителя);
		Иначе
			СтрокаТЗ = ТаблицаДопДанных.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьДопДанныеСтрок(ДеревоДопДанных, ИмяЧитаемойТаблицы, ТаблицаВозврата)
	
	СтруктураВозврата = Новый Структура("ЕстьПодписанные, ЕстьНеПодписанные", Ложь, Ложь);
	
	Если ДеревоДопДанных <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяЧитаемойТаблицы);
		СтрокиСписка = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если СтрокиСписка.Количество() > 0 Тогда
			
			ТаблицаДопДанных = Новый ТаблицаЗначений;
			ТаблицаДопДанных.Колонки.Добавить("Нпп");
			ТаблицаДопДанных.Колонки.Добавить("ИмяРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЗначениеРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЮридическиЗначимый");
			
			Для Каждого СтрокаСписка Из СтрокиСписка[0].Строки Цикл
				ТаблицаДопДанных.Очистить();
				ПрочитатьСтрокиДереваРекурсивно(СтрокаСписка.Строки, ТаблицаДопДанных);
				
				Если ТаблицаДопДанных.Количество() > 0 Тогда
					Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
						СтрокаТЗ.Нпп = ТаблицаДопДанных.Индекс(СтрокаТЗ) + 1;
					КонецЦикла;
					ТаблицаДопДанных.Сортировать("ЮридическиЗначимый, Нпп");
					СтрокаТЗВозврата = ТаблицаВозврата.Добавить();
					СтрокаТЗВозврата.НомерСтр = СтрокаСписка.ЗначениеРеквизита;
					Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
						Если СтрокаТЗ.ЮридическиЗначимый Тогда
							СтруктураВозврата.ЕстьПодписанные = Истина;
							СтрокаТЗВозврата.ПодписанныеДанные = ?(ЗначениеЗаполнено(СтрокаТЗВозврата.ПодписанныеДанные),
								СтрокаТЗВозврата.ПодписанныеДанные + Символы.ПС, "") + СтрокаТЗ.ИмяРеквизита + " = " + СтрокаТЗ.ЗначениеРеквизита;
						Иначе
							СтруктураВозврата.ЕстьНеПодписанные = Истина;
							СтрокаТЗВозврата.НеПодписанныеДанные = ?(ЗначениеЗаполнено(СтрокаТЗВозврата.НеПодписанныеДанные),
								СтрокаТЗВозврата.НеПодписанныеДанные + Символы.ПС, "") + СтрокаТЗ.ИмяРеквизита + " = " + СтрокаТЗ.ЗначениеРеквизита;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип)
	
	СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;
	СведенияОПолучателе = ДанныеПечати.Шапка.СведенияОПолучателе;
	
	Если Тип = "Счет" Тогда
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДатаПлатежа) Тогда
			
			НадписьСрокДействия = НСтр("ru='Счет действителен до %СрокДействия%.'");
			НадписьСрокДействия = СтрЗаменить(НадписьСрокДействия, "%СрокДействия%",
				Формат(ДанныеПечати.Шапка.ДатаПлатежа, "ДЛФ=D"));
			ОбластьМакета.Параметры.СрокДействия = НадписьСрокДействия;
			
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;
		ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.БанкКорреспондент) Тогда
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаКорреспондента;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкКорреспондент;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаКорреспондента;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
		Иначе	
			ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаПолучателя;
			ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкПолучателяПредставление;
			ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;
			ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетПолучателяПредставление;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ОписаниеОрганизации(
			СведенияОПоставщике, "ПолноеНаименование,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	Если Тип = "Счет" Тогда
		ТекстЗаголовка = НСтр("ru='Счет на оплату № %НомерДокумента% от %ДатаДокумента% г.'");
	ИначеЕсли Тип = "Заказ" Тогда
		ТекстЗаголовка = НСтр("ru='Заказ клиента № %НомерДокумента% от %ДатаДокумента% г.'");
	КонецЕсли;
	
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));
	
	ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьМакета.Параметры.ТекстПоставщик = ?(Тип = "Счет", НСтр("ru='Поставщик:'"), НСтр("ru='Исполнитель:'"));
	ОбластьМакета.Параметры.ПредставлениеПоставщика = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ОписаниеОрганизации(СведенияОПоставщике,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	ОбластьМакета.Параметры.ТекстПокупатель         = ?(Тип = "Счет", НСтр("ru='Покупатель:'"), НСтр("ru='Заказчик:'"));
	ОбластьМакета.Параметры.ПредставлениеПолучателя = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ОписаниеОрганизации(СведенияОПолучателе,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если Тип = "Счет" Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("НазначениеПлатежа");
		ОбластьМакета.Параметры.НазначениеПлатежа = ДанныеПечати.Шапка.НазначениеПлатежа;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("АдресДоставки");
		ОбластьМакета.Параметры.АдресДоставки = ДанныеПечати.Шапка.АдресДоставки;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСчетАТИ(СтруктураРазбора, ИдентификаторДокумента, ПодписьИсполнителя = "", ПодписьЗаказчика = "") Экспорт
	
	КоличествоЭкземпляров = 1;
	НаПринтер = Ложь;
	
	ЭтоУСН = Ложь;
	Тип = "Счет";
	
	СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;	
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;	
	
	ИспользоватьРучныеСкидки         = Вычислить(ИмяМодуляЭлектронныеДокументыСлужебныйВызовСервера).ПолучитьЗначениеФункциональнойОпции("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = Вычислить(ИмяМодуляЭлектронныеДокументыСлужебныйВызовСервера).ПолучитьЗначениеФункциональнойОпции("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	КолонкаКодов = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ИмяДополнительнойКолонки();
	
	Макет = ПолучитьМакет("СчетАТИ");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеПечати = ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора);

	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АТИ_Счет";
	
	ТаблицаТовары = ДанныеПечати.Товары;
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		ЧастичнаяОплата = Ложь;
	Иначе
		ЧастичнаяОплата = Истина;
	КонецЕсли;
	
	ЕстьСкидки = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки
		ИЛИ ИспользоватьАвтоматическиеСкидки);
	
	ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);
	ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС") <> Неопределено
		И ТаблицаТовары.Итог("СуммаНДС") > 0);
	
	Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки ТОгда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДССоСкидкой");
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		ОбластьКолонкаТовар = Макет.Область("ТоварСНДСИлиСоСкидкой");
	Иначе
		ОбластьКолонкаТовар = Макет.Область("Товар");
	КонецЕсли;
	
	Если НЕ ВыводитьКоды Тогда
		
		Если ДанныеПечати.УчитыватьНДС Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
		Иначе
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьСкидки ТОгда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
		
	ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
		
	Иначе
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		
	КонецЕсли;
	
	ТаблицаЭтапыОплаты = Новый ТаблицаЗначений;
	ТаблицаЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");
	Если ДанныеПечати.Свойство("ДатаПлатежа") Тогда
		НовСтрока = ТаблицаЭтапыОплаты.Добавить();
		НовСтрока.ДатаПлатежа = ДанныеПечати.ДатаПлатежа;
	КонецЕсли; 
	
	
	ДеревоДопДанных = Неопределено;
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений") Тогда
		ДеревоДопДанных = Неопределено;
	КонецЕсли;
	
	ТаблицаДопДанныхСтрок = Новый ТаблицаЗначений;
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НомерСтр");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("ПодписанныеДанные");
	ТаблицаДопДанныхСтрок.Колонки.Добавить("НеПодписанныеДанные");
	
	СтруктураНаличияДопДанных = СформироватьДопДанныеСтрок(ДеревоДопДанных, "Товары", ТаблицаДопДанныхСтрок);
	
	ЕстьДопДанные = Ложь;
	Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
		
		ЕстьДопДанные = Истина;
		
		Если ЕстьСкидки Тогда
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ДопДанныеТаблицыСЭЦП");
			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицыСНДС|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ДопДанныеТаблицыСЭЦП");
			
		Иначе
			ОбластьЗаголовокТаблицыДД = Макет.ПолучитьОбласть("ШапкаТаблицы|ДопДанныеТаблицыСЭЦП");
			ОбластьМакетаДД           = Макет.ПолучитьОбласть("СтрокаТаблицы|ДопДанныеТаблицыСЭЦП");
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип);
	СоответствиеСтавокНДС = Новый Соответствие;
	Если ЧастичнаяОплата Тогда
		
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЧастичнаяОплата"));
		
		ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЧастичнаяОплата");
		
		ОбластьСтрокаТаблицы.Параметры.Товар = ДанныеПечати.Шапка.НазначениеПлатежа;
		ОбластьСтрокаТаблицы.Параметры.Сумма = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
		
		ОбластьИтого = Макет.ПолучитьОбласть("ИтогоЧастичнаяОплата");
		ОбластьИтого.Параметры.Всего = ДанныеПечати.Шапка.Сумма;
		ТабличныйДокумент.Присоединить(ОбластьИтого);
		
		Если ЗначениеЗаполнено(ДанныеПечати.Шапка.СуммаНДС) Тогда
			
			ОбластьНДС = Макет.ПолучитьОбласть("ИтогоНДСЧастичнаяОплата");
			ОбластьНДС.Параметры.НДС = НСтр("ru = 'В т.ч. НДС:'");
			ОбластьНДС.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;
			ТабличныйДокумент.Вывести(ОбластьНДС);
			
		КонецЕсли;
		
	Иначе
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			
			ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
			
		КонецЕсли;
		
		ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)'");
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		Если ЕстьДопДанные Тогда
			ТабличныйДокумент.Присоединить(ОбластьЗаголовокТаблицыДД);
		КонецЕсли;
		
		
		Если ЕстьСкидки Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
			
			
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
			
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
			
		КонецЕсли;
		
		Сумма          = 0;
		СуммаНДС       = 0;
		ВсегоСкидок	   = 0;
		ВсегоБезСкидок = 0;
		
		НомерСтроки = 0;
		
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодов.Параметры.Артикул = СтрокаТовары.Артикул;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
				
			КонецЕсли;
			
			ТоварПредставление = ?(ЗначениеЗаполнено(СтрокаТовары.Описание), СтрокаТовары.Описание, СтрокаТовары.Товар);
			ОбластьТовар.Параметры.Товар = ТоварПредставление;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
			
			Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
				СуммаПоСтроке = СтрокаТовары.Сумма + СтрокаТовары.СуммаНДС;
			Иначе
				СуммаПоСтроке = СтрокаТовары.Сумма;
			КонецЕсли;
			
			ОбластьДанных.Параметры.Сумма = СуммаПоСтроке;
			
			Если ЕстьСкидки ТОгда
				СуммаСкидки = ?(ЗначениеЗаполнено(СтрокаТовары.СуммаСкидки), СтрокаТовары.СуммаСкидки, 0);
				ОбластьДанных.Параметры.СуммаБезСкидки = СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Если ТаблицаДопДанныхСтрок.Количество() > 0 Тогда
				СтрокаТаблицыДД = ТаблицаДопДанныхСтрок.Найти(Строка(НомерСтроки), "НомерСтр");
				Если СтрокаТаблицыДД <> Неопределено Тогда
					Если СтруктураНаличияДопДанных.ЕстьПодписанные Тогда
						ОбластьМакетаДД.Параметры.Подписанные = СтрокаТаблицыДД.ПодписанныеДанные;
						ТабличныйДокумент.Присоединить(ОбластьМакетаДД);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок = ВсегоСкидок + СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + СуммаПоСтроке + СуммаСкидки;
			КонецЕсли;
			
			Сумма = Сумма + СуммаПоСтроке;
			СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
			
		КонецЦикла;
		
		Если ЕстьСкидки ТОгда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");
		ИначеЕсли ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ТоварСНДСИлиСоСкидкой");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСНДС|ДанныеСНДСИлиСоСкидкой");
		Иначе
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		
		ОбластьДанных.Параметры.Всего = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ФорматСумм(Сумма);
		
		Если ДанныеПечати.УчитыватьНДС И ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСуммаНДС = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ФорматСумм(СуммаНДС);
		КонецЕсли;
		
		Если ЕстьСкидки Тогда
			ОбластьДанных.Параметры.ВсегоСкидок = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ФорматСумм(ВсегоСкидок);
			ОбластьДанных.Параметры.ВсегоБезСкидок = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ФорматСумм(ВсегоБезСкидок);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Вывести ИтогоНДС
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
			ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
			ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
			ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
			
			ТаблицаТоварыНДС = ТаблицаТовары.Скопировать( , "СтавкаНДС, СуммаНДС");
			ТаблицаТоварыНДС.Свернуть("СтавкаНДС", "СуммаНДС");
			Для Каждого ТекСтавкаНДС Из ТаблицаТоварыНДС Цикл
				СоответствиеСтавокНДС.Вставить(ТекСтавкаНДС.СтавкаНДС, ТекСтавкаНДС.СуммаНДС);
				ТабличныйДокумент.Вывести(ОбластьНомера);
				Если ВыводитьКоды Тогда
					ТабличныйДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				ТабличныйДокумент.Присоединить(ОбластьТовар);
				ОбластьДанных.Параметры.НДС = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ТекстНДСПоСтавке(ТекСтавкаНДС.СтавкаНДС,
					ДанныеПечати.Шапка.ЦенаВключаетНДС);
				ОбластьДанных.Параметры.ВсегоНДС = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ФорматСумм(ТекСтавкаНДС.СуммаНДС);
				ТабличныйДокумент.Присоединить(ОбластьДанных);
			КонецЦикла;
			
			ОбластьИтогоСНДС = Макет.ПолучитьОбласть("ИтогоСНДС");
			
			Если ДанныеПечати.Шапка.ЦенаВключаетНДС Тогда
				ВсегоСНДС = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ФорматСумм(Сумма);
			Иначе
				ВсегоСНДС = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).ФорматСумм(Сумма + СуммаНДС);
			КонецЕсли;
			
			ОбластьИтогоСНДС.Параметры.ВсегоСНДС = ВсегоСНДС;
			ТабличныйДокумент.Вывести(ОбластьИтогоСНДС)
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Вывести Сумму прописью
	ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
	
	ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ТаблицаЭтапыОплаты = ДанныеПечати.ЭтапыОплаты;
	Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты"));
		Область = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты");
		Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
			Область.Параметры.Заполнить(ТекЭтап);
			Область.Параметры.ТекстНДС = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).СформироватьТекстНДСЭтапаОплаты(
				СоответствиеСтавокНДС, ТекЭтап.ПроцентПлатежа);
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ИтогоЭтапыОплаты"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация) Тогда
		Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;
		ТабличныйДокумент.Вывести(Область);
	КонецЕсли;
	
	//Удалено: artem.b 21.05.2015
	// Подвал с подписями в рамках ЭДО не имеет смысла
	//ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");
	//ОбластьМакета.Параметры.ФИОРуководителя = ДанныеПечати.Шапка.Руководитель;
	//ОбластьМакета.Параметры.ФИОБухгалтера   = ДанныеПечати.Шапка.Бухгалтер;
	//ТабличныйДокумент.Вывести(ОбластьМакета);
	/// artem.b 21.05.2015
	
	Если ДанныеПечати.Свойство("ДеревоДопДанных", ДеревоДопДанных) И ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") Тогда
	
		СтруктураПоиска = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Набор", "Шапка");
		СтрокиШапки = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если СтрокиШапки.Количество() > 0 Тогда
			
			ТаблицаДопДанных = Новый ТаблицаЗначений;
			ТаблицаДопДанных.Колонки.Добавить("ИмяРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЗначениеРеквизита");
			ТаблицаДопДанных.Колонки.Добавить("ЮридическиЗначимый");
			
			ПрочитатьСтрокиДереваРекурсивно(СтрокиШапки, ТаблицаДопДанных);
			
			Если ТаблицаДопДанных.Количество() > 0 Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ДопДанныеШапки_Шапка");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				ОбластьМакетаСЭП = Макет.ПолучитьОбласть("ДопДанныеШапки_Строка");
				ОбластьМакетаБезЭП = Макет.ПолучитьОбласть("ДопДанныеШапки_СтрокаБезЭЦП");
				ТаблицаДопДанных.Колонки.Добавить("Нпп");
				Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
					СтрокаТЗ.Нпп = ТаблицаДопДанных.Индекс(СтрокаТЗ) + 1;
				КонецЦикла;
				ТаблицаДопДанных.Сортировать("ЮридическиЗначимый, Нпп");
				Для Каждого СтрокаТЗ Из ТаблицаДопДанных Цикл
					ОбластьМакета = ?(СтрокаТЗ.ЮридическиЗначимый, ОбластьМакетаСЭП, ОбластьМакетаБезЭП);
					ОбластьМакета.Параметры.Заполнить(СтрокаТЗ);
					ТабличныйДокумент.Вывести(ОбластьМакета);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////
	
	ИдентификаторФайла = ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");	
	
	ОбластьМакета = Макет.ПолучитьОбласть("АТИ_Доки");
	ОбластьМакета.Параметры.АТИ_Доки = "Документ передан через систему ЭДО ""АТИ-Доки""";
	ОбластьМакета.Параметры.ИдентификаторДокумента = ИдентификаторДокумента;
	ОбластьМакета.Параметры.ИдентификаторФайла = ИдентификаторФайла;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	Если ЗначениеЗаполнено(ПодписьИсполнителя) Тогда
		ЗаголовокПодписиИсполнителя = "Подпись Исполнителя";
	Иначе
	    ЗаголовокПодписиИсполнителя = "Документ Исполнителем не подписан";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПодписьЗаказчика) Тогда
		ЗаголовокПодписиЗаказчика = "Подпись Заказчика";
	Иначе
	    ЗаголовокПодписиЗаказчика = "Документ Заказчиком не подписан";
	КонецЕсли;
	
	ОбластьМакета.Параметры.ЗаголовокПодписиИсполнителя = ЗаголовокПодписиИсполнителя;
	ОбластьМакета.Параметры.ЗаголовокПодписиЗаказчика = ЗаголовокПодписиЗаказчика;
	
	ОбластьМакета.Параметры.ПредставлениеПодписиИсполнителя = ПодписьИсполнителя;
	ОбластьМакета.Параметры.ПредставлениеПодписиЗаказчика = ПодписьЗаказчика;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	////////////////////////////////////////////////////////////////
	
	Возврат ТабличныйДокумент;
	
КонецФункции

//Разбор результатов сервисов


//Служебные процедуры и функции

Функция Получить_ATI_ID(ОбъектСсылка) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Значение КАК Код_АТИ
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО ДополнительныеРеквизитыИСведения.Ссылка = ДополнительныеСведения.Свойство
	|			И (ДополнительныеСведения.Объект = &ОбъектСсылка)
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = ""Код_АТИ""
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты)";
	
	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Код_АТИ;
	КонецЕсли;
	
КонецФункции

Процедура Сохранить_КодATI_Контрагента(Контрагент, ID) Экспорт
	
	Если ЗначениеЗаполнено(Контрагент) И ID>0 Тогда

		ИмяСвойства = "Код_АТИ";
		Свойство = ПолучитьСоздатьСвойство(ИмяСвойства, ТипЧисло, ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Контрагенты"));
		МЗ = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МЗ.Свойство = Свойство;
		МЗ.Объект = Контрагент;
		МЗ.Значение = ID;
		МЗ.Записать();
		
	КонецЕсли;
	                                                                  
КонецПроцедуры

Процедура Сохранить_ATI_DOC_ID_Документа(Документ, ID) Экспорт
	
	Если ЗначениеЗаполнено(Документ) И ЗначениеЗаполнено(ID) Тогда

		ИмяСвойства = "ATI_DOC_ID";
		Свойство = ПолучитьСоздатьСвойство(ИмяСвойства, ТипСтрока);
		МЗ = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МЗ.Свойство = Свойство;
		МЗ.Объект = Документ;
		МЗ.Значение = ID;
		МЗ.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

Функция Получить_token() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеСведения.Значение КАК token
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО ДополнительныеРеквизитыИСведения.Ссылка = ДополнительныеСведения.Свойство
	|		И ДополнительныеСведения.Объект = &Объект
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Заголовок = ""token""
	|	И ДополнительныеРеквизитыИСведения.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Организации)";
	
	Запрос.УстановитьПараметр("Объект", Справочники.Организации.ПолучитьСсылку(ИдентификаторОбщихСвойств));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].token;
	КонецЕсли;
	
КонецФункции

Процедура СохранитьПараметрыПодключения(token, АдресСервера) Экспорт
	
	Если ЗначениеЗаполнено(token) Тогда

		ИмяСвойства = "token";
		Свойство = ПолучитьСоздатьСвойство("token", ТипСтрока, ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Организации"));
		МЗ = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МЗ.Свойство = Свойство;
		МЗ.Объект = Справочники.Организации.ПолучитьСсылку(ИдентификаторОбщихСвойств);
		МЗ.Значение = token;
		МЗ.Записать();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресСервера) Тогда

		ИмяСвойства = "АдресСервера";
		Свойство = ПолучитьСоздатьСвойство("АдресСервера", ТипСтрока, ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Организации"));
		МЗ = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		МЗ.Свойство = Свойство;
		МЗ.Объект = Справочники.Организации.ПолучитьСсылку(ИдентификаторОбщихСвойств);
		МЗ.Значение = АдресСервера;
		МЗ.Записать();
		
	КонецЕсли;
                                                                  
КонецПроцедуры

Функция ЭтоРедакция30()
	
	Возврат Лев(Метаданные.Версия, 3) = "3.0";
	
КонецФункции

Функция ЭтоРедакция20()
	
	Возврат Лев(Метаданные.Версия, 3) = "2.0";
	
КонецФункции

Функция ПолучитьИмяМодуляЭлДокументов() Экспорт
	
	Если Метаданные.Имя = "БухгалтерияПредприятия" Тогда
		
		Если ЭтоРедакция30() Тогда
			
			Возврат "ЭлектроннаяПодписьКлиентСервер"
			
		ИначеЕсли ЭтоРедакция20() Тогда
			
			Возврат "ЭлектроннаяЦифроваяПодписьКлиентСервер"
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВызватьИсключение "Не обнаружен общий модуль ""ЭлектроннаяЦифроваяПодписьКлиентСервер""";	
	
КонецФункции

Функция ПолучитьИмяМодуляУправлениеВзаиморасчетами()
	
	Если Метаданные.Имя = "БухгалтерияПредприятия" Тогда
		
		Если ЭтоРедакция30() Тогда
			
			Возврат "БухгалтерскийУчетПереопределяемый"
			
		ИначеЕсли ЭтоРедакция20() Тогда
			
			Возврат "УправлениеВзаиморасчетами"
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВызватьИсключение "Не обнаружен общий модуль ""БухгалтерскийУчетПереопределяемый""";	
	
КонецФункции

Функция СформироватьДокументВБазе(ID, ДокументИсходящий, ПутьКФайлу, ЭтоЗаявка = Ложь) Экспорт
	
	Перем ДокументСсылка;
	
	Если ЭтоЗаявка Тогда
		
		Возврат СформироватьЗаявку(ID, ПутьКФайлу);
		
	КонецЕсли;
	
	СтруктураРазбора = ВыполнитьРазборФайла(ПутьКФайлу);
	
	Если СтруктураРазбора = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;
	
	СтруктураИдентификатора = ПолучитьСтруктуруИдентификатора(ID);
	Если ДокументИсходящий Тогда
		Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
		КонецЕсли;
	Иначе
		
		ИмяТаблицы = МапЭДИНашихДокументов.Получить(СтрокаОбъекта.ВидЭД);
		
		Если ИмяТаблицы = Неопределено Тогда
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Данный вид ЭД %1 не поддерживается, документ не сформирован", СтрокаОбъекта.ВидЭД));
			Возврат Неопределено;
		КонецЕсли;
		
		НайденныйДокумент = НайтиДокументПоДокИД(ИмяТаблицы, СтруктураИдентификатора.id);
		
		Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
			Выполнить(ИмяМодуляЭлектронныеДокументыПереопределяемый + ".СохранитьДанныеОбъектаВБД(СтрокаОбъекта, ДеревоРазбора, НайденныйДокумент)");
			ДокументСсылка = НайденныйДокумент;
		Иначе
			ДокументСсылка = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).СохранитьДанныеОбъектаВБД(СтрокаОбъекта, ДеревоРазбора);
			Сохранить_ATI_DOC_ID_Документа(ДокументСсылка, СтруктураИдентификатора.id);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументСсылка;
	
КонецФункции

// Получает первичную информацию об ошибке
// Параметры:
//	ИнформацияОбОшибке - информация об ошибке
// Возвращает:
//	Информацию об ошибке, которая является первопричиной возникновения переданной ИнформацияОбОшибке
//  Если ошибка первичная, то возвращается сама ошибка, переданная в качестве параметра
Функция ПолучитьПричинуОшибки(ИнформацияОбОшибке) Экспорт
	ПричинаОшибки = ИнформацияОбОшибке.Причина;
	Если ПричинаОшибки = НеОпределено Тогда
		Возврат ИнформацияОбОшибке;
	КонецЕсли;
	Пока ПричинаОшибки.Причина <> НеОпределено Цикл
		ПричинаОшибки = ПричинаОшибки.Причина;
	КонецЦикла;
	Возврат ПричинаОшибки;
	
КонецФункции

Процедура ЗагрузитьУчетныеДокументы(ТаблицаВложений) Экспорт
	
	Для каждого Стр Из ТаблицаВложений Цикл
		
		//Если НЕ Стр.Пометка Тогда
		//	Продолжить;
		//КонецЕсли;
		
		СтруктураРазбора = Стр.СтруктураРазбора;
		
		Если ТипЗнч(СтруктураРазбора) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;
		СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;
		Если ТипЗнч(СтруктураРазбора) <> Тип("Структура") Тогда
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Невозможно разобрать данные документа в строке №", ТаблицаВложений.Индекс(Стр)+1));
			Продолжить;
		КонецЕсли;
		
		Если Стр.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
			ИЛИ Стр.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			ТекстЗапроса = ТекстЗапросаПоискАкта();
			
		ИначеЕсли Стр.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			ТекстЗапроса = ТекстЗапросаПоискСчетаФактуры();	
			
		ИначеЕсли Стр.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			ТекстЗапроса = ТекстЗапросаПоискПлатежногоПоручения();	
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		ДатаДокумента = Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Дата");
		НомерДокумента = Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Номер");
		
		Запрос.Параметры.Вставить("Валюта", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Валюта"));
		Запрос.Параметры.Вставить("Банк", ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Банк"));
		
		Запрос.Параметры.Вставить("Номер", НомерДокумента);
		Запрос.Параметры.Вставить("Дата", ДатаДокумента);
		Запрос.Параметры.Вставить("КонтрагентИНН", Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));
		Запрос.Параметры.Вставить("КонтрагентКПП", Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "Контрагент.КПП"));
		
		Запрос.Параметры.Вставить("КонтрагентСчет", Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));
		Запрос.Параметры.Вставить("КонтрагентБанкБИК", Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));
		Запрос.Параметры.Вставить("КонтрагентБанкКоррСчет", Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));
		
		ВыставленныйКомитентом = (Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "ВыставленныйКомитентом") = Истина);
		ИмяРеквОрганизации = ?(ВыставленныйКомитентом, "Покупатель", "Организация");
		
		Запрос.Параметры.Вставить("ОрганизацияИНН", Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".ИНН"));
		Запрос.Параметры.Вставить("ОрганизацияКПП", Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, ИмяРеквОрганизации + ".КПП"));
		
		Запрос.Параметры.Вставить("ОрганизацияСчет", Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.НомерСчета"));
		Запрос.Параметры.Вставить("ОрганизацияБанкБИК", Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Код"));
		Запрос.Параметры.Вставить("ОрганизацияБанкКоррСчет", Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.КоррСчет"));
		
		РезультатСтруктура = Запрос.Выполнить().Выбрать();
		РезультатСтруктура.Следующий();

		Если Стр.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
			ИЛИ Стр.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ Стр.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			
			СсылкаДокумента = Вычислить(ИмяМодуляЭлектронныеДокументыПереопределяемый).СохранитьДанныеОбъектаВБД(СтрокаОбъекта, ДеревоРазбора, РезультатСтруктура.Документ);
			
		Иначе
			
			СсылкаДокумента = НайтиСоздатьПлатежноеПоручение(Запрос.Параметры, СтруктураРазбора, РезультатСтруктура);
			
		КонецЕсли;
		
		Сохранить_ATI_DOC_ID_Документа(СсылкаДокумента, Стр.ФайлID); 
		Стр.Документ1С = СсылкаДокумента;
				
	КонецЦикла;
		
КонецПроцедуры

Функция НайтиСоздатьПлатежноеПоручение(ПараметрыЗапроса, СтруктураРазбора, РезультатСтруктура)
	
	ДеревоРазбора = СтруктураРазбора.ДеревоРазбора;
	СтрокаОбъекта = СтруктураРазбора.СтрокаОбъекта;
	
	ДокументСсылка = РезультатСтруктура.Документ;
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
		ДокументОбъект.Дата = ПараметрыЗапроса.Дата;
		
		ДокументОбъект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Документ загружен из АТИ Доки %1. Дата: %2, Номер: %3", ТекущаяДата(), Формат(ПараметрыЗапроса.Дата, "ДЛФ=D"), ПараметрыЗапроса.Номер);
		
	КонецЕсли;
	
	Сумма = Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "СуммаИтог");
		
	СуммаНДС = Вычислить(ИмяМодуляЭлектронныеДокументыВнутренний).ПолучитьЗначениеРеквизита(ДеревоРазбора, СтрокаОбъекта, "СуммаНалогаИтог");
	
	Контрагент = РезультатСтруктура.Контрагент;
	Организация = РезультатСтруктура.Организация;
	
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.Контрагент = Контрагент;
	
	ДокументОбъект.СчетОрганизации = РезультатСтруктура.СчетОрганизации;
	ДокументОбъект.СчетКонтрагента = РезультатСтруктура.СчетКонтрагента;
	
	Если ДокументОбъект.СчетОрганизации.Пустая() Тогда
		ДокументОбъект.СчетОрганизации = СоздатьБанковскийСчет(Организация, "Организация", ПараметрыЗапроса);
	КонецЕсли;
	
	Если ДокументОбъект.СчетКонтрагента.Пустая() Тогда
		ДокументОбъект.СчетКонтрагента = СоздатьБанковскийСчет(Контрагент, "Контрагент", ПараметрыЗапроса);
	КонецЕсли;
	
	//УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(ДокументОбъект.СчетОрганизации, ДокументОбъект.Организация, ДокументОбъект.мВалютаРегламентированногоУчета);
	
	ОбщийМодуль = Вычислить(ИмяМодуляУправлениеВзаиморасчетами+".УстановитьДоговорКонтрагента(ДокументОбъект.ДоговорКонтрагента, ДокументОбъект.Контрагент, ДокументОбъект.Организация, 
		|Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком)");
		
	//УправлениеДенежнымиСредствами.УстановитьБанковскийСчет(ДокументОбъект.СчетКонтрагента, ДокументОбъект.Контрагент, ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств);
	
	ДокументОбъект.СуммаДокумента = Сумма;
	ДокументОбъект.СуммаНДС = СуммаНДС;
	
	ДокументОбъект.ВидПлатежа = "Электронно";
	ДокументОбъект.ОчередностьПлатежа = 5;
	
	ДокументОбъект.НазначениеПлатежа = ДокументОбъект.ТекстНазначенияПлатежа(ДокументОбъект.СчетКонтрагента, ДокументОбъект.ДоговорКонтрагента, Ложь);
	ДокументОбъект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	
	Попытка
		ДокументОбъект.Записать();
		Возврат ДокументОбъект.Ссылка;
	Исключение
	    Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ДокументСсылка;
	
КонецФункции

Функция ПолучитьМенеджерКриптографии() Экспорт
	
	Выполнить("МенеджерКриптографии = "+ИмяМодуляЭлектронныеДокументыВнутренний+".ПолучитьМенеджерКриптографии()");
	
КонецФункции


ИмяМодуляУправлениеВзаиморасчетами = ПолучитьИмяМодуляУправлениеВзаиморасчетами();

ТипСтрока = Новый ОписаниеТипов("Строка");
ТипЧисло = Новый ОписаниеТипов("Число");


МапЭДИНашихДокументов = Новый Соответствие;
МапЭДИНашихДокументов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыЭД.АктИсполнитель"), "ПоступлениеТоваровУслуг");
МапЭДИНашихДокументов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетФактура"), "СчетФактураПолученный");
МапЭДИНашихДокументов.Вставить(ПредопределенноеЗначение("Перечисление.ВидыЭД.СчетНаОплату"), "СчетНаОплатуПоставщика");

ИдентификаторОбщихСвойств = Новый УникальныйИдентификатор("aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee");
